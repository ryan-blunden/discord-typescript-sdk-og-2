/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ApplicationCommandOptionIntegerChoice = {
  name: string;
  nameLocalizations?: { [k: string]: string } | null | undefined;
  value: number;
};

/** @internal */
export const ApplicationCommandOptionIntegerChoice$inboundSchema: z.ZodType<
  ApplicationCommandOptionIntegerChoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  name_localizations: z.nullable(z.record(z.string())).optional(),
  value: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "name_localizations": "nameLocalizations",
  });
});

/** @internal */
export type ApplicationCommandOptionIntegerChoice$Outbound = {
  name: string;
  name_localizations?: { [k: string]: string } | null | undefined;
  value: number;
};

/** @internal */
export const ApplicationCommandOptionIntegerChoice$outboundSchema: z.ZodType<
  ApplicationCommandOptionIntegerChoice$Outbound,
  z.ZodTypeDef,
  ApplicationCommandOptionIntegerChoice
> = z.object({
  name: z.string(),
  nameLocalizations: z.nullable(z.record(z.string())).optional(),
  value: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    nameLocalizations: "name_localizations",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationCommandOptionIntegerChoice$ {
  /** @deprecated use `ApplicationCommandOptionIntegerChoice$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationCommandOptionIntegerChoice$inboundSchema;
  /** @deprecated use `ApplicationCommandOptionIntegerChoice$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationCommandOptionIntegerChoice$outboundSchema;
  /** @deprecated use `ApplicationCommandOptionIntegerChoice$Outbound` instead. */
  export type Outbound = ApplicationCommandOptionIntegerChoice$Outbound;
}

export function applicationCommandOptionIntegerChoiceToJSON(
  applicationCommandOptionIntegerChoice: ApplicationCommandOptionIntegerChoice,
): string {
  return JSON.stringify(
    ApplicationCommandOptionIntegerChoice$outboundSchema.parse(
      applicationCommandOptionIntegerChoice,
    ),
  );
}

export function applicationCommandOptionIntegerChoiceFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationCommandOptionIntegerChoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationCommandOptionIntegerChoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationCommandOptionIntegerChoice' from JSON`,
  );
}
