/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SettingsEmojiResponse = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  animated?: boolean | null | undefined;
};

/** @internal */
export const SettingsEmojiResponse$inboundSchema: z.ZodType<
  SettingsEmojiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  animated: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type SettingsEmojiResponse$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  animated?: boolean | null | undefined;
};

/** @internal */
export const SettingsEmojiResponse$outboundSchema: z.ZodType<
  SettingsEmojiResponse$Outbound,
  z.ZodTypeDef,
  SettingsEmojiResponse
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  animated: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettingsEmojiResponse$ {
  /** @deprecated use `SettingsEmojiResponse$inboundSchema` instead. */
  export const inboundSchema = SettingsEmojiResponse$inboundSchema;
  /** @deprecated use `SettingsEmojiResponse$outboundSchema` instead. */
  export const outboundSchema = SettingsEmojiResponse$outboundSchema;
  /** @deprecated use `SettingsEmojiResponse$Outbound` instead. */
  export type Outbound = SettingsEmojiResponse$Outbound;
}

export function settingsEmojiResponseToJSON(
  settingsEmojiResponse: SettingsEmojiResponse,
): string {
  return JSON.stringify(
    SettingsEmojiResponse$outboundSchema.parse(settingsEmojiResponse),
  );
}

export function settingsEmojiResponseFromJSON(
  jsonString: string,
): SafeParseResult<SettingsEmojiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SettingsEmojiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SettingsEmojiResponse' from JSON`,
  );
}
