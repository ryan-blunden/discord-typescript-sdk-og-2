/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OAuth2GetOpenIDConnectUserInfoResponse = {
  sub: string;
  email?: string | null | undefined;
  emailVerified?: boolean | null | undefined;
  preferredUsername?: string | null | undefined;
  nickname?: string | null | undefined;
  picture?: string | null | undefined;
  locale?: string | null | undefined;
};

/** @internal */
export const OAuth2GetOpenIDConnectUserInfoResponse$inboundSchema: z.ZodType<
  OAuth2GetOpenIDConnectUserInfoResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sub: z.string(),
  email: z.nullable(z.string()).optional(),
  email_verified: z.nullable(z.boolean()).optional(),
  preferred_username: z.nullable(z.string()).optional(),
  nickname: z.nullable(z.string()).optional(),
  picture: z.nullable(z.string()).optional(),
  locale: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "email_verified": "emailVerified",
    "preferred_username": "preferredUsername",
  });
});

/** @internal */
export type OAuth2GetOpenIDConnectUserInfoResponse$Outbound = {
  sub: string;
  email?: string | null | undefined;
  email_verified?: boolean | null | undefined;
  preferred_username?: string | null | undefined;
  nickname?: string | null | undefined;
  picture?: string | null | undefined;
  locale?: string | null | undefined;
};

/** @internal */
export const OAuth2GetOpenIDConnectUserInfoResponse$outboundSchema: z.ZodType<
  OAuth2GetOpenIDConnectUserInfoResponse$Outbound,
  z.ZodTypeDef,
  OAuth2GetOpenIDConnectUserInfoResponse
> = z.object({
  sub: z.string(),
  email: z.nullable(z.string()).optional(),
  emailVerified: z.nullable(z.boolean()).optional(),
  preferredUsername: z.nullable(z.string()).optional(),
  nickname: z.nullable(z.string()).optional(),
  picture: z.nullable(z.string()).optional(),
  locale: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    emailVerified: "email_verified",
    preferredUsername: "preferred_username",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OAuth2GetOpenIDConnectUserInfoResponse$ {
  /** @deprecated use `OAuth2GetOpenIDConnectUserInfoResponse$inboundSchema` instead. */
  export const inboundSchema =
    OAuth2GetOpenIDConnectUserInfoResponse$inboundSchema;
  /** @deprecated use `OAuth2GetOpenIDConnectUserInfoResponse$outboundSchema` instead. */
  export const outboundSchema =
    OAuth2GetOpenIDConnectUserInfoResponse$outboundSchema;
  /** @deprecated use `OAuth2GetOpenIDConnectUserInfoResponse$Outbound` instead. */
  export type Outbound = OAuth2GetOpenIDConnectUserInfoResponse$Outbound;
}

export function oAuth2GetOpenIDConnectUserInfoResponseToJSON(
  oAuth2GetOpenIDConnectUserInfoResponse:
    OAuth2GetOpenIDConnectUserInfoResponse,
): string {
  return JSON.stringify(
    OAuth2GetOpenIDConnectUserInfoResponse$outboundSchema.parse(
      oAuth2GetOpenIDConnectUserInfoResponse,
    ),
  );
}

export function oAuth2GetOpenIDConnectUserInfoResponseFromJSON(
  jsonString: string,
): SafeParseResult<OAuth2GetOpenIDConnectUserInfoResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OAuth2GetOpenIDConnectUserInfoResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OAuth2GetOpenIDConnectUserInfoResponse' from JSON`,
  );
}
