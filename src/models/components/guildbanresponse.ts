/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserResponse,
  UserResponse$inboundSchema,
  UserResponse$Outbound,
  UserResponse$outboundSchema,
} from "./userresponse.js";

export type GuildBanResponse = {
  user: UserResponse;
  reason?: string | null | undefined;
};

/** @internal */
export const GuildBanResponse$inboundSchema: z.ZodType<
  GuildBanResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  user: UserResponse$inboundSchema,
  reason: z.nullable(z.string()).optional(),
});

/** @internal */
export type GuildBanResponse$Outbound = {
  user: UserResponse$Outbound;
  reason?: string | null | undefined;
};

/** @internal */
export const GuildBanResponse$outboundSchema: z.ZodType<
  GuildBanResponse$Outbound,
  z.ZodTypeDef,
  GuildBanResponse
> = z.object({
  user: UserResponse$outboundSchema,
  reason: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GuildBanResponse$ {
  /** @deprecated use `GuildBanResponse$inboundSchema` instead. */
  export const inboundSchema = GuildBanResponse$inboundSchema;
  /** @deprecated use `GuildBanResponse$outboundSchema` instead. */
  export const outboundSchema = GuildBanResponse$outboundSchema;
  /** @deprecated use `GuildBanResponse$Outbound` instead. */
  export type Outbound = GuildBanResponse$Outbound;
}

export function guildBanResponseToJSON(
  guildBanResponse: GuildBanResponse,
): string {
  return JSON.stringify(
    GuildBanResponse$outboundSchema.parse(guildBanResponse),
  );
}

export function guildBanResponseFromJSON(
  jsonString: string,
): SafeParseResult<GuildBanResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GuildBanResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GuildBanResponse' from JSON`,
  );
}
