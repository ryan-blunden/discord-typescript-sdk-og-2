/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ApplicationCommandBooleanOptionResponse = {
  type?: 1 | undefined;
  name: string;
  nameLocalized?: string | null | undefined;
  nameLocalizations?: { [k: string]: string } | null | undefined;
  description: string;
  descriptionLocalized?: string | null | undefined;
  descriptionLocalizations?: { [k: string]: string } | null | undefined;
  required?: boolean | null | undefined;
};

/** @internal */
export const ApplicationCommandBooleanOptionResponse$inboundSchema: z.ZodType<
  ApplicationCommandBooleanOptionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal(1).optional(),
  name: z.string(),
  name_localized: z.nullable(z.string()).optional(),
  name_localizations: z.nullable(z.record(z.string())).optional(),
  description: z.string(),
  description_localized: z.nullable(z.string()).optional(),
  description_localizations: z.nullable(z.record(z.string())).optional(),
  required: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "name_localized": "nameLocalized",
    "name_localizations": "nameLocalizations",
    "description_localized": "descriptionLocalized",
    "description_localizations": "descriptionLocalizations",
  });
});

/** @internal */
export type ApplicationCommandBooleanOptionResponse$Outbound = {
  type: 1;
  name: string;
  name_localized?: string | null | undefined;
  name_localizations?: { [k: string]: string } | null | undefined;
  description: string;
  description_localized?: string | null | undefined;
  description_localizations?: { [k: string]: string } | null | undefined;
  required?: boolean | null | undefined;
};

/** @internal */
export const ApplicationCommandBooleanOptionResponse$outboundSchema: z.ZodType<
  ApplicationCommandBooleanOptionResponse$Outbound,
  z.ZodTypeDef,
  ApplicationCommandBooleanOptionResponse
> = z.object({
  type: z.literal(1).default(1 as const),
  name: z.string(),
  nameLocalized: z.nullable(z.string()).optional(),
  nameLocalizations: z.nullable(z.record(z.string())).optional(),
  description: z.string(),
  descriptionLocalized: z.nullable(z.string()).optional(),
  descriptionLocalizations: z.nullable(z.record(z.string())).optional(),
  required: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    nameLocalized: "name_localized",
    nameLocalizations: "name_localizations",
    descriptionLocalized: "description_localized",
    descriptionLocalizations: "description_localizations",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationCommandBooleanOptionResponse$ {
  /** @deprecated use `ApplicationCommandBooleanOptionResponse$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationCommandBooleanOptionResponse$inboundSchema;
  /** @deprecated use `ApplicationCommandBooleanOptionResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationCommandBooleanOptionResponse$outboundSchema;
  /** @deprecated use `ApplicationCommandBooleanOptionResponse$Outbound` instead. */
  export type Outbound = ApplicationCommandBooleanOptionResponse$Outbound;
}

export function applicationCommandBooleanOptionResponseToJSON(
  applicationCommandBooleanOptionResponse:
    ApplicationCommandBooleanOptionResponse,
): string {
  return JSON.stringify(
    ApplicationCommandBooleanOptionResponse$outboundSchema.parse(
      applicationCommandBooleanOptionResponse,
    ),
  );
}

export function applicationCommandBooleanOptionResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ApplicationCommandBooleanOptionResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationCommandBooleanOptionResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApplicationCommandBooleanOptionResponse' from JSON`,
  );
}
