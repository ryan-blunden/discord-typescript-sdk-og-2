/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  ApplicationIntegrationTypeConfiguration,
  ApplicationIntegrationTypeConfiguration$inboundSchema,
  ApplicationIntegrationTypeConfiguration$Outbound,
  ApplicationIntegrationTypeConfiguration$outboundSchema,
} from "./applicationintegrationtypeconfiguration.js";
import {
  ApplicationOAuth2InstallParams,
  ApplicationOAuth2InstallParams$inboundSchema,
  ApplicationOAuth2InstallParams$Outbound,
  ApplicationOAuth2InstallParams$outboundSchema,
} from "./applicationoauth2installparams.js";

export type Description = {
  default: string;
  localizations?: { [k: string]: string } | null | undefined;
};

export type ApplicationFormPartial = {
  description?: Description | null | undefined;
  icon?: string | null | undefined;
  coverImage?: string | null | undefined;
  teamId?: string | null | undefined;
  flags?: number | null | undefined;
  interactionsEndpointUrl?: string | null | undefined;
  explicitContentFilter?: 0 | null | undefined;
  maxParticipants?: number | null | undefined;
  type?: 4 | null | undefined;
  tags?: Array<string> | null | undefined;
  customInstallUrl?: string | null | undefined;
  installParams?: ApplicationOAuth2InstallParams | null | undefined;
  roleConnectionsVerificationUrl?: string | null | undefined;
  integrationTypesConfig?:
    | { [k: string]: ApplicationIntegrationTypeConfiguration }
    | null
    | undefined;
};

/** @internal */
export const Description$inboundSchema: z.ZodType<
  Description,
  z.ZodTypeDef,
  unknown
> = z.object({
  default: z.string(),
  localizations: z.nullable(z.record(z.string())).optional(),
});

/** @internal */
export type Description$Outbound = {
  default: string;
  localizations?: { [k: string]: string } | null | undefined;
};

/** @internal */
export const Description$outboundSchema: z.ZodType<
  Description$Outbound,
  z.ZodTypeDef,
  Description
> = z.object({
  default: z.string(),
  localizations: z.nullable(z.record(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Description$ {
  /** @deprecated use `Description$inboundSchema` instead. */
  export const inboundSchema = Description$inboundSchema;
  /** @deprecated use `Description$outboundSchema` instead. */
  export const outboundSchema = Description$outboundSchema;
  /** @deprecated use `Description$Outbound` instead. */
  export type Outbound = Description$Outbound;
}

/** @internal */
export const ApplicationFormPartial$inboundSchema: z.ZodType<
  ApplicationFormPartial,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.nullable(z.lazy(() => Description$inboundSchema)).optional(),
  icon: z.nullable(z.string()).optional(),
  cover_image: z.nullable(z.string()).optional(),
  team_id: z.nullable(z.string()).optional(),
  flags: z.nullable(z.number().int()).optional(),
  interactions_endpoint_url: z.nullable(z.string()).optional(),
  explicit_content_filter: z.nullable(z.literal(0)).optional(),
  max_participants: z.nullable(z.number().int()).optional(),
  type: z.nullable(z.literal(4)).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  custom_install_url: z.nullable(z.string()).optional(),
  install_params: z.nullable(ApplicationOAuth2InstallParams$inboundSchema)
    .optional(),
  role_connections_verification_url: z.nullable(z.string()).optional(),
  integration_types_config: z.nullable(
    z.record(ApplicationIntegrationTypeConfiguration$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "cover_image": "coverImage",
    "team_id": "teamId",
    "interactions_endpoint_url": "interactionsEndpointUrl",
    "explicit_content_filter": "explicitContentFilter",
    "max_participants": "maxParticipants",
    "custom_install_url": "customInstallUrl",
    "install_params": "installParams",
    "role_connections_verification_url": "roleConnectionsVerificationUrl",
    "integration_types_config": "integrationTypesConfig",
  });
});

/** @internal */
export type ApplicationFormPartial$Outbound = {
  description?: Description$Outbound | null | undefined;
  icon?: string | null | undefined;
  cover_image?: string | null | undefined;
  team_id?: string | null | undefined;
  flags?: number | null | undefined;
  interactions_endpoint_url?: string | null | undefined;
  explicit_content_filter: 0 | null;
  max_participants?: number | null | undefined;
  type: 4 | null;
  tags?: Array<string> | null | undefined;
  custom_install_url?: string | null | undefined;
  install_params?: ApplicationOAuth2InstallParams$Outbound | null | undefined;
  role_connections_verification_url?: string | null | undefined;
  integration_types_config?:
    | { [k: string]: ApplicationIntegrationTypeConfiguration$Outbound }
    | null
    | undefined;
};

/** @internal */
export const ApplicationFormPartial$outboundSchema: z.ZodType<
  ApplicationFormPartial$Outbound,
  z.ZodTypeDef,
  ApplicationFormPartial
> = z.object({
  description: z.nullable(z.lazy(() => Description$outboundSchema)).optional(),
  icon: z.nullable(z.string()).optional(),
  coverImage: z.nullable(z.string()).optional(),
  teamId: z.nullable(z.string()).optional(),
  flags: z.nullable(z.number().int()).optional(),
  interactionsEndpointUrl: z.nullable(z.string()).optional(),
  explicitContentFilter: z.nullable(z.literal(0).default(0 as const)),
  maxParticipants: z.nullable(z.number().int()).optional(),
  type: z.nullable(z.literal(4).default(4 as const)),
  tags: z.nullable(z.array(z.string())).optional(),
  customInstallUrl: z.nullable(z.string()).optional(),
  installParams: z.nullable(ApplicationOAuth2InstallParams$outboundSchema)
    .optional(),
  roleConnectionsVerificationUrl: z.nullable(z.string()).optional(),
  integrationTypesConfig: z.nullable(
    z.record(ApplicationIntegrationTypeConfiguration$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    coverImage: "cover_image",
    teamId: "team_id",
    interactionsEndpointUrl: "interactions_endpoint_url",
    explicitContentFilter: "explicit_content_filter",
    maxParticipants: "max_participants",
    customInstallUrl: "custom_install_url",
    installParams: "install_params",
    roleConnectionsVerificationUrl: "role_connections_verification_url",
    integrationTypesConfig: "integration_types_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationFormPartial$ {
  /** @deprecated use `ApplicationFormPartial$inboundSchema` instead. */
  export const inboundSchema = ApplicationFormPartial$inboundSchema;
  /** @deprecated use `ApplicationFormPartial$outboundSchema` instead. */
  export const outboundSchema = ApplicationFormPartial$outboundSchema;
  /** @deprecated use `ApplicationFormPartial$Outbound` instead. */
  export type Outbound = ApplicationFormPartial$Outbound;
}
