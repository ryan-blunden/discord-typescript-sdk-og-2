/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ApplicationCommandOptionIntegerChoice,
  ApplicationCommandOptionIntegerChoice$inboundSchema,
  ApplicationCommandOptionIntegerChoice$Outbound,
  ApplicationCommandOptionIntegerChoice$outboundSchema,
} from "./applicationcommandoptionintegerchoice.js";

export type ApplicationCommandIntegerOption = {
  type?: 1 | undefined;
  name: string;
  nameLocalizations?: { [k: string]: string } | null | undefined;
  description: string;
  descriptionLocalizations?: { [k: string]: string } | null | undefined;
  required?: boolean | null | undefined;
  autocomplete?: boolean | null | undefined;
  choices?: Array<ApplicationCommandOptionIntegerChoice> | null | undefined;
  minValue?: number | null | undefined;
  maxValue?: number | null | undefined;
};

/** @internal */
export const ApplicationCommandIntegerOption$inboundSchema: z.ZodType<
  ApplicationCommandIntegerOption,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal(1).optional(),
  name: z.string(),
  name_localizations: z.nullable(z.record(z.string())).optional(),
  description: z.string(),
  description_localizations: z.nullable(z.record(z.string())).optional(),
  required: z.nullable(z.boolean()).optional(),
  autocomplete: z.nullable(z.boolean()).optional(),
  choices: z.nullable(
    z.array(ApplicationCommandOptionIntegerChoice$inboundSchema),
  ).optional(),
  min_value: z.nullable(z.number().int()).optional(),
  max_value: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "name_localizations": "nameLocalizations",
    "description_localizations": "descriptionLocalizations",
    "min_value": "minValue",
    "max_value": "maxValue",
  });
});

/** @internal */
export type ApplicationCommandIntegerOption$Outbound = {
  type: 1;
  name: string;
  name_localizations?: { [k: string]: string } | null | undefined;
  description: string;
  description_localizations?: { [k: string]: string } | null | undefined;
  required?: boolean | null | undefined;
  autocomplete?: boolean | null | undefined;
  choices?:
    | Array<ApplicationCommandOptionIntegerChoice$Outbound>
    | null
    | undefined;
  min_value?: number | null | undefined;
  max_value?: number | null | undefined;
};

/** @internal */
export const ApplicationCommandIntegerOption$outboundSchema: z.ZodType<
  ApplicationCommandIntegerOption$Outbound,
  z.ZodTypeDef,
  ApplicationCommandIntegerOption
> = z.object({
  type: z.literal(1).default(1 as const),
  name: z.string(),
  nameLocalizations: z.nullable(z.record(z.string())).optional(),
  description: z.string(),
  descriptionLocalizations: z.nullable(z.record(z.string())).optional(),
  required: z.nullable(z.boolean()).optional(),
  autocomplete: z.nullable(z.boolean()).optional(),
  choices: z.nullable(
    z.array(ApplicationCommandOptionIntegerChoice$outboundSchema),
  ).optional(),
  minValue: z.nullable(z.number().int()).optional(),
  maxValue: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    nameLocalizations: "name_localizations",
    descriptionLocalizations: "description_localizations",
    minValue: "min_value",
    maxValue: "max_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationCommandIntegerOption$ {
  /** @deprecated use `ApplicationCommandIntegerOption$inboundSchema` instead. */
  export const inboundSchema = ApplicationCommandIntegerOption$inboundSchema;
  /** @deprecated use `ApplicationCommandIntegerOption$outboundSchema` instead. */
  export const outboundSchema = ApplicationCommandIntegerOption$outboundSchema;
  /** @deprecated use `ApplicationCommandIntegerOption$Outbound` instead. */
  export type Outbound = ApplicationCommandIntegerOption$Outbound;
}

export function applicationCommandIntegerOptionToJSON(
  applicationCommandIntegerOption: ApplicationCommandIntegerOption,
): string {
  return JSON.stringify(
    ApplicationCommandIntegerOption$outboundSchema.parse(
      applicationCommandIntegerOption,
    ),
  );
}

export function applicationCommandIntegerOptionFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationCommandIntegerOption, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationCommandIntegerOption$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationCommandIntegerOption' from JSON`,
  );
}
