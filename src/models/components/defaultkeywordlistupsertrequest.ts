/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BlockMessageAction,
  BlockMessageAction$inboundSchema,
  BlockMessageAction$Outbound,
  BlockMessageAction$outboundSchema,
} from "./blockmessageaction.js";
import {
  DefaultKeywordListTriggerMetadata,
  DefaultKeywordListTriggerMetadata$inboundSchema,
  DefaultKeywordListTriggerMetadata$Outbound,
  DefaultKeywordListTriggerMetadata$outboundSchema,
} from "./defaultkeywordlisttriggermetadata.js";
import {
  FlagToChannelAction,
  FlagToChannelAction$inboundSchema,
  FlagToChannelAction$Outbound,
  FlagToChannelAction$outboundSchema,
} from "./flagtochannelaction.js";
import {
  QuarantineUserAction,
  QuarantineUserAction$inboundSchema,
  QuarantineUserAction$Outbound,
  QuarantineUserAction$outboundSchema,
} from "./quarantineuseraction.js";
import {
  UserCommunicationDisabledAction,
  UserCommunicationDisabledAction$inboundSchema,
  UserCommunicationDisabledAction$Outbound,
  UserCommunicationDisabledAction$outboundSchema,
} from "./usercommunicationdisabledaction.js";

export type DefaultKeywordListUpsertRequestActions =
  | BlockMessageAction
  | FlagToChannelAction
  | QuarantineUserAction
  | UserCommunicationDisabledAction;

export type DefaultKeywordListUpsertRequest = {
  name: string;
  eventType?: 1 | undefined;
  actions?:
    | Array<
      | BlockMessageAction
      | FlagToChannelAction
      | QuarantineUserAction
      | UserCommunicationDisabledAction
    >
    | null
    | undefined;
  enabled?: boolean | null | undefined;
  exemptRoles?: Array<string> | null | undefined;
  exemptChannels?: Array<string> | null | undefined;
  triggerType?: 1 | undefined;
  triggerMetadata: DefaultKeywordListTriggerMetadata;
};

/** @internal */
export const DefaultKeywordListUpsertRequestActions$inboundSchema: z.ZodType<
  DefaultKeywordListUpsertRequestActions,
  z.ZodTypeDef,
  unknown
> = z.union([
  BlockMessageAction$inboundSchema,
  FlagToChannelAction$inboundSchema,
  QuarantineUserAction$inboundSchema,
  UserCommunicationDisabledAction$inboundSchema,
]);

/** @internal */
export type DefaultKeywordListUpsertRequestActions$Outbound =
  | BlockMessageAction$Outbound
  | FlagToChannelAction$Outbound
  | QuarantineUserAction$Outbound
  | UserCommunicationDisabledAction$Outbound;

/** @internal */
export const DefaultKeywordListUpsertRequestActions$outboundSchema: z.ZodType<
  DefaultKeywordListUpsertRequestActions$Outbound,
  z.ZodTypeDef,
  DefaultKeywordListUpsertRequestActions
> = z.union([
  BlockMessageAction$outboundSchema,
  FlagToChannelAction$outboundSchema,
  QuarantineUserAction$outboundSchema,
  UserCommunicationDisabledAction$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefaultKeywordListUpsertRequestActions$ {
  /** @deprecated use `DefaultKeywordListUpsertRequestActions$inboundSchema` instead. */
  export const inboundSchema =
    DefaultKeywordListUpsertRequestActions$inboundSchema;
  /** @deprecated use `DefaultKeywordListUpsertRequestActions$outboundSchema` instead. */
  export const outboundSchema =
    DefaultKeywordListUpsertRequestActions$outboundSchema;
  /** @deprecated use `DefaultKeywordListUpsertRequestActions$Outbound` instead. */
  export type Outbound = DefaultKeywordListUpsertRequestActions$Outbound;
}

export function defaultKeywordListUpsertRequestActionsToJSON(
  defaultKeywordListUpsertRequestActions:
    DefaultKeywordListUpsertRequestActions,
): string {
  return JSON.stringify(
    DefaultKeywordListUpsertRequestActions$outboundSchema.parse(
      defaultKeywordListUpsertRequestActions,
    ),
  );
}

export function defaultKeywordListUpsertRequestActionsFromJSON(
  jsonString: string,
): SafeParseResult<DefaultKeywordListUpsertRequestActions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DefaultKeywordListUpsertRequestActions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DefaultKeywordListUpsertRequestActions' from JSON`,
  );
}

/** @internal */
export const DefaultKeywordListUpsertRequest$inboundSchema: z.ZodType<
  DefaultKeywordListUpsertRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  event_type: z.literal(1).optional(),
  actions: z.nullable(
    z.array(
      z.union([
        BlockMessageAction$inboundSchema,
        FlagToChannelAction$inboundSchema,
        QuarantineUserAction$inboundSchema,
        UserCommunicationDisabledAction$inboundSchema,
      ]),
    ),
  ).optional(),
  enabled: z.nullable(z.boolean()).optional(),
  exempt_roles: z.nullable(z.array(z.string())).optional(),
  exempt_channels: z.nullable(z.array(z.string())).optional(),
  trigger_type: z.literal(1).optional(),
  trigger_metadata: DefaultKeywordListTriggerMetadata$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "event_type": "eventType",
    "exempt_roles": "exemptRoles",
    "exempt_channels": "exemptChannels",
    "trigger_type": "triggerType",
    "trigger_metadata": "triggerMetadata",
  });
});

/** @internal */
export type DefaultKeywordListUpsertRequest$Outbound = {
  name: string;
  event_type: 1;
  actions?:
    | Array<
      | BlockMessageAction$Outbound
      | FlagToChannelAction$Outbound
      | QuarantineUserAction$Outbound
      | UserCommunicationDisabledAction$Outbound
    >
    | null
    | undefined;
  enabled?: boolean | null | undefined;
  exempt_roles?: Array<string> | null | undefined;
  exempt_channels?: Array<string> | null | undefined;
  trigger_type: 1;
  trigger_metadata: DefaultKeywordListTriggerMetadata$Outbound;
};

/** @internal */
export const DefaultKeywordListUpsertRequest$outboundSchema: z.ZodType<
  DefaultKeywordListUpsertRequest$Outbound,
  z.ZodTypeDef,
  DefaultKeywordListUpsertRequest
> = z.object({
  name: z.string(),
  eventType: z.literal(1).default(1 as const),
  actions: z.nullable(
    z.array(
      z.union([
        BlockMessageAction$outboundSchema,
        FlagToChannelAction$outboundSchema,
        QuarantineUserAction$outboundSchema,
        UserCommunicationDisabledAction$outboundSchema,
      ]),
    ),
  ).optional(),
  enabled: z.nullable(z.boolean()).optional(),
  exemptRoles: z.nullable(z.array(z.string())).optional(),
  exemptChannels: z.nullable(z.array(z.string())).optional(),
  triggerType: z.literal(1).default(1 as const),
  triggerMetadata: DefaultKeywordListTriggerMetadata$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    eventType: "event_type",
    exemptRoles: "exempt_roles",
    exemptChannels: "exempt_channels",
    triggerType: "trigger_type",
    triggerMetadata: "trigger_metadata",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefaultKeywordListUpsertRequest$ {
  /** @deprecated use `DefaultKeywordListUpsertRequest$inboundSchema` instead. */
  export const inboundSchema = DefaultKeywordListUpsertRequest$inboundSchema;
  /** @deprecated use `DefaultKeywordListUpsertRequest$outboundSchema` instead. */
  export const outboundSchema = DefaultKeywordListUpsertRequest$outboundSchema;
  /** @deprecated use `DefaultKeywordListUpsertRequest$Outbound` instead. */
  export type Outbound = DefaultKeywordListUpsertRequest$Outbound;
}

export function defaultKeywordListUpsertRequestToJSON(
  defaultKeywordListUpsertRequest: DefaultKeywordListUpsertRequest,
): string {
  return JSON.stringify(
    DefaultKeywordListUpsertRequest$outboundSchema.parse(
      defaultKeywordListUpsertRequest,
    ),
  );
}

export function defaultKeywordListUpsertRequestFromJSON(
  jsonString: string,
): SafeParseResult<DefaultKeywordListUpsertRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DefaultKeywordListUpsertRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DefaultKeywordListUpsertRequest' from JSON`,
  );
}
