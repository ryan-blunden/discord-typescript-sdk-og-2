/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type CommandPermissionResponse = {
  id: string;
  type?: 1 | undefined;
  permission: boolean;
};

/** @internal */
export const CommandPermissionResponse$inboundSchema: z.ZodType<
  CommandPermissionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: z.literal(1).optional(),
  permission: z.boolean(),
});

/** @internal */
export type CommandPermissionResponse$Outbound = {
  id: string;
  type: 1;
  permission: boolean;
};

/** @internal */
export const CommandPermissionResponse$outboundSchema: z.ZodType<
  CommandPermissionResponse$Outbound,
  z.ZodTypeDef,
  CommandPermissionResponse
> = z.object({
  id: z.string(),
  type: z.literal(1).default(1 as const),
  permission: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommandPermissionResponse$ {
  /** @deprecated use `CommandPermissionResponse$inboundSchema` instead. */
  export const inboundSchema = CommandPermissionResponse$inboundSchema;
  /** @deprecated use `CommandPermissionResponse$outboundSchema` instead. */
  export const outboundSchema = CommandPermissionResponse$outboundSchema;
  /** @deprecated use `CommandPermissionResponse$Outbound` instead. */
  export type Outbound = CommandPermissionResponse$Outbound;
}
