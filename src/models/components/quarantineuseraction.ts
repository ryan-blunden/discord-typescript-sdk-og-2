/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  QuarantineUserActionMetadata,
  QuarantineUserActionMetadata$inboundSchema,
  QuarantineUserActionMetadata$Outbound,
  QuarantineUserActionMetadata$outboundSchema,
} from "./quarantineuseractionmetadata.js";

export type QuarantineUserAction = {
  type?: 1 | undefined;
  metadata?: QuarantineUserActionMetadata | null | undefined;
};

/** @internal */
export const QuarantineUserAction$inboundSchema: z.ZodType<
  QuarantineUserAction,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal(1).optional(),
  metadata: z.nullable(QuarantineUserActionMetadata$inboundSchema).optional(),
});

/** @internal */
export type QuarantineUserAction$Outbound = {
  type: 1;
  metadata?: QuarantineUserActionMetadata$Outbound | null | undefined;
};

/** @internal */
export const QuarantineUserAction$outboundSchema: z.ZodType<
  QuarantineUserAction$Outbound,
  z.ZodTypeDef,
  QuarantineUserAction
> = z.object({
  type: z.literal(1).default(1 as const),
  metadata: z.nullable(QuarantineUserActionMetadata$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QuarantineUserAction$ {
  /** @deprecated use `QuarantineUserAction$inboundSchema` instead. */
  export const inboundSchema = QuarantineUserAction$inboundSchema;
  /** @deprecated use `QuarantineUserAction$outboundSchema` instead. */
  export const outboundSchema = QuarantineUserAction$outboundSchema;
  /** @deprecated use `QuarantineUserAction$Outbound` instead. */
  export type Outbound = QuarantineUserAction$Outbound;
}

export function quarantineUserActionToJSON(
  quarantineUserAction: QuarantineUserAction,
): string {
  return JSON.stringify(
    QuarantineUserAction$outboundSchema.parse(quarantineUserAction),
  );
}

export function quarantineUserActionFromJSON(
  jsonString: string,
): SafeParseResult<QuarantineUserAction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QuarantineUserAction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QuarantineUserAction' from JSON`,
  );
}
