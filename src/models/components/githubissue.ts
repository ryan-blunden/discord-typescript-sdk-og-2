/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GithubUser,
  GithubUser$inboundSchema,
  GithubUser$Outbound,
  GithubUser$outboundSchema,
} from "./githubuser.js";

export type GithubIssue = {
  id: number;
  number: number;
  htmlUrl: string;
  user: GithubUser;
  title: string;
  body?: string | null | undefined;
  pullRequest?: any | undefined;
};

/** @internal */
export const GithubIssue$inboundSchema: z.ZodType<
  GithubIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  number: z.number().int(),
  html_url: z.string(),
  user: GithubUser$inboundSchema,
  title: z.string(),
  body: z.nullable(z.string()).optional(),
  pull_request: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "html_url": "htmlUrl",
    "pull_request": "pullRequest",
  });
});

/** @internal */
export type GithubIssue$Outbound = {
  id: number;
  number: number;
  html_url: string;
  user: GithubUser$Outbound;
  title: string;
  body?: string | null | undefined;
  pull_request?: any | undefined;
};

/** @internal */
export const GithubIssue$outboundSchema: z.ZodType<
  GithubIssue$Outbound,
  z.ZodTypeDef,
  GithubIssue
> = z.object({
  id: z.number().int(),
  number: z.number().int(),
  htmlUrl: z.string(),
  user: GithubUser$outboundSchema,
  title: z.string(),
  body: z.nullable(z.string()).optional(),
  pullRequest: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    htmlUrl: "html_url",
    pullRequest: "pull_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubIssue$ {
  /** @deprecated use `GithubIssue$inboundSchema` instead. */
  export const inboundSchema = GithubIssue$inboundSchema;
  /** @deprecated use `GithubIssue$outboundSchema` instead. */
  export const outboundSchema = GithubIssue$outboundSchema;
  /** @deprecated use `GithubIssue$Outbound` instead. */
  export type Outbound = GithubIssue$Outbound;
}

export function githubIssueToJSON(githubIssue: GithubIssue): string {
  return JSON.stringify(GithubIssue$outboundSchema.parse(githubIssue));
}

export function githubIssueFromJSON(
  jsonString: string,
): SafeParseResult<GithubIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GithubIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GithubIssue' from JSON`,
  );
}
