/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  VanityURLErrorResponse,
  VanityURLErrorResponse$inboundSchema,
  VanityURLErrorResponse$Outbound,
  VanityURLErrorResponse$outboundSchema,
} from "./vanityurlerrorresponse.js";

export type VanityURLResponse = {
  code?: string | null | undefined;
  uses: number;
  error?: VanityURLErrorResponse | null | undefined;
};

/** @internal */
export const VanityURLResponse$inboundSchema: z.ZodType<
  VanityURLResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.nullable(z.string()).optional(),
  uses: z.number().int(),
  error: z.nullable(VanityURLErrorResponse$inboundSchema).optional(),
});

/** @internal */
export type VanityURLResponse$Outbound = {
  code?: string | null | undefined;
  uses: number;
  error?: VanityURLErrorResponse$Outbound | null | undefined;
};

/** @internal */
export const VanityURLResponse$outboundSchema: z.ZodType<
  VanityURLResponse$Outbound,
  z.ZodTypeDef,
  VanityURLResponse
> = z.object({
  code: z.nullable(z.string()).optional(),
  uses: z.number().int(),
  error: z.nullable(VanityURLErrorResponse$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VanityURLResponse$ {
  /** @deprecated use `VanityURLResponse$inboundSchema` instead. */
  export const inboundSchema = VanityURLResponse$inboundSchema;
  /** @deprecated use `VanityURLResponse$outboundSchema` instead. */
  export const outboundSchema = VanityURLResponse$outboundSchema;
  /** @deprecated use `VanityURLResponse$Outbound` instead. */
  export type Outbound = VanityURLResponse$Outbound;
}

export function vanityURLResponseToJSON(
  vanityURLResponse: VanityURLResponse,
): string {
  return JSON.stringify(
    VanityURLResponse$outboundSchema.parse(vanityURLResponse),
  );
}

export function vanityURLResponseFromJSON(
  jsonString: string,
): SafeParseResult<VanityURLResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VanityURLResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VanityURLResponse' from JSON`,
  );
}
