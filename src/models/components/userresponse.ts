/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserAvatarDecorationResponse,
  UserAvatarDecorationResponse$inboundSchema,
  UserAvatarDecorationResponse$Outbound,
  UserAvatarDecorationResponse$outboundSchema,
} from "./useravatardecorationresponse.js";
import {
  UserPrimaryGuildResponse,
  UserPrimaryGuildResponse$inboundSchema,
  UserPrimaryGuildResponse$Outbound,
  UserPrimaryGuildResponse$outboundSchema,
} from "./userprimaryguildresponse.js";

export type UserResponse = {
  id: string;
  username: string;
  avatar?: string | null | undefined;
  discriminator: string;
  publicFlags: number;
  flags: number;
  bot?: boolean | null | undefined;
  system?: boolean | null | undefined;
  banner?: string | null | undefined;
  accentColor?: number | null | undefined;
  globalName?: string | null | undefined;
  avatarDecorationData?: UserAvatarDecorationResponse | null | undefined;
  clan?: UserPrimaryGuildResponse | null | undefined;
};

/** @internal */
export const UserResponse$inboundSchema: z.ZodType<
  UserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  username: z.string(),
  avatar: z.nullable(z.string()).optional(),
  discriminator: z.string(),
  public_flags: z.number().int(),
  flags: z.number().int(),
  bot: z.nullable(z.boolean()).optional(),
  system: z.nullable(z.boolean()).optional(),
  banner: z.nullable(z.string()).optional(),
  accent_color: z.nullable(z.number().int()).optional(),
  global_name: z.nullable(z.string()).optional(),
  avatar_decoration_data: z.nullable(UserAvatarDecorationResponse$inboundSchema)
    .optional(),
  clan: z.nullable(UserPrimaryGuildResponse$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "public_flags": "publicFlags",
    "accent_color": "accentColor",
    "global_name": "globalName",
    "avatar_decoration_data": "avatarDecorationData",
  });
});

/** @internal */
export type UserResponse$Outbound = {
  id: string;
  username: string;
  avatar?: string | null | undefined;
  discriminator: string;
  public_flags: number;
  flags: number;
  bot?: boolean | null | undefined;
  system?: boolean | null | undefined;
  banner?: string | null | undefined;
  accent_color?: number | null | undefined;
  global_name?: string | null | undefined;
  avatar_decoration_data?:
    | UserAvatarDecorationResponse$Outbound
    | null
    | undefined;
  clan?: UserPrimaryGuildResponse$Outbound | null | undefined;
};

/** @internal */
export const UserResponse$outboundSchema: z.ZodType<
  UserResponse$Outbound,
  z.ZodTypeDef,
  UserResponse
> = z.object({
  id: z.string(),
  username: z.string(),
  avatar: z.nullable(z.string()).optional(),
  discriminator: z.string(),
  publicFlags: z.number().int(),
  flags: z.number().int(),
  bot: z.nullable(z.boolean()).optional(),
  system: z.nullable(z.boolean()).optional(),
  banner: z.nullable(z.string()).optional(),
  accentColor: z.nullable(z.number().int()).optional(),
  globalName: z.nullable(z.string()).optional(),
  avatarDecorationData: z.nullable(UserAvatarDecorationResponse$outboundSchema)
    .optional(),
  clan: z.nullable(UserPrimaryGuildResponse$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    publicFlags: "public_flags",
    accentColor: "accent_color",
    globalName: "global_name",
    avatarDecorationData: "avatar_decoration_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserResponse$ {
  /** @deprecated use `UserResponse$inboundSchema` instead. */
  export const inboundSchema = UserResponse$inboundSchema;
  /** @deprecated use `UserResponse$outboundSchema` instead. */
  export const outboundSchema = UserResponse$outboundSchema;
  /** @deprecated use `UserResponse$Outbound` instead. */
  export type Outbound = UserResponse$Outbound;
}

export function userResponseToJSON(userResponse: UserResponse): string {
  return JSON.stringify(UserResponse$outboundSchema.parse(userResponse));
}

export function userResponseFromJSON(
  jsonString: string,
): SafeParseResult<UserResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserResponse' from JSON`,
  );
}
