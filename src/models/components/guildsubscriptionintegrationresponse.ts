/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountResponse,
  AccountResponse$inboundSchema,
  AccountResponse$Outbound,
  AccountResponse$outboundSchema,
} from "./accountresponse.js";

export type GuildSubscriptionIntegrationResponse = {
  type?: "discord" | undefined;
  name?: string | null | undefined;
  account?: AccountResponse | null | undefined;
  enabled?: boolean | null | undefined;
  id: string;
};

/** @internal */
export const GuildSubscriptionIntegrationResponse$inboundSchema: z.ZodType<
  GuildSubscriptionIntegrationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("discord").optional(),
  name: z.nullable(z.string()).optional(),
  account: z.nullable(AccountResponse$inboundSchema).optional(),
  enabled: z.nullable(z.boolean()).optional(),
  id: z.string(),
});

/** @internal */
export type GuildSubscriptionIntegrationResponse$Outbound = {
  type: "discord";
  name?: string | null | undefined;
  account?: AccountResponse$Outbound | null | undefined;
  enabled?: boolean | null | undefined;
  id: string;
};

/** @internal */
export const GuildSubscriptionIntegrationResponse$outboundSchema: z.ZodType<
  GuildSubscriptionIntegrationResponse$Outbound,
  z.ZodTypeDef,
  GuildSubscriptionIntegrationResponse
> = z.object({
  type: z.literal("discord").default("discord" as const),
  name: z.nullable(z.string()).optional(),
  account: z.nullable(AccountResponse$outboundSchema).optional(),
  enabled: z.nullable(z.boolean()).optional(),
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GuildSubscriptionIntegrationResponse$ {
  /** @deprecated use `GuildSubscriptionIntegrationResponse$inboundSchema` instead. */
  export const inboundSchema =
    GuildSubscriptionIntegrationResponse$inboundSchema;
  /** @deprecated use `GuildSubscriptionIntegrationResponse$outboundSchema` instead. */
  export const outboundSchema =
    GuildSubscriptionIntegrationResponse$outboundSchema;
  /** @deprecated use `GuildSubscriptionIntegrationResponse$Outbound` instead. */
  export type Outbound = GuildSubscriptionIntegrationResponse$Outbound;
}

export function guildSubscriptionIntegrationResponseToJSON(
  guildSubscriptionIntegrationResponse: GuildSubscriptionIntegrationResponse,
): string {
  return JSON.stringify(
    GuildSubscriptionIntegrationResponse$outboundSchema.parse(
      guildSubscriptionIntegrationResponse,
    ),
  );
}

export function guildSubscriptionIntegrationResponseFromJSON(
  jsonString: string,
): SafeParseResult<GuildSubscriptionIntegrationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GuildSubscriptionIntegrationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GuildSubscriptionIntegrationResponse' from JSON`,
  );
}
