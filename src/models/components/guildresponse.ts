/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EmojiResponse,
  EmojiResponse$inboundSchema,
  EmojiResponse$Outbound,
  EmojiResponse$outboundSchema,
} from "./emojiresponse.js";
import {
  GuildRoleResponse,
  GuildRoleResponse$inboundSchema,
  GuildRoleResponse$Outbound,
  GuildRoleResponse$outboundSchema,
} from "./guildroleresponse.js";
import {
  GuildStickerResponse,
  GuildStickerResponse$inboundSchema,
  GuildStickerResponse$Outbound,
  GuildStickerResponse$outboundSchema,
} from "./guildstickerresponse.js";

export type GuildResponse = {
  id: string;
  name: string;
  icon?: string | null | undefined;
  description?: string | null | undefined;
  homeHeader?: string | null | undefined;
  splash?: string | null | undefined;
  discoverySplash?: string | null | undefined;
  features: Array<string>;
  banner?: string | null | undefined;
  ownerId: string;
  applicationId?: string | null | undefined;
  region: string;
  afkChannelId?: string | null | undefined;
  afkTimeout?: 60 | undefined;
  systemChannelId?: string | null | undefined;
  systemChannelFlags: number;
  widgetEnabled: boolean;
  widgetChannelId?: string | null | undefined;
  verificationLevel?: 0 | undefined;
  roles: Array<GuildRoleResponse>;
  defaultMessageNotifications?: 0 | undefined;
  mfaLevel?: 0 | undefined;
  explicitContentFilter?: 0 | undefined;
  maxPresences?: number | null | undefined;
  maxMembers?: number | null | undefined;
  maxStageVideoChannelUsers?: number | null | undefined;
  maxVideoChannelUsers?: number | null | undefined;
  vanityUrlCode?: string | null | undefined;
  premiumTier?: 0 | undefined;
  premiumSubscriptionCount: number;
  preferredLocale?: "ar" | undefined;
  rulesChannelId?: string | null | undefined;
  safetyAlertsChannelId?: string | null | undefined;
  publicUpdatesChannelId?: string | null | undefined;
  premiumProgressBarEnabled: boolean;
  nsfw: boolean;
  nsfwLevel?: 0 | undefined;
  emojis: Array<EmojiResponse>;
  stickers: Array<GuildStickerResponse>;
};

/** @internal */
export const GuildResponse$inboundSchema: z.ZodType<
  GuildResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  icon: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  home_header: z.nullable(z.string()).optional(),
  splash: z.nullable(z.string()).optional(),
  discovery_splash: z.nullable(z.string()).optional(),
  features: z.array(z.string()),
  banner: z.nullable(z.string()).optional(),
  owner_id: z.string(),
  application_id: z.nullable(z.string()).optional(),
  region: z.string(),
  afk_channel_id: z.nullable(z.string()).optional(),
  afk_timeout: z.literal(60).optional(),
  system_channel_id: z.nullable(z.string()).optional(),
  system_channel_flags: z.number().int(),
  widget_enabled: z.boolean(),
  widget_channel_id: z.nullable(z.string()).optional(),
  verification_level: z.literal(0).optional(),
  roles: z.array(GuildRoleResponse$inboundSchema),
  default_message_notifications: z.literal(0).optional(),
  mfa_level: z.literal(0).optional(),
  explicit_content_filter: z.literal(0).optional(),
  max_presences: z.nullable(z.number().int()).optional(),
  max_members: z.nullable(z.number().int()).optional(),
  max_stage_video_channel_users: z.nullable(z.number().int()).optional(),
  max_video_channel_users: z.nullable(z.number().int()).optional(),
  vanity_url_code: z.nullable(z.string()).optional(),
  premium_tier: z.literal(0).optional(),
  premium_subscription_count: z.number().int(),
  preferred_locale: z.literal("ar").optional(),
  rules_channel_id: z.nullable(z.string()).optional(),
  safety_alerts_channel_id: z.nullable(z.string()).optional(),
  public_updates_channel_id: z.nullable(z.string()).optional(),
  premium_progress_bar_enabled: z.boolean(),
  nsfw: z.boolean(),
  nsfw_level: z.literal(0).optional(),
  emojis: z.array(EmojiResponse$inboundSchema),
  stickers: z.array(GuildStickerResponse$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "home_header": "homeHeader",
    "discovery_splash": "discoverySplash",
    "owner_id": "ownerId",
    "application_id": "applicationId",
    "afk_channel_id": "afkChannelId",
    "afk_timeout": "afkTimeout",
    "system_channel_id": "systemChannelId",
    "system_channel_flags": "systemChannelFlags",
    "widget_enabled": "widgetEnabled",
    "widget_channel_id": "widgetChannelId",
    "verification_level": "verificationLevel",
    "default_message_notifications": "defaultMessageNotifications",
    "mfa_level": "mfaLevel",
    "explicit_content_filter": "explicitContentFilter",
    "max_presences": "maxPresences",
    "max_members": "maxMembers",
    "max_stage_video_channel_users": "maxStageVideoChannelUsers",
    "max_video_channel_users": "maxVideoChannelUsers",
    "vanity_url_code": "vanityUrlCode",
    "premium_tier": "premiumTier",
    "premium_subscription_count": "premiumSubscriptionCount",
    "preferred_locale": "preferredLocale",
    "rules_channel_id": "rulesChannelId",
    "safety_alerts_channel_id": "safetyAlertsChannelId",
    "public_updates_channel_id": "publicUpdatesChannelId",
    "premium_progress_bar_enabled": "premiumProgressBarEnabled",
    "nsfw_level": "nsfwLevel",
  });
});

/** @internal */
export type GuildResponse$Outbound = {
  id: string;
  name: string;
  icon?: string | null | undefined;
  description?: string | null | undefined;
  home_header?: string | null | undefined;
  splash?: string | null | undefined;
  discovery_splash?: string | null | undefined;
  features: Array<string>;
  banner?: string | null | undefined;
  owner_id: string;
  application_id?: string | null | undefined;
  region: string;
  afk_channel_id?: string | null | undefined;
  afk_timeout: 60;
  system_channel_id?: string | null | undefined;
  system_channel_flags: number;
  widget_enabled: boolean;
  widget_channel_id?: string | null | undefined;
  verification_level: 0;
  roles: Array<GuildRoleResponse$Outbound>;
  default_message_notifications: 0;
  mfa_level: 0;
  explicit_content_filter: 0;
  max_presences?: number | null | undefined;
  max_members?: number | null | undefined;
  max_stage_video_channel_users?: number | null | undefined;
  max_video_channel_users?: number | null | undefined;
  vanity_url_code?: string | null | undefined;
  premium_tier: 0;
  premium_subscription_count: number;
  preferred_locale: "ar";
  rules_channel_id?: string | null | undefined;
  safety_alerts_channel_id?: string | null | undefined;
  public_updates_channel_id?: string | null | undefined;
  premium_progress_bar_enabled: boolean;
  nsfw: boolean;
  nsfw_level: 0;
  emojis: Array<EmojiResponse$Outbound>;
  stickers: Array<GuildStickerResponse$Outbound>;
};

/** @internal */
export const GuildResponse$outboundSchema: z.ZodType<
  GuildResponse$Outbound,
  z.ZodTypeDef,
  GuildResponse
> = z.object({
  id: z.string(),
  name: z.string(),
  icon: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  homeHeader: z.nullable(z.string()).optional(),
  splash: z.nullable(z.string()).optional(),
  discoverySplash: z.nullable(z.string()).optional(),
  features: z.array(z.string()),
  banner: z.nullable(z.string()).optional(),
  ownerId: z.string(),
  applicationId: z.nullable(z.string()).optional(),
  region: z.string(),
  afkChannelId: z.nullable(z.string()).optional(),
  afkTimeout: z.literal(60).default(60 as const),
  systemChannelId: z.nullable(z.string()).optional(),
  systemChannelFlags: z.number().int(),
  widgetEnabled: z.boolean(),
  widgetChannelId: z.nullable(z.string()).optional(),
  verificationLevel: z.literal(0).default(0 as const),
  roles: z.array(GuildRoleResponse$outboundSchema),
  defaultMessageNotifications: z.literal(0).default(0 as const),
  mfaLevel: z.literal(0).default(0 as const),
  explicitContentFilter: z.literal(0).default(0 as const),
  maxPresences: z.nullable(z.number().int()).optional(),
  maxMembers: z.nullable(z.number().int()).optional(),
  maxStageVideoChannelUsers: z.nullable(z.number().int()).optional(),
  maxVideoChannelUsers: z.nullable(z.number().int()).optional(),
  vanityUrlCode: z.nullable(z.string()).optional(),
  premiumTier: z.literal(0).default(0 as const),
  premiumSubscriptionCount: z.number().int(),
  preferredLocale: z.literal("ar").default("ar" as const),
  rulesChannelId: z.nullable(z.string()).optional(),
  safetyAlertsChannelId: z.nullable(z.string()).optional(),
  publicUpdatesChannelId: z.nullable(z.string()).optional(),
  premiumProgressBarEnabled: z.boolean(),
  nsfw: z.boolean(),
  nsfwLevel: z.literal(0).default(0 as const),
  emojis: z.array(EmojiResponse$outboundSchema),
  stickers: z.array(GuildStickerResponse$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    homeHeader: "home_header",
    discoverySplash: "discovery_splash",
    ownerId: "owner_id",
    applicationId: "application_id",
    afkChannelId: "afk_channel_id",
    afkTimeout: "afk_timeout",
    systemChannelId: "system_channel_id",
    systemChannelFlags: "system_channel_flags",
    widgetEnabled: "widget_enabled",
    widgetChannelId: "widget_channel_id",
    verificationLevel: "verification_level",
    defaultMessageNotifications: "default_message_notifications",
    mfaLevel: "mfa_level",
    explicitContentFilter: "explicit_content_filter",
    maxPresences: "max_presences",
    maxMembers: "max_members",
    maxStageVideoChannelUsers: "max_stage_video_channel_users",
    maxVideoChannelUsers: "max_video_channel_users",
    vanityUrlCode: "vanity_url_code",
    premiumTier: "premium_tier",
    premiumSubscriptionCount: "premium_subscription_count",
    preferredLocale: "preferred_locale",
    rulesChannelId: "rules_channel_id",
    safetyAlertsChannelId: "safety_alerts_channel_id",
    publicUpdatesChannelId: "public_updates_channel_id",
    premiumProgressBarEnabled: "premium_progress_bar_enabled",
    nsfwLevel: "nsfw_level",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GuildResponse$ {
  /** @deprecated use `GuildResponse$inboundSchema` instead. */
  export const inboundSchema = GuildResponse$inboundSchema;
  /** @deprecated use `GuildResponse$outboundSchema` instead. */
  export const outboundSchema = GuildResponse$outboundSchema;
  /** @deprecated use `GuildResponse$Outbound` instead. */
  export type Outbound = GuildResponse$Outbound;
}

export function guildResponseToJSON(guildResponse: GuildResponse): string {
  return JSON.stringify(GuildResponse$outboundSchema.parse(guildResponse));
}

export function guildResponseFromJSON(
  jsonString: string,
): SafeParseResult<GuildResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GuildResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GuildResponse' from JSON`,
  );
}
