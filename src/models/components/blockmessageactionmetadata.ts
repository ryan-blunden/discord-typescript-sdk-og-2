/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BlockMessageActionMetadata = {
  customMessage?: string | null | undefined;
};

/** @internal */
export const BlockMessageActionMetadata$inboundSchema: z.ZodType<
  BlockMessageActionMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  custom_message: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_message": "customMessage",
  });
});

/** @internal */
export type BlockMessageActionMetadata$Outbound = {
  custom_message?: string | null | undefined;
};

/** @internal */
export const BlockMessageActionMetadata$outboundSchema: z.ZodType<
  BlockMessageActionMetadata$Outbound,
  z.ZodTypeDef,
  BlockMessageActionMetadata
> = z.object({
  customMessage: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    customMessage: "custom_message",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BlockMessageActionMetadata$ {
  /** @deprecated use `BlockMessageActionMetadata$inboundSchema` instead. */
  export const inboundSchema = BlockMessageActionMetadata$inboundSchema;
  /** @deprecated use `BlockMessageActionMetadata$outboundSchema` instead. */
  export const outboundSchema = BlockMessageActionMetadata$outboundSchema;
  /** @deprecated use `BlockMessageActionMetadata$Outbound` instead. */
  export type Outbound = BlockMessageActionMetadata$Outbound;
}

export function blockMessageActionMetadataToJSON(
  blockMessageActionMetadata: BlockMessageActionMetadata,
): string {
  return JSON.stringify(
    BlockMessageActionMetadata$outboundSchema.parse(blockMessageActionMetadata),
  );
}

export function blockMessageActionMetadataFromJSON(
  jsonString: string,
): SafeParseResult<BlockMessageActionMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BlockMessageActionMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BlockMessageActionMetadata' from JSON`,
  );
}
