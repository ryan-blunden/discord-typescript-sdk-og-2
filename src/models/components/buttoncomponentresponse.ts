/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ComponentEmojiResponse,
  ComponentEmojiResponse$inboundSchema,
  ComponentEmojiResponse$Outbound,
  ComponentEmojiResponse$outboundSchema,
} from "./componentemojiresponse.js";

export type ButtonComponentResponse = {
  type?: 1 | undefined;
  id: number;
  customId?: string | null | undefined;
  style?: 1 | undefined;
  label?: string | null | undefined;
  disabled?: boolean | null | undefined;
  emoji?: ComponentEmojiResponse | null | undefined;
  url?: string | null | undefined;
  skuId?: string | null | undefined;
};

/** @internal */
export const ButtonComponentResponse$inboundSchema: z.ZodType<
  ButtonComponentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal(1).optional(),
  id: z.number().int(),
  custom_id: z.nullable(z.string()).optional(),
  style: z.literal(1).optional(),
  label: z.nullable(z.string()).optional(),
  disabled: z.nullable(z.boolean()).optional(),
  emoji: z.nullable(ComponentEmojiResponse$inboundSchema).optional(),
  url: z.nullable(z.string()).optional(),
  sku_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_id": "customId",
    "sku_id": "skuId",
  });
});

/** @internal */
export type ButtonComponentResponse$Outbound = {
  type: 1;
  id: number;
  custom_id?: string | null | undefined;
  style: 1;
  label?: string | null | undefined;
  disabled?: boolean | null | undefined;
  emoji?: ComponentEmojiResponse$Outbound | null | undefined;
  url?: string | null | undefined;
  sku_id?: string | null | undefined;
};

/** @internal */
export const ButtonComponentResponse$outboundSchema: z.ZodType<
  ButtonComponentResponse$Outbound,
  z.ZodTypeDef,
  ButtonComponentResponse
> = z.object({
  type: z.literal(1).default(1 as const),
  id: z.number().int(),
  customId: z.nullable(z.string()).optional(),
  style: z.literal(1).default(1 as const),
  label: z.nullable(z.string()).optional(),
  disabled: z.nullable(z.boolean()).optional(),
  emoji: z.nullable(ComponentEmojiResponse$outboundSchema).optional(),
  url: z.nullable(z.string()).optional(),
  skuId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    customId: "custom_id",
    skuId: "sku_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ButtonComponentResponse$ {
  /** @deprecated use `ButtonComponentResponse$inboundSchema` instead. */
  export const inboundSchema = ButtonComponentResponse$inboundSchema;
  /** @deprecated use `ButtonComponentResponse$outboundSchema` instead. */
  export const outboundSchema = ButtonComponentResponse$outboundSchema;
  /** @deprecated use `ButtonComponentResponse$Outbound` instead. */
  export type Outbound = ButtonComponentResponse$Outbound;
}

export function buttonComponentResponseToJSON(
  buttonComponentResponse: ButtonComponentResponse,
): string {
  return JSON.stringify(
    ButtonComponentResponse$outboundSchema.parse(buttonComponentResponse),
  );
}

export function buttonComponentResponseFromJSON(
  jsonString: string,
): SafeParseResult<ButtonComponentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ButtonComponentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ButtonComponentResponse' from JSON`,
  );
}
