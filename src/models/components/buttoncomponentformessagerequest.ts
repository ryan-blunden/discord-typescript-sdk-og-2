/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ComponentEmojiForMessageRequest,
  ComponentEmojiForMessageRequest$inboundSchema,
  ComponentEmojiForMessageRequest$Outbound,
  ComponentEmojiForMessageRequest$outboundSchema,
} from "./componentemojiformessagerequest.js";

export type ButtonComponentForMessageRequest = {
  type?: 1 | undefined;
  customId?: string | null | undefined;
  style?: 1 | undefined;
  label?: string | null | undefined;
  disabled?: boolean | null | undefined;
  url?: string | null | undefined;
  skuId?: string | null | undefined;
  emoji?: ComponentEmojiForMessageRequest | null | undefined;
};

/** @internal */
export const ButtonComponentForMessageRequest$inboundSchema: z.ZodType<
  ButtonComponentForMessageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal(1).optional(),
  custom_id: z.nullable(z.string()).optional(),
  style: z.literal(1).optional(),
  label: z.nullable(z.string()).optional(),
  disabled: z.nullable(z.boolean()).optional(),
  url: z.nullable(z.string()).optional(),
  sku_id: z.nullable(z.string()).optional(),
  emoji: z.nullable(ComponentEmojiForMessageRequest$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_id": "customId",
    "sku_id": "skuId",
  });
});

/** @internal */
export type ButtonComponentForMessageRequest$Outbound = {
  type: 1;
  custom_id?: string | null | undefined;
  style: 1;
  label?: string | null | undefined;
  disabled?: boolean | null | undefined;
  url?: string | null | undefined;
  sku_id?: string | null | undefined;
  emoji?: ComponentEmojiForMessageRequest$Outbound | null | undefined;
};

/** @internal */
export const ButtonComponentForMessageRequest$outboundSchema: z.ZodType<
  ButtonComponentForMessageRequest$Outbound,
  z.ZodTypeDef,
  ButtonComponentForMessageRequest
> = z.object({
  type: z.literal(1).default(1 as const),
  customId: z.nullable(z.string()).optional(),
  style: z.literal(1).default(1 as const),
  label: z.nullable(z.string()).optional(),
  disabled: z.nullable(z.boolean()).optional(),
  url: z.nullable(z.string()).optional(),
  skuId: z.nullable(z.string()).optional(),
  emoji: z.nullable(ComponentEmojiForMessageRequest$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    customId: "custom_id",
    skuId: "sku_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ButtonComponentForMessageRequest$ {
  /** @deprecated use `ButtonComponentForMessageRequest$inboundSchema` instead. */
  export const inboundSchema = ButtonComponentForMessageRequest$inboundSchema;
  /** @deprecated use `ButtonComponentForMessageRequest$outboundSchema` instead. */
  export const outboundSchema = ButtonComponentForMessageRequest$outboundSchema;
  /** @deprecated use `ButtonComponentForMessageRequest$Outbound` instead. */
  export type Outbound = ButtonComponentForMessageRequest$Outbound;
}

export function buttonComponentForMessageRequestToJSON(
  buttonComponentForMessageRequest: ButtonComponentForMessageRequest,
): string {
  return JSON.stringify(
    ButtonComponentForMessageRequest$outboundSchema.parse(
      buttonComponentForMessageRequest,
    ),
  );
}

export function buttonComponentForMessageRequestFromJSON(
  jsonString: string,
): SafeParseResult<ButtonComponentForMessageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ButtonComponentForMessageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ButtonComponentForMessageRequest' from JSON`,
  );
}
