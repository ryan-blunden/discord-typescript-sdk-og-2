/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  TeamMemberResponse,
  TeamMemberResponse$inboundSchema,
  TeamMemberResponse$Outbound,
  TeamMemberResponse$outboundSchema,
} from "./teammemberresponse.js";

export type TeamResponse = {
  id: string;
  icon?: string | null | undefined;
  name: string;
  ownerUserId: string;
  members: Array<TeamMemberResponse>;
};

/** @internal */
export const TeamResponse$inboundSchema: z.ZodType<
  TeamResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  icon: z.nullable(z.string()).optional(),
  name: z.string(),
  owner_user_id: z.string(),
  members: z.array(TeamMemberResponse$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "owner_user_id": "ownerUserId",
  });
});

/** @internal */
export type TeamResponse$Outbound = {
  id: string;
  icon?: string | null | undefined;
  name: string;
  owner_user_id: string;
  members: Array<TeamMemberResponse$Outbound>;
};

/** @internal */
export const TeamResponse$outboundSchema: z.ZodType<
  TeamResponse$Outbound,
  z.ZodTypeDef,
  TeamResponse
> = z.object({
  id: z.string(),
  icon: z.nullable(z.string()).optional(),
  name: z.string(),
  ownerUserId: z.string(),
  members: z.array(TeamMemberResponse$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    ownerUserId: "owner_user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TeamResponse$ {
  /** @deprecated use `TeamResponse$inboundSchema` instead. */
  export const inboundSchema = TeamResponse$inboundSchema;
  /** @deprecated use `TeamResponse$outboundSchema` instead. */
  export const outboundSchema = TeamResponse$outboundSchema;
  /** @deprecated use `TeamResponse$Outbound` instead. */
  export type Outbound = TeamResponse$Outbound;
}
