/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConnectedAccountIntegrationResponse,
  ConnectedAccountIntegrationResponse$inboundSchema,
  ConnectedAccountIntegrationResponse$Outbound,
  ConnectedAccountIntegrationResponse$outboundSchema,
} from "./connectedaccountintegrationresponse.js";

export type ConnectedAccountResponse = {
  id: string;
  name?: string | null | undefined;
  type?: "battlenet" | undefined;
  friendSync: boolean;
  integrations?: Array<ConnectedAccountIntegrationResponse> | null | undefined;
  showActivity: boolean;
  twoWayLink: boolean;
  verified: boolean;
  visibility?: 0 | undefined;
  revoked?: boolean | null | undefined;
};

/** @internal */
export const ConnectedAccountResponse$inboundSchema: z.ZodType<
  ConnectedAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()).optional(),
  type: z.literal("battlenet").optional(),
  friend_sync: z.boolean(),
  integrations: z.nullable(
    z.array(ConnectedAccountIntegrationResponse$inboundSchema),
  ).optional(),
  show_activity: z.boolean(),
  two_way_link: z.boolean(),
  verified: z.boolean(),
  visibility: z.literal(0).optional(),
  revoked: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "friend_sync": "friendSync",
    "show_activity": "showActivity",
    "two_way_link": "twoWayLink",
  });
});

/** @internal */
export type ConnectedAccountResponse$Outbound = {
  id: string;
  name?: string | null | undefined;
  type: "battlenet";
  friend_sync: boolean;
  integrations?:
    | Array<ConnectedAccountIntegrationResponse$Outbound>
    | null
    | undefined;
  show_activity: boolean;
  two_way_link: boolean;
  verified: boolean;
  visibility: 0;
  revoked?: boolean | null | undefined;
};

/** @internal */
export const ConnectedAccountResponse$outboundSchema: z.ZodType<
  ConnectedAccountResponse$Outbound,
  z.ZodTypeDef,
  ConnectedAccountResponse
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()).optional(),
  type: z.literal("battlenet").default("battlenet" as const),
  friendSync: z.boolean(),
  integrations: z.nullable(
    z.array(ConnectedAccountIntegrationResponse$outboundSchema),
  ).optional(),
  showActivity: z.boolean(),
  twoWayLink: z.boolean(),
  verified: z.boolean(),
  visibility: z.literal(0).default(0 as const),
  revoked: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    friendSync: "friend_sync",
    showActivity: "show_activity",
    twoWayLink: "two_way_link",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectedAccountResponse$ {
  /** @deprecated use `ConnectedAccountResponse$inboundSchema` instead. */
  export const inboundSchema = ConnectedAccountResponse$inboundSchema;
  /** @deprecated use `ConnectedAccountResponse$outboundSchema` instead. */
  export const outboundSchema = ConnectedAccountResponse$outboundSchema;
  /** @deprecated use `ConnectedAccountResponse$Outbound` instead. */
  export type Outbound = ConnectedAccountResponse$Outbound;
}

export function connectedAccountResponseToJSON(
  connectedAccountResponse: ConnectedAccountResponse,
): string {
  return JSON.stringify(
    ConnectedAccountResponse$outboundSchema.parse(connectedAccountResponse),
  );
}

export function connectedAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<ConnectedAccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectedAccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectedAccountResponse' from JSON`,
  );
}
