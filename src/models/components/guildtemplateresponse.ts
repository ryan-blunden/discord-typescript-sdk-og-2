/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  GuildTemplateSnapshotResponse,
  GuildTemplateSnapshotResponse$inboundSchema,
  GuildTemplateSnapshotResponse$Outbound,
  GuildTemplateSnapshotResponse$outboundSchema,
} from "./guildtemplatesnapshotresponse.js";
import {
  UserResponse,
  UserResponse$inboundSchema,
  UserResponse$Outbound,
  UserResponse$outboundSchema,
} from "./userresponse.js";

export type GuildTemplateResponse = {
  code: string;
  name: string;
  description?: string | null | undefined;
  usageCount: number;
  creatorId: string;
  creator?: UserResponse | null | undefined;
  createdAt: Date;
  updatedAt: Date;
  sourceGuildId: string;
  serializedSourceGuild: GuildTemplateSnapshotResponse;
  isDirty?: boolean | null | undefined;
};

/** @internal */
export const GuildTemplateResponse$inboundSchema: z.ZodType<
  GuildTemplateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  usage_count: z.number().int(),
  creator_id: z.string(),
  creator: z.nullable(UserResponse$inboundSchema).optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  source_guild_id: z.string(),
  serialized_source_guild: GuildTemplateSnapshotResponse$inboundSchema,
  is_dirty: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "usage_count": "usageCount",
    "creator_id": "creatorId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "source_guild_id": "sourceGuildId",
    "serialized_source_guild": "serializedSourceGuild",
    "is_dirty": "isDirty",
  });
});

/** @internal */
export type GuildTemplateResponse$Outbound = {
  code: string;
  name: string;
  description?: string | null | undefined;
  usage_count: number;
  creator_id: string;
  creator?: UserResponse$Outbound | null | undefined;
  created_at: string;
  updated_at: string;
  source_guild_id: string;
  serialized_source_guild: GuildTemplateSnapshotResponse$Outbound;
  is_dirty?: boolean | null | undefined;
};

/** @internal */
export const GuildTemplateResponse$outboundSchema: z.ZodType<
  GuildTemplateResponse$Outbound,
  z.ZodTypeDef,
  GuildTemplateResponse
> = z.object({
  code: z.string(),
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  usageCount: z.number().int(),
  creatorId: z.string(),
  creator: z.nullable(UserResponse$outboundSchema).optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  sourceGuildId: z.string(),
  serializedSourceGuild: GuildTemplateSnapshotResponse$outboundSchema,
  isDirty: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    usageCount: "usage_count",
    creatorId: "creator_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
    sourceGuildId: "source_guild_id",
    serializedSourceGuild: "serialized_source_guild",
    isDirty: "is_dirty",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GuildTemplateResponse$ {
  /** @deprecated use `GuildTemplateResponse$inboundSchema` instead. */
  export const inboundSchema = GuildTemplateResponse$inboundSchema;
  /** @deprecated use `GuildTemplateResponse$outboundSchema` instead. */
  export const outboundSchema = GuildTemplateResponse$outboundSchema;
  /** @deprecated use `GuildTemplateResponse$Outbound` instead. */
  export type Outbound = GuildTemplateResponse$Outbound;
}
