/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StageInstanceResponse = {
  guildId: string;
  channelId: string;
  topic: string;
  privacyLevel?: 1 | undefined;
  id: string;
  discoverableDisabled?: boolean | null | undefined;
  guildScheduledEventId?: string | null | undefined;
};

/** @internal */
export const StageInstanceResponse$inboundSchema: z.ZodType<
  StageInstanceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  guild_id: z.string(),
  channel_id: z.string(),
  topic: z.string(),
  privacy_level: z.literal(1).optional(),
  id: z.string(),
  discoverable_disabled: z.nullable(z.boolean()).optional(),
  guild_scheduled_event_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "guild_id": "guildId",
    "channel_id": "channelId",
    "privacy_level": "privacyLevel",
    "discoverable_disabled": "discoverableDisabled",
    "guild_scheduled_event_id": "guildScheduledEventId",
  });
});

/** @internal */
export type StageInstanceResponse$Outbound = {
  guild_id: string;
  channel_id: string;
  topic: string;
  privacy_level: 1;
  id: string;
  discoverable_disabled?: boolean | null | undefined;
  guild_scheduled_event_id?: string | null | undefined;
};

/** @internal */
export const StageInstanceResponse$outboundSchema: z.ZodType<
  StageInstanceResponse$Outbound,
  z.ZodTypeDef,
  StageInstanceResponse
> = z.object({
  guildId: z.string(),
  channelId: z.string(),
  topic: z.string(),
  privacyLevel: z.literal(1).default(1 as const),
  id: z.string(),
  discoverableDisabled: z.nullable(z.boolean()).optional(),
  guildScheduledEventId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    guildId: "guild_id",
    channelId: "channel_id",
    privacyLevel: "privacy_level",
    discoverableDisabled: "discoverable_disabled",
    guildScheduledEventId: "guild_scheduled_event_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StageInstanceResponse$ {
  /** @deprecated use `StageInstanceResponse$inboundSchema` instead. */
  export const inboundSchema = StageInstanceResponse$inboundSchema;
  /** @deprecated use `StageInstanceResponse$outboundSchema` instead. */
  export const outboundSchema = StageInstanceResponse$outboundSchema;
  /** @deprecated use `StageInstanceResponse$Outbound` instead. */
  export type Outbound = StageInstanceResponse$Outbound;
}

export function stageInstanceResponseToJSON(
  stageInstanceResponse: StageInstanceResponse,
): string {
  return JSON.stringify(
    StageInstanceResponse$outboundSchema.parse(stageInstanceResponse),
  );
}

export function stageInstanceResponseFromJSON(
  jsonString: string,
): SafeParseResult<StageInstanceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StageInstanceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StageInstanceResponse' from JSON`,
  );
}
