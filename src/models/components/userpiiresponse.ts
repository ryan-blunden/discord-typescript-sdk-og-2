/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  UserAvatarDecorationResponse,
  UserAvatarDecorationResponse$inboundSchema,
  UserAvatarDecorationResponse$Outbound,
  UserAvatarDecorationResponse$outboundSchema,
} from "./useravatardecorationresponse.js";

export type UserPIIResponse = {
  id: string;
  username: string;
  avatar?: string | null | undefined;
  discriminator: string;
  publicFlags: number;
  flags: number;
  bot?: boolean | null | undefined;
  system?: boolean | null | undefined;
  banner?: string | null | undefined;
  accentColor?: number | null | undefined;
  globalName?: string | null | undefined;
  avatarDecorationData?: UserAvatarDecorationResponse | null | undefined;
  mfaEnabled: boolean;
  locale?: "ar" | undefined;
  premiumType?: 0 | null | undefined;
  email?: string | null | undefined;
  verified?: boolean | null | undefined;
};

/** @internal */
export const UserPIIResponse$inboundSchema: z.ZodType<
  UserPIIResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  username: z.string(),
  avatar: z.nullable(z.string()).optional(),
  discriminator: z.string(),
  public_flags: z.number().int(),
  flags: z.number().int(),
  bot: z.nullable(z.boolean()).optional(),
  system: z.nullable(z.boolean()).optional(),
  banner: z.nullable(z.string()).optional(),
  accent_color: z.nullable(z.number().int()).optional(),
  global_name: z.nullable(z.string()).optional(),
  avatar_decoration_data: z.nullable(UserAvatarDecorationResponse$inboundSchema)
    .optional(),
  mfa_enabled: z.boolean(),
  locale: z.literal("ar").optional(),
  premium_type: z.nullable(z.literal(0)).optional(),
  email: z.nullable(z.string()).optional(),
  verified: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "public_flags": "publicFlags",
    "accent_color": "accentColor",
    "global_name": "globalName",
    "avatar_decoration_data": "avatarDecorationData",
    "mfa_enabled": "mfaEnabled",
    "premium_type": "premiumType",
  });
});

/** @internal */
export type UserPIIResponse$Outbound = {
  id: string;
  username: string;
  avatar?: string | null | undefined;
  discriminator: string;
  public_flags: number;
  flags: number;
  bot?: boolean | null | undefined;
  system?: boolean | null | undefined;
  banner?: string | null | undefined;
  accent_color?: number | null | undefined;
  global_name?: string | null | undefined;
  avatar_decoration_data?:
    | UserAvatarDecorationResponse$Outbound
    | null
    | undefined;
  mfa_enabled: boolean;
  locale: "ar";
  premium_type: 0 | null;
  email?: string | null | undefined;
  verified?: boolean | null | undefined;
};

/** @internal */
export const UserPIIResponse$outboundSchema: z.ZodType<
  UserPIIResponse$Outbound,
  z.ZodTypeDef,
  UserPIIResponse
> = z.object({
  id: z.string(),
  username: z.string(),
  avatar: z.nullable(z.string()).optional(),
  discriminator: z.string(),
  publicFlags: z.number().int(),
  flags: z.number().int(),
  bot: z.nullable(z.boolean()).optional(),
  system: z.nullable(z.boolean()).optional(),
  banner: z.nullable(z.string()).optional(),
  accentColor: z.nullable(z.number().int()).optional(),
  globalName: z.nullable(z.string()).optional(),
  avatarDecorationData: z.nullable(UserAvatarDecorationResponse$outboundSchema)
    .optional(),
  mfaEnabled: z.boolean(),
  locale: z.literal("ar").default("ar" as const),
  premiumType: z.nullable(z.literal(0).default(0 as const)),
  email: z.nullable(z.string()).optional(),
  verified: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    publicFlags: "public_flags",
    accentColor: "accent_color",
    globalName: "global_name",
    avatarDecorationData: "avatar_decoration_data",
    mfaEnabled: "mfa_enabled",
    premiumType: "premium_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserPIIResponse$ {
  /** @deprecated use `UserPIIResponse$inboundSchema` instead. */
  export const inboundSchema = UserPIIResponse$inboundSchema;
  /** @deprecated use `UserPIIResponse$outboundSchema` instead. */
  export const outboundSchema = UserPIIResponse$outboundSchema;
  /** @deprecated use `UserPIIResponse$Outbound` instead. */
  export type Outbound = UserPIIResponse$Outbound;
}
