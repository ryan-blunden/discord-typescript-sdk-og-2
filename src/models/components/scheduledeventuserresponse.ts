/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GuildMemberResponse,
  GuildMemberResponse$inboundSchema,
  GuildMemberResponse$Outbound,
  GuildMemberResponse$outboundSchema,
} from "./guildmemberresponse.js";
import {
  UserResponse,
  UserResponse$inboundSchema,
  UserResponse$Outbound,
  UserResponse$outboundSchema,
} from "./userresponse.js";

export type ScheduledEventUserResponse = {
  guildScheduledEventId: string;
  userId: string;
  user?: UserResponse | null | undefined;
  member?: GuildMemberResponse | null | undefined;
};

/** @internal */
export const ScheduledEventUserResponse$inboundSchema: z.ZodType<
  ScheduledEventUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  guild_scheduled_event_id: z.string(),
  user_id: z.string(),
  user: z.nullable(UserResponse$inboundSchema).optional(),
  member: z.nullable(GuildMemberResponse$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "guild_scheduled_event_id": "guildScheduledEventId",
    "user_id": "userId",
  });
});

/** @internal */
export type ScheduledEventUserResponse$Outbound = {
  guild_scheduled_event_id: string;
  user_id: string;
  user?: UserResponse$Outbound | null | undefined;
  member?: GuildMemberResponse$Outbound | null | undefined;
};

/** @internal */
export const ScheduledEventUserResponse$outboundSchema: z.ZodType<
  ScheduledEventUserResponse$Outbound,
  z.ZodTypeDef,
  ScheduledEventUserResponse
> = z.object({
  guildScheduledEventId: z.string(),
  userId: z.string(),
  user: z.nullable(UserResponse$outboundSchema).optional(),
  member: z.nullable(GuildMemberResponse$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    guildScheduledEventId: "guild_scheduled_event_id",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduledEventUserResponse$ {
  /** @deprecated use `ScheduledEventUserResponse$inboundSchema` instead. */
  export const inboundSchema = ScheduledEventUserResponse$inboundSchema;
  /** @deprecated use `ScheduledEventUserResponse$outboundSchema` instead. */
  export const outboundSchema = ScheduledEventUserResponse$outboundSchema;
  /** @deprecated use `ScheduledEventUserResponse$Outbound` instead. */
  export type Outbound = ScheduledEventUserResponse$Outbound;
}

export function scheduledEventUserResponseToJSON(
  scheduledEventUserResponse: ScheduledEventUserResponse,
): string {
  return JSON.stringify(
    ScheduledEventUserResponse$outboundSchema.parse(scheduledEventUserResponse),
  );
}

export function scheduledEventUserResponseFromJSON(
  jsonString: string,
): SafeParseResult<ScheduledEventUserResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScheduledEventUserResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScheduledEventUserResponse' from JSON`,
  );
}
