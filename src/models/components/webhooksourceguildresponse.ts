/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WebhookSourceGuildResponse = {
  id: string;
  icon?: string | null | undefined;
  name: string;
};

/** @internal */
export const WebhookSourceGuildResponse$inboundSchema: z.ZodType<
  WebhookSourceGuildResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  icon: z.nullable(z.string()).optional(),
  name: z.string(),
});

/** @internal */
export type WebhookSourceGuildResponse$Outbound = {
  id: string;
  icon?: string | null | undefined;
  name: string;
};

/** @internal */
export const WebhookSourceGuildResponse$outboundSchema: z.ZodType<
  WebhookSourceGuildResponse$Outbound,
  z.ZodTypeDef,
  WebhookSourceGuildResponse
> = z.object({
  id: z.string(),
  icon: z.nullable(z.string()).optional(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookSourceGuildResponse$ {
  /** @deprecated use `WebhookSourceGuildResponse$inboundSchema` instead. */
  export const inboundSchema = WebhookSourceGuildResponse$inboundSchema;
  /** @deprecated use `WebhookSourceGuildResponse$outboundSchema` instead. */
  export const outboundSchema = WebhookSourceGuildResponse$outboundSchema;
  /** @deprecated use `WebhookSourceGuildResponse$Outbound` instead. */
  export type Outbound = WebhookSourceGuildResponse$Outbound;
}

export function webhookSourceGuildResponseToJSON(
  webhookSourceGuildResponse: WebhookSourceGuildResponse,
): string {
  return JSON.stringify(
    WebhookSourceGuildResponse$outboundSchema.parse(webhookSourceGuildResponse),
  );
}

export function webhookSourceGuildResponseFromJSON(
  jsonString: string,
): SafeParseResult<WebhookSourceGuildResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookSourceGuildResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookSourceGuildResponse' from JSON`,
  );
}
