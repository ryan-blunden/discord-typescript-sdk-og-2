/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GithubUser,
  GithubUser$inboundSchema,
  GithubUser$Outbound,
  GithubUser$outboundSchema,
} from "./githubuser.js";

export type GithubDiscussion = {
  title: string;
  number: number;
  htmlUrl: string;
  answerHtmlUrl?: string | null | undefined;
  body?: string | null | undefined;
  user: GithubUser;
};

/** @internal */
export const GithubDiscussion$inboundSchema: z.ZodType<
  GithubDiscussion,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string(),
  number: z.number().int(),
  html_url: z.string(),
  answer_html_url: z.nullable(z.string()).optional(),
  body: z.nullable(z.string()).optional(),
  user: GithubUser$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "html_url": "htmlUrl",
    "answer_html_url": "answerHtmlUrl",
  });
});

/** @internal */
export type GithubDiscussion$Outbound = {
  title: string;
  number: number;
  html_url: string;
  answer_html_url?: string | null | undefined;
  body?: string | null | undefined;
  user: GithubUser$Outbound;
};

/** @internal */
export const GithubDiscussion$outboundSchema: z.ZodType<
  GithubDiscussion$Outbound,
  z.ZodTypeDef,
  GithubDiscussion
> = z.object({
  title: z.string(),
  number: z.number().int(),
  htmlUrl: z.string(),
  answerHtmlUrl: z.nullable(z.string()).optional(),
  body: z.nullable(z.string()).optional(),
  user: GithubUser$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    htmlUrl: "html_url",
    answerHtmlUrl: "answer_html_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubDiscussion$ {
  /** @deprecated use `GithubDiscussion$inboundSchema` instead. */
  export const inboundSchema = GithubDiscussion$inboundSchema;
  /** @deprecated use `GithubDiscussion$outboundSchema` instead. */
  export const outboundSchema = GithubDiscussion$outboundSchema;
  /** @deprecated use `GithubDiscussion$Outbound` instead. */
  export type Outbound = GithubDiscussion$Outbound;
}

export function githubDiscussionToJSON(
  githubDiscussion: GithubDiscussion,
): string {
  return JSON.stringify(
    GithubDiscussion$outboundSchema.parse(githubDiscussion),
  );
}

export function githubDiscussionFromJSON(
  jsonString: string,
): SafeParseResult<GithubDiscussion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GithubDiscussion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GithubDiscussion' from JSON`,
  );
}
