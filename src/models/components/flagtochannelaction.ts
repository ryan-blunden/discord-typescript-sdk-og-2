/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FlagToChannelActionMetadata,
  FlagToChannelActionMetadata$inboundSchema,
  FlagToChannelActionMetadata$Outbound,
  FlagToChannelActionMetadata$outboundSchema,
} from "./flagtochannelactionmetadata.js";

export type FlagToChannelAction = {
  type?: 1 | undefined;
  metadata: FlagToChannelActionMetadata;
};

/** @internal */
export const FlagToChannelAction$inboundSchema: z.ZodType<
  FlagToChannelAction,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal(1).optional(),
  metadata: FlagToChannelActionMetadata$inboundSchema,
});

/** @internal */
export type FlagToChannelAction$Outbound = {
  type: 1;
  metadata: FlagToChannelActionMetadata$Outbound;
};

/** @internal */
export const FlagToChannelAction$outboundSchema: z.ZodType<
  FlagToChannelAction$Outbound,
  z.ZodTypeDef,
  FlagToChannelAction
> = z.object({
  type: z.literal(1).default(1 as const),
  metadata: FlagToChannelActionMetadata$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagToChannelAction$ {
  /** @deprecated use `FlagToChannelAction$inboundSchema` instead. */
  export const inboundSchema = FlagToChannelAction$inboundSchema;
  /** @deprecated use `FlagToChannelAction$outboundSchema` instead. */
  export const outboundSchema = FlagToChannelAction$outboundSchema;
  /** @deprecated use `FlagToChannelAction$Outbound` instead. */
  export type Outbound = FlagToChannelAction$Outbound;
}

export function flagToChannelActionToJSON(
  flagToChannelAction: FlagToChannelAction,
): string {
  return JSON.stringify(
    FlagToChannelAction$outboundSchema.parse(flagToChannelAction),
  );
}

export function flagToChannelActionFromJSON(
  jsonString: string,
): SafeParseResult<FlagToChannelAction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagToChannelAction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagToChannelAction' from JSON`,
  );
}
