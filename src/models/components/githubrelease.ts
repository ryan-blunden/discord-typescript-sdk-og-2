/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GithubUser,
  GithubUser$inboundSchema,
  GithubUser$Outbound,
  GithubUser$outboundSchema,
} from "./githubuser.js";

export type GithubRelease = {
  id: number;
  tagName: string;
  htmlUrl: string;
  author: GithubUser;
};

/** @internal */
export const GithubRelease$inboundSchema: z.ZodType<
  GithubRelease,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  tag_name: z.string(),
  html_url: z.string(),
  author: GithubUser$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "tag_name": "tagName",
    "html_url": "htmlUrl",
  });
});

/** @internal */
export type GithubRelease$Outbound = {
  id: number;
  tag_name: string;
  html_url: string;
  author: GithubUser$Outbound;
};

/** @internal */
export const GithubRelease$outboundSchema: z.ZodType<
  GithubRelease$Outbound,
  z.ZodTypeDef,
  GithubRelease
> = z.object({
  id: z.number().int(),
  tagName: z.string(),
  htmlUrl: z.string(),
  author: GithubUser$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    tagName: "tag_name",
    htmlUrl: "html_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubRelease$ {
  /** @deprecated use `GithubRelease$inboundSchema` instead. */
  export const inboundSchema = GithubRelease$inboundSchema;
  /** @deprecated use `GithubRelease$outboundSchema` instead. */
  export const outboundSchema = GithubRelease$outboundSchema;
  /** @deprecated use `GithubRelease$Outbound` instead. */
  export type Outbound = GithubRelease$Outbound;
}

export function githubReleaseToJSON(githubRelease: GithubRelease): string {
  return JSON.stringify(GithubRelease$outboundSchema.parse(githubRelease));
}

export function githubReleaseFromJSON(
  jsonString: string,
): SafeParseResult<GithubRelease, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GithubRelease$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GithubRelease' from JSON`,
  );
}
