/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BotAccountPatchRequest = {
  username: string;
  avatar?: string | null | undefined;
  banner?: string | null | undefined;
};

/** @internal */
export const BotAccountPatchRequest$inboundSchema: z.ZodType<
  BotAccountPatchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  username: z.string(),
  avatar: z.nullable(z.string()).optional(),
  banner: z.nullable(z.string()).optional(),
});

/** @internal */
export type BotAccountPatchRequest$Outbound = {
  username: string;
  avatar?: string | null | undefined;
  banner?: string | null | undefined;
};

/** @internal */
export const BotAccountPatchRequest$outboundSchema: z.ZodType<
  BotAccountPatchRequest$Outbound,
  z.ZodTypeDef,
  BotAccountPatchRequest
> = z.object({
  username: z.string(),
  avatar: z.nullable(z.string()).optional(),
  banner: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BotAccountPatchRequest$ {
  /** @deprecated use `BotAccountPatchRequest$inboundSchema` instead. */
  export const inboundSchema = BotAccountPatchRequest$inboundSchema;
  /** @deprecated use `BotAccountPatchRequest$outboundSchema` instead. */
  export const outboundSchema = BotAccountPatchRequest$outboundSchema;
  /** @deprecated use `BotAccountPatchRequest$Outbound` instead. */
  export type Outbound = BotAccountPatchRequest$Outbound;
}

export function botAccountPatchRequestToJSON(
  botAccountPatchRequest: BotAccountPatchRequest,
): string {
  return JSON.stringify(
    BotAccountPatchRequest$outboundSchema.parse(botAccountPatchRequest),
  );
}

export function botAccountPatchRequestFromJSON(
  jsonString: string,
): SafeParseResult<BotAccountPatchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BotAccountPatchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BotAccountPatchRequest' from JSON`,
  );
}
