/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  GithubCheckRun,
  GithubCheckRun$inboundSchema,
  GithubCheckRun$Outbound,
  GithubCheckRun$outboundSchema,
} from "./githubcheckrun.js";
import {
  GithubCheckSuite,
  GithubCheckSuite$inboundSchema,
  GithubCheckSuite$Outbound,
  GithubCheckSuite$outboundSchema,
} from "./githubchecksuite.js";
import {
  GithubComment,
  GithubComment$inboundSchema,
  GithubComment$Outbound,
  GithubComment$outboundSchema,
} from "./githubcomment.js";
import {
  GithubCommit,
  GithubCommit$inboundSchema,
  GithubCommit$Outbound,
  GithubCommit$outboundSchema,
} from "./githubcommit.js";
import {
  GithubDiscussion,
  GithubDiscussion$inboundSchema,
  GithubDiscussion$Outbound,
  GithubDiscussion$outboundSchema,
} from "./githubdiscussion.js";
import {
  GithubIssue,
  GithubIssue$inboundSchema,
  GithubIssue$Outbound,
  GithubIssue$outboundSchema,
} from "./githubissue.js";
import {
  GithubRelease,
  GithubRelease$inboundSchema,
  GithubRelease$Outbound,
  GithubRelease$outboundSchema,
} from "./githubrelease.js";
import {
  GithubRepository,
  GithubRepository$inboundSchema,
  GithubRepository$Outbound,
  GithubRepository$outboundSchema,
} from "./githubrepository.js";
import {
  GithubReview,
  GithubReview$inboundSchema,
  GithubReview$Outbound,
  GithubReview$outboundSchema,
} from "./githubreview.js";
import {
  GithubUser,
  GithubUser$inboundSchema,
  GithubUser$Outbound,
  GithubUser$outboundSchema,
} from "./githubuser.js";

export type GithubWebhook = {
  action?: string | null | undefined;
  ref?: string | null | undefined;
  refType?: string | null | undefined;
  comment?: GithubComment | null | undefined;
  issue?: GithubIssue | null | undefined;
  pullRequest?: GithubIssue | null | undefined;
  repository?: GithubRepository | null | undefined;
  forkee?: GithubRepository | null | undefined;
  sender: GithubUser;
  member?: GithubUser | null | undefined;
  release?: GithubRelease | null | undefined;
  headCommit?: GithubCommit | null | undefined;
  commits?: Array<GithubCommit> | null | undefined;
  forced?: boolean | null | undefined;
  compare?: string | null | undefined;
  review?: GithubReview | null | undefined;
  checkRun?: GithubCheckRun | null | undefined;
  checkSuite?: GithubCheckSuite | null | undefined;
  discussion?: GithubDiscussion | null | undefined;
  answer?: GithubComment | null | undefined;
};

/** @internal */
export const GithubWebhook$inboundSchema: z.ZodType<
  GithubWebhook,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: z.nullable(z.string()).optional(),
  ref: z.nullable(z.string()).optional(),
  ref_type: z.nullable(z.string()).optional(),
  comment: z.nullable(GithubComment$inboundSchema).optional(),
  issue: z.nullable(GithubIssue$inboundSchema).optional(),
  pull_request: z.nullable(GithubIssue$inboundSchema).optional(),
  repository: z.nullable(GithubRepository$inboundSchema).optional(),
  forkee: z.nullable(GithubRepository$inboundSchema).optional(),
  sender: GithubUser$inboundSchema,
  member: z.nullable(GithubUser$inboundSchema).optional(),
  release: z.nullable(GithubRelease$inboundSchema).optional(),
  head_commit: z.nullable(GithubCommit$inboundSchema).optional(),
  commits: z.nullable(z.array(GithubCommit$inboundSchema)).optional(),
  forced: z.nullable(z.boolean()).optional(),
  compare: z.nullable(z.string()).optional(),
  review: z.nullable(GithubReview$inboundSchema).optional(),
  check_run: z.nullable(GithubCheckRun$inboundSchema).optional(),
  check_suite: z.nullable(GithubCheckSuite$inboundSchema).optional(),
  discussion: z.nullable(GithubDiscussion$inboundSchema).optional(),
  answer: z.nullable(GithubComment$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ref_type": "refType",
    "pull_request": "pullRequest",
    "head_commit": "headCommit",
    "check_run": "checkRun",
    "check_suite": "checkSuite",
  });
});

/** @internal */
export type GithubWebhook$Outbound = {
  action?: string | null | undefined;
  ref?: string | null | undefined;
  ref_type?: string | null | undefined;
  comment?: GithubComment$Outbound | null | undefined;
  issue?: GithubIssue$Outbound | null | undefined;
  pull_request?: GithubIssue$Outbound | null | undefined;
  repository?: GithubRepository$Outbound | null | undefined;
  forkee?: GithubRepository$Outbound | null | undefined;
  sender: GithubUser$Outbound;
  member?: GithubUser$Outbound | null | undefined;
  release?: GithubRelease$Outbound | null | undefined;
  head_commit?: GithubCommit$Outbound | null | undefined;
  commits?: Array<GithubCommit$Outbound> | null | undefined;
  forced?: boolean | null | undefined;
  compare?: string | null | undefined;
  review?: GithubReview$Outbound | null | undefined;
  check_run?: GithubCheckRun$Outbound | null | undefined;
  check_suite?: GithubCheckSuite$Outbound | null | undefined;
  discussion?: GithubDiscussion$Outbound | null | undefined;
  answer?: GithubComment$Outbound | null | undefined;
};

/** @internal */
export const GithubWebhook$outboundSchema: z.ZodType<
  GithubWebhook$Outbound,
  z.ZodTypeDef,
  GithubWebhook
> = z.object({
  action: z.nullable(z.string()).optional(),
  ref: z.nullable(z.string()).optional(),
  refType: z.nullable(z.string()).optional(),
  comment: z.nullable(GithubComment$outboundSchema).optional(),
  issue: z.nullable(GithubIssue$outboundSchema).optional(),
  pullRequest: z.nullable(GithubIssue$outboundSchema).optional(),
  repository: z.nullable(GithubRepository$outboundSchema).optional(),
  forkee: z.nullable(GithubRepository$outboundSchema).optional(),
  sender: GithubUser$outboundSchema,
  member: z.nullable(GithubUser$outboundSchema).optional(),
  release: z.nullable(GithubRelease$outboundSchema).optional(),
  headCommit: z.nullable(GithubCommit$outboundSchema).optional(),
  commits: z.nullable(z.array(GithubCommit$outboundSchema)).optional(),
  forced: z.nullable(z.boolean()).optional(),
  compare: z.nullable(z.string()).optional(),
  review: z.nullable(GithubReview$outboundSchema).optional(),
  checkRun: z.nullable(GithubCheckRun$outboundSchema).optional(),
  checkSuite: z.nullable(GithubCheckSuite$outboundSchema).optional(),
  discussion: z.nullable(GithubDiscussion$outboundSchema).optional(),
  answer: z.nullable(GithubComment$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    refType: "ref_type",
    pullRequest: "pull_request",
    headCommit: "head_commit",
    checkRun: "check_run",
    checkSuite: "check_suite",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubWebhook$ {
  /** @deprecated use `GithubWebhook$inboundSchema` instead. */
  export const inboundSchema = GithubWebhook$inboundSchema;
  /** @deprecated use `GithubWebhook$outboundSchema` instead. */
  export const outboundSchema = GithubWebhook$outboundSchema;
  /** @deprecated use `GithubWebhook$Outbound` instead. */
  export type Outbound = GithubWebhook$Outbound;
}
