/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BulkBanUsersResponse = {
  bannedUsers: Array<string>;
  failedUsers: Array<string>;
};

/** @internal */
export const BulkBanUsersResponse$inboundSchema: z.ZodType<
  BulkBanUsersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  banned_users: z.array(z.string()),
  failed_users: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "banned_users": "bannedUsers",
    "failed_users": "failedUsers",
  });
});

/** @internal */
export type BulkBanUsersResponse$Outbound = {
  banned_users: Array<string>;
  failed_users: Array<string>;
};

/** @internal */
export const BulkBanUsersResponse$outboundSchema: z.ZodType<
  BulkBanUsersResponse$Outbound,
  z.ZodTypeDef,
  BulkBanUsersResponse
> = z.object({
  bannedUsers: z.array(z.string()),
  failedUsers: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    bannedUsers: "banned_users",
    failedUsers: "failed_users",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkBanUsersResponse$ {
  /** @deprecated use `BulkBanUsersResponse$inboundSchema` instead. */
  export const inboundSchema = BulkBanUsersResponse$inboundSchema;
  /** @deprecated use `BulkBanUsersResponse$outboundSchema` instead. */
  export const outboundSchema = BulkBanUsersResponse$outboundSchema;
  /** @deprecated use `BulkBanUsersResponse$Outbound` instead. */
  export type Outbound = BulkBanUsersResponse$Outbound;
}

export function bulkBanUsersResponseToJSON(
  bulkBanUsersResponse: BulkBanUsersResponse,
): string {
  return JSON.stringify(
    BulkBanUsersResponse$outboundSchema.parse(bulkBanUsersResponse),
  );
}

export function bulkBanUsersResponseFromJSON(
  jsonString: string,
): SafeParseResult<BulkBanUsersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BulkBanUsersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkBanUsersResponse' from JSON`,
  );
}
