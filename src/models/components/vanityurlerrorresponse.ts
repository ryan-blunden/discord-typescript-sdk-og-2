/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VanityURLErrorResponse = {
  message: string;
  code: number;
};

/** @internal */
export const VanityURLErrorResponse$inboundSchema: z.ZodType<
  VanityURLErrorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.number().int(),
});

/** @internal */
export type VanityURLErrorResponse$Outbound = {
  message: string;
  code: number;
};

/** @internal */
export const VanityURLErrorResponse$outboundSchema: z.ZodType<
  VanityURLErrorResponse$Outbound,
  z.ZodTypeDef,
  VanityURLErrorResponse
> = z.object({
  message: z.string(),
  code: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VanityURLErrorResponse$ {
  /** @deprecated use `VanityURLErrorResponse$inboundSchema` instead. */
  export const inboundSchema = VanityURLErrorResponse$inboundSchema;
  /** @deprecated use `VanityURLErrorResponse$outboundSchema` instead. */
  export const outboundSchema = VanityURLErrorResponse$outboundSchema;
  /** @deprecated use `VanityURLErrorResponse$Outbound` instead. */
  export type Outbound = VanityURLErrorResponse$Outbound;
}

export function vanityURLErrorResponseToJSON(
  vanityURLErrorResponse: VanityURLErrorResponse,
): string {
  return JSON.stringify(
    VanityURLErrorResponse$outboundSchema.parse(vanityURLErrorResponse),
  );
}

export function vanityURLErrorResponseFromJSON(
  jsonString: string,
): SafeParseResult<VanityURLErrorResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VanityURLErrorResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VanityURLErrorResponse' from JSON`,
  );
}
