/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MessageEmbedProviderResponse = {
  name: string;
  url?: string | null | undefined;
};

/** @internal */
export const MessageEmbedProviderResponse$inboundSchema: z.ZodType<
  MessageEmbedProviderResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  url: z.nullable(z.string()).optional(),
});

/** @internal */
export type MessageEmbedProviderResponse$Outbound = {
  name: string;
  url?: string | null | undefined;
};

/** @internal */
export const MessageEmbedProviderResponse$outboundSchema: z.ZodType<
  MessageEmbedProviderResponse$Outbound,
  z.ZodTypeDef,
  MessageEmbedProviderResponse
> = z.object({
  name: z.string(),
  url: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageEmbedProviderResponse$ {
  /** @deprecated use `MessageEmbedProviderResponse$inboundSchema` instead. */
  export const inboundSchema = MessageEmbedProviderResponse$inboundSchema;
  /** @deprecated use `MessageEmbedProviderResponse$outboundSchema` instead. */
  export const outboundSchema = MessageEmbedProviderResponse$outboundSchema;
  /** @deprecated use `MessageEmbedProviderResponse$Outbound` instead. */
  export type Outbound = MessageEmbedProviderResponse$Outbound;
}

export function messageEmbedProviderResponseToJSON(
  messageEmbedProviderResponse: MessageEmbedProviderResponse,
): string {
  return JSON.stringify(
    MessageEmbedProviderResponse$outboundSchema.parse(
      messageEmbedProviderResponse,
    ),
  );
}

export function messageEmbedProviderResponseFromJSON(
  jsonString: string,
): SafeParseResult<MessageEmbedProviderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageEmbedProviderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageEmbedProviderResponse' from JSON`,
  );
}
