/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ApplicationCommandRoleOptionResponse = {
  type?: 1 | undefined;
  name: string;
  nameLocalized?: string | null | undefined;
  nameLocalizations?: { [k: string]: string } | null | undefined;
  description: string;
  descriptionLocalized?: string | null | undefined;
  descriptionLocalizations?: { [k: string]: string } | null | undefined;
  required?: boolean | null | undefined;
};

/** @internal */
export const ApplicationCommandRoleOptionResponse$inboundSchema: z.ZodType<
  ApplicationCommandRoleOptionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal(1).optional(),
  name: z.string(),
  name_localized: z.nullable(z.string()).optional(),
  name_localizations: z.nullable(z.record(z.string())).optional(),
  description: z.string(),
  description_localized: z.nullable(z.string()).optional(),
  description_localizations: z.nullable(z.record(z.string())).optional(),
  required: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "name_localized": "nameLocalized",
    "name_localizations": "nameLocalizations",
    "description_localized": "descriptionLocalized",
    "description_localizations": "descriptionLocalizations",
  });
});

/** @internal */
export type ApplicationCommandRoleOptionResponse$Outbound = {
  type: 1;
  name: string;
  name_localized?: string | null | undefined;
  name_localizations?: { [k: string]: string } | null | undefined;
  description: string;
  description_localized?: string | null | undefined;
  description_localizations?: { [k: string]: string } | null | undefined;
  required?: boolean | null | undefined;
};

/** @internal */
export const ApplicationCommandRoleOptionResponse$outboundSchema: z.ZodType<
  ApplicationCommandRoleOptionResponse$Outbound,
  z.ZodTypeDef,
  ApplicationCommandRoleOptionResponse
> = z.object({
  type: z.literal(1).default(1 as const),
  name: z.string(),
  nameLocalized: z.nullable(z.string()).optional(),
  nameLocalizations: z.nullable(z.record(z.string())).optional(),
  description: z.string(),
  descriptionLocalized: z.nullable(z.string()).optional(),
  descriptionLocalizations: z.nullable(z.record(z.string())).optional(),
  required: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    nameLocalized: "name_localized",
    nameLocalizations: "name_localizations",
    descriptionLocalized: "description_localized",
    descriptionLocalizations: "description_localizations",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationCommandRoleOptionResponse$ {
  /** @deprecated use `ApplicationCommandRoleOptionResponse$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationCommandRoleOptionResponse$inboundSchema;
  /** @deprecated use `ApplicationCommandRoleOptionResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationCommandRoleOptionResponse$outboundSchema;
  /** @deprecated use `ApplicationCommandRoleOptionResponse$Outbound` instead. */
  export type Outbound = ApplicationCommandRoleOptionResponse$Outbound;
}

export function applicationCommandRoleOptionResponseToJSON(
  applicationCommandRoleOptionResponse: ApplicationCommandRoleOptionResponse,
): string {
  return JSON.stringify(
    ApplicationCommandRoleOptionResponse$outboundSchema.parse(
      applicationCommandRoleOptionResponse,
    ),
  );
}

export function applicationCommandRoleOptionResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationCommandRoleOptionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationCommandRoleOptionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationCommandRoleOptionResponse' from JSON`,
  );
}
