/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PollEmojiCreateRequest,
  PollEmojiCreateRequest$inboundSchema,
  PollEmojiCreateRequest$Outbound,
  PollEmojiCreateRequest$outboundSchema,
} from "./pollemojicreaterequest.js";

export type PollMediaCreateRequest = {
  text?: string | null | undefined;
  emoji?: PollEmojiCreateRequest | null | undefined;
};

/** @internal */
export const PollMediaCreateRequest$inboundSchema: z.ZodType<
  PollMediaCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.nullable(z.string()).optional(),
  emoji: z.nullable(PollEmojiCreateRequest$inboundSchema).optional(),
});

/** @internal */
export type PollMediaCreateRequest$Outbound = {
  text?: string | null | undefined;
  emoji?: PollEmojiCreateRequest$Outbound | null | undefined;
};

/** @internal */
export const PollMediaCreateRequest$outboundSchema: z.ZodType<
  PollMediaCreateRequest$Outbound,
  z.ZodTypeDef,
  PollMediaCreateRequest
> = z.object({
  text: z.nullable(z.string()).optional(),
  emoji: z.nullable(PollEmojiCreateRequest$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PollMediaCreateRequest$ {
  /** @deprecated use `PollMediaCreateRequest$inboundSchema` instead. */
  export const inboundSchema = PollMediaCreateRequest$inboundSchema;
  /** @deprecated use `PollMediaCreateRequest$outboundSchema` instead. */
  export const outboundSchema = PollMediaCreateRequest$outboundSchema;
  /** @deprecated use `PollMediaCreateRequest$Outbound` instead. */
  export type Outbound = PollMediaCreateRequest$Outbound;
}

export function pollMediaCreateRequestToJSON(
  pollMediaCreateRequest: PollMediaCreateRequest,
): string {
  return JSON.stringify(
    PollMediaCreateRequest$outboundSchema.parse(pollMediaCreateRequest),
  );
}

export function pollMediaCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<PollMediaCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PollMediaCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PollMediaCreateRequest' from JSON`,
  );
}
