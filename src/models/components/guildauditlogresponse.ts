/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ApplicationCommandResponse,
  ApplicationCommandResponse$inboundSchema,
  ApplicationCommandResponse$Outbound,
  ApplicationCommandResponse$outboundSchema,
} from "./applicationcommandresponse.js";
import {
  ApplicationIncomingWebhookResponse,
  ApplicationIncomingWebhookResponse$inboundSchema,
  ApplicationIncomingWebhookResponse$Outbound,
  ApplicationIncomingWebhookResponse$outboundSchema,
} from "./applicationincomingwebhookresponse.js";
import {
  AuditLogEntryResponse,
  AuditLogEntryResponse$inboundSchema,
  AuditLogEntryResponse$Outbound,
  AuditLogEntryResponse$outboundSchema,
} from "./auditlogentryresponse.js";
import {
  ChannelFollowerWebhookResponse,
  ChannelFollowerWebhookResponse$inboundSchema,
  ChannelFollowerWebhookResponse$Outbound,
  ChannelFollowerWebhookResponse$outboundSchema,
} from "./channelfollowerwebhookresponse.js";
import {
  DefaultKeywordRuleResponse,
  DefaultKeywordRuleResponse$inboundSchema,
  DefaultKeywordRuleResponse$Outbound,
  DefaultKeywordRuleResponse$outboundSchema,
} from "./defaultkeywordruleresponse.js";
import {
  ExternalScheduledEventResponse,
  ExternalScheduledEventResponse$inboundSchema,
  ExternalScheduledEventResponse$Outbound,
  ExternalScheduledEventResponse$outboundSchema,
} from "./externalscheduledeventresponse.js";
import {
  GuildIncomingWebhookResponse,
  GuildIncomingWebhookResponse$inboundSchema,
  GuildIncomingWebhookResponse$Outbound,
  GuildIncomingWebhookResponse$outboundSchema,
} from "./guildincomingwebhookresponse.js";
import {
  KeywordRuleResponse,
  KeywordRuleResponse$inboundSchema,
  KeywordRuleResponse$Outbound,
  KeywordRuleResponse$outboundSchema,
} from "./keywordruleresponse.js";
import {
  MentionSpamRuleResponse,
  MentionSpamRuleResponse$inboundSchema,
  MentionSpamRuleResponse$Outbound,
  MentionSpamRuleResponse$outboundSchema,
} from "./mentionspamruleresponse.js";
import {
  MLSpamRuleResponse,
  MLSpamRuleResponse$inboundSchema,
  MLSpamRuleResponse$Outbound,
  MLSpamRuleResponse$outboundSchema,
} from "./mlspamruleresponse.js";
import {
  PartialDiscordIntegrationResponse,
  PartialDiscordIntegrationResponse$inboundSchema,
  PartialDiscordIntegrationResponse$Outbound,
  PartialDiscordIntegrationResponse$outboundSchema,
} from "./partialdiscordintegrationresponse.js";
import {
  PartialExternalConnectionIntegrationResponse,
  PartialExternalConnectionIntegrationResponse$inboundSchema,
  PartialExternalConnectionIntegrationResponse$Outbound,
  PartialExternalConnectionIntegrationResponse$outboundSchema,
} from "./partialexternalconnectionintegrationresponse.js";
import {
  PartialGuildSubscriptionIntegrationResponse,
  PartialGuildSubscriptionIntegrationResponse$inboundSchema,
  PartialGuildSubscriptionIntegrationResponse$Outbound,
  PartialGuildSubscriptionIntegrationResponse$outboundSchema,
} from "./partialguildsubscriptionintegrationresponse.js";
import {
  SpamLinkRuleResponse,
  SpamLinkRuleResponse$inboundSchema,
  SpamLinkRuleResponse$Outbound,
  SpamLinkRuleResponse$outboundSchema,
} from "./spamlinkruleresponse.js";
import {
  StageScheduledEventResponse,
  StageScheduledEventResponse$inboundSchema,
  StageScheduledEventResponse$Outbound,
  StageScheduledEventResponse$outboundSchema,
} from "./stagescheduledeventresponse.js";
import {
  ThreadResponse,
  ThreadResponse$inboundSchema,
  ThreadResponse$Outbound,
  ThreadResponse$outboundSchema,
} from "./threadresponse.js";
import {
  UserResponse,
  UserResponse$inboundSchema,
  UserResponse$Outbound,
  UserResponse$outboundSchema,
} from "./userresponse.js";
import {
  VoiceScheduledEventResponse,
  VoiceScheduledEventResponse$inboundSchema,
  VoiceScheduledEventResponse$Outbound,
  VoiceScheduledEventResponse$outboundSchema,
} from "./voicescheduledeventresponse.js";

export type Integrations =
  | PartialExternalConnectionIntegrationResponse
  | PartialGuildSubscriptionIntegrationResponse
  | PartialDiscordIntegrationResponse;

export type Webhooks =
  | ApplicationIncomingWebhookResponse
  | ChannelFollowerWebhookResponse
  | GuildIncomingWebhookResponse;

export type GuildScheduledEvents =
  | ExternalScheduledEventResponse
  | StageScheduledEventResponse
  | VoiceScheduledEventResponse;

export type AutoModerationRules =
  | DefaultKeywordRuleResponse
  | KeywordRuleResponse
  | MLSpamRuleResponse
  | MentionSpamRuleResponse
  | SpamLinkRuleResponse;

export type GuildAuditLogResponse = {
  auditLogEntries: Array<AuditLogEntryResponse>;
  users: Array<UserResponse>;
  integrations: Array<
    | PartialExternalConnectionIntegrationResponse
    | PartialGuildSubscriptionIntegrationResponse
    | PartialDiscordIntegrationResponse
  >;
  webhooks: Array<
    | ApplicationIncomingWebhookResponse
    | ChannelFollowerWebhookResponse
    | GuildIncomingWebhookResponse
  >;
  guildScheduledEvents: Array<
    | ExternalScheduledEventResponse
    | StageScheduledEventResponse
    | VoiceScheduledEventResponse
  >;
  threads: Array<ThreadResponse>;
  applicationCommands: Array<ApplicationCommandResponse>;
  autoModerationRules: Array<
    | DefaultKeywordRuleResponse
    | KeywordRuleResponse
    | MLSpamRuleResponse
    | MentionSpamRuleResponse
    | SpamLinkRuleResponse
  >;
};

/** @internal */
export const Integrations$inboundSchema: z.ZodType<
  Integrations,
  z.ZodTypeDef,
  unknown
> = z.union([
  PartialExternalConnectionIntegrationResponse$inboundSchema,
  PartialGuildSubscriptionIntegrationResponse$inboundSchema,
  PartialDiscordIntegrationResponse$inboundSchema,
]);

/** @internal */
export type Integrations$Outbound =
  | PartialExternalConnectionIntegrationResponse$Outbound
  | PartialGuildSubscriptionIntegrationResponse$Outbound
  | PartialDiscordIntegrationResponse$Outbound;

/** @internal */
export const Integrations$outboundSchema: z.ZodType<
  Integrations$Outbound,
  z.ZodTypeDef,
  Integrations
> = z.union([
  PartialExternalConnectionIntegrationResponse$outboundSchema,
  PartialGuildSubscriptionIntegrationResponse$outboundSchema,
  PartialDiscordIntegrationResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Integrations$ {
  /** @deprecated use `Integrations$inboundSchema` instead. */
  export const inboundSchema = Integrations$inboundSchema;
  /** @deprecated use `Integrations$outboundSchema` instead. */
  export const outboundSchema = Integrations$outboundSchema;
  /** @deprecated use `Integrations$Outbound` instead. */
  export type Outbound = Integrations$Outbound;
}

export function integrationsToJSON(integrations: Integrations): string {
  return JSON.stringify(Integrations$outboundSchema.parse(integrations));
}

export function integrationsFromJSON(
  jsonString: string,
): SafeParseResult<Integrations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Integrations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Integrations' from JSON`,
  );
}

/** @internal */
export const Webhooks$inboundSchema: z.ZodType<
  Webhooks,
  z.ZodTypeDef,
  unknown
> = z.union([
  ApplicationIncomingWebhookResponse$inboundSchema,
  ChannelFollowerWebhookResponse$inboundSchema,
  GuildIncomingWebhookResponse$inboundSchema,
]);

/** @internal */
export type Webhooks$Outbound =
  | ApplicationIncomingWebhookResponse$Outbound
  | ChannelFollowerWebhookResponse$Outbound
  | GuildIncomingWebhookResponse$Outbound;

/** @internal */
export const Webhooks$outboundSchema: z.ZodType<
  Webhooks$Outbound,
  z.ZodTypeDef,
  Webhooks
> = z.union([
  ApplicationIncomingWebhookResponse$outboundSchema,
  ChannelFollowerWebhookResponse$outboundSchema,
  GuildIncomingWebhookResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Webhooks$ {
  /** @deprecated use `Webhooks$inboundSchema` instead. */
  export const inboundSchema = Webhooks$inboundSchema;
  /** @deprecated use `Webhooks$outboundSchema` instead. */
  export const outboundSchema = Webhooks$outboundSchema;
  /** @deprecated use `Webhooks$Outbound` instead. */
  export type Outbound = Webhooks$Outbound;
}

export function webhooksToJSON(webhooks: Webhooks): string {
  return JSON.stringify(Webhooks$outboundSchema.parse(webhooks));
}

export function webhooksFromJSON(
  jsonString: string,
): SafeParseResult<Webhooks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Webhooks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Webhooks' from JSON`,
  );
}

/** @internal */
export const GuildScheduledEvents$inboundSchema: z.ZodType<
  GuildScheduledEvents,
  z.ZodTypeDef,
  unknown
> = z.union([
  ExternalScheduledEventResponse$inboundSchema,
  StageScheduledEventResponse$inboundSchema,
  VoiceScheduledEventResponse$inboundSchema,
]);

/** @internal */
export type GuildScheduledEvents$Outbound =
  | ExternalScheduledEventResponse$Outbound
  | StageScheduledEventResponse$Outbound
  | VoiceScheduledEventResponse$Outbound;

/** @internal */
export const GuildScheduledEvents$outboundSchema: z.ZodType<
  GuildScheduledEvents$Outbound,
  z.ZodTypeDef,
  GuildScheduledEvents
> = z.union([
  ExternalScheduledEventResponse$outboundSchema,
  StageScheduledEventResponse$outboundSchema,
  VoiceScheduledEventResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GuildScheduledEvents$ {
  /** @deprecated use `GuildScheduledEvents$inboundSchema` instead. */
  export const inboundSchema = GuildScheduledEvents$inboundSchema;
  /** @deprecated use `GuildScheduledEvents$outboundSchema` instead. */
  export const outboundSchema = GuildScheduledEvents$outboundSchema;
  /** @deprecated use `GuildScheduledEvents$Outbound` instead. */
  export type Outbound = GuildScheduledEvents$Outbound;
}

export function guildScheduledEventsToJSON(
  guildScheduledEvents: GuildScheduledEvents,
): string {
  return JSON.stringify(
    GuildScheduledEvents$outboundSchema.parse(guildScheduledEvents),
  );
}

export function guildScheduledEventsFromJSON(
  jsonString: string,
): SafeParseResult<GuildScheduledEvents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GuildScheduledEvents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GuildScheduledEvents' from JSON`,
  );
}

/** @internal */
export const AutoModerationRules$inboundSchema: z.ZodType<
  AutoModerationRules,
  z.ZodTypeDef,
  unknown
> = z.union([
  DefaultKeywordRuleResponse$inboundSchema,
  KeywordRuleResponse$inboundSchema,
  MLSpamRuleResponse$inboundSchema,
  MentionSpamRuleResponse$inboundSchema,
  SpamLinkRuleResponse$inboundSchema,
]);

/** @internal */
export type AutoModerationRules$Outbound =
  | DefaultKeywordRuleResponse$Outbound
  | KeywordRuleResponse$Outbound
  | MLSpamRuleResponse$Outbound
  | MentionSpamRuleResponse$Outbound
  | SpamLinkRuleResponse$Outbound;

/** @internal */
export const AutoModerationRules$outboundSchema: z.ZodType<
  AutoModerationRules$Outbound,
  z.ZodTypeDef,
  AutoModerationRules
> = z.union([
  DefaultKeywordRuleResponse$outboundSchema,
  KeywordRuleResponse$outboundSchema,
  MLSpamRuleResponse$outboundSchema,
  MentionSpamRuleResponse$outboundSchema,
  SpamLinkRuleResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AutoModerationRules$ {
  /** @deprecated use `AutoModerationRules$inboundSchema` instead. */
  export const inboundSchema = AutoModerationRules$inboundSchema;
  /** @deprecated use `AutoModerationRules$outboundSchema` instead. */
  export const outboundSchema = AutoModerationRules$outboundSchema;
  /** @deprecated use `AutoModerationRules$Outbound` instead. */
  export type Outbound = AutoModerationRules$Outbound;
}

export function autoModerationRulesToJSON(
  autoModerationRules: AutoModerationRules,
): string {
  return JSON.stringify(
    AutoModerationRules$outboundSchema.parse(autoModerationRules),
  );
}

export function autoModerationRulesFromJSON(
  jsonString: string,
): SafeParseResult<AutoModerationRules, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AutoModerationRules$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AutoModerationRules' from JSON`,
  );
}

/** @internal */
export const GuildAuditLogResponse$inboundSchema: z.ZodType<
  GuildAuditLogResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  audit_log_entries: z.array(AuditLogEntryResponse$inboundSchema),
  users: z.array(UserResponse$inboundSchema),
  integrations: z.array(
    z.union([
      PartialExternalConnectionIntegrationResponse$inboundSchema,
      PartialGuildSubscriptionIntegrationResponse$inboundSchema,
      PartialDiscordIntegrationResponse$inboundSchema,
    ]),
  ),
  webhooks: z.array(
    z.union([
      ApplicationIncomingWebhookResponse$inboundSchema,
      ChannelFollowerWebhookResponse$inboundSchema,
      GuildIncomingWebhookResponse$inboundSchema,
    ]),
  ),
  guild_scheduled_events: z.array(
    z.union([
      ExternalScheduledEventResponse$inboundSchema,
      StageScheduledEventResponse$inboundSchema,
      VoiceScheduledEventResponse$inboundSchema,
    ]),
  ),
  threads: z.array(ThreadResponse$inboundSchema),
  application_commands: z.array(ApplicationCommandResponse$inboundSchema),
  auto_moderation_rules: z.array(
    z.union([
      DefaultKeywordRuleResponse$inboundSchema,
      KeywordRuleResponse$inboundSchema,
      MLSpamRuleResponse$inboundSchema,
      MentionSpamRuleResponse$inboundSchema,
      SpamLinkRuleResponse$inboundSchema,
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "audit_log_entries": "auditLogEntries",
    "guild_scheduled_events": "guildScheduledEvents",
    "application_commands": "applicationCommands",
    "auto_moderation_rules": "autoModerationRules",
  });
});

/** @internal */
export type GuildAuditLogResponse$Outbound = {
  audit_log_entries: Array<AuditLogEntryResponse$Outbound>;
  users: Array<UserResponse$Outbound>;
  integrations: Array<
    | PartialExternalConnectionIntegrationResponse$Outbound
    | PartialGuildSubscriptionIntegrationResponse$Outbound
    | PartialDiscordIntegrationResponse$Outbound
  >;
  webhooks: Array<
    | ApplicationIncomingWebhookResponse$Outbound
    | ChannelFollowerWebhookResponse$Outbound
    | GuildIncomingWebhookResponse$Outbound
  >;
  guild_scheduled_events: Array<
    | ExternalScheduledEventResponse$Outbound
    | StageScheduledEventResponse$Outbound
    | VoiceScheduledEventResponse$Outbound
  >;
  threads: Array<ThreadResponse$Outbound>;
  application_commands: Array<ApplicationCommandResponse$Outbound>;
  auto_moderation_rules: Array<
    | DefaultKeywordRuleResponse$Outbound
    | KeywordRuleResponse$Outbound
    | MLSpamRuleResponse$Outbound
    | MentionSpamRuleResponse$Outbound
    | SpamLinkRuleResponse$Outbound
  >;
};

/** @internal */
export const GuildAuditLogResponse$outboundSchema: z.ZodType<
  GuildAuditLogResponse$Outbound,
  z.ZodTypeDef,
  GuildAuditLogResponse
> = z.object({
  auditLogEntries: z.array(AuditLogEntryResponse$outboundSchema),
  users: z.array(UserResponse$outboundSchema),
  integrations: z.array(
    z.union([
      PartialExternalConnectionIntegrationResponse$outboundSchema,
      PartialGuildSubscriptionIntegrationResponse$outboundSchema,
      PartialDiscordIntegrationResponse$outboundSchema,
    ]),
  ),
  webhooks: z.array(
    z.union([
      ApplicationIncomingWebhookResponse$outboundSchema,
      ChannelFollowerWebhookResponse$outboundSchema,
      GuildIncomingWebhookResponse$outboundSchema,
    ]),
  ),
  guildScheduledEvents: z.array(
    z.union([
      ExternalScheduledEventResponse$outboundSchema,
      StageScheduledEventResponse$outboundSchema,
      VoiceScheduledEventResponse$outboundSchema,
    ]),
  ),
  threads: z.array(ThreadResponse$outboundSchema),
  applicationCommands: z.array(ApplicationCommandResponse$outboundSchema),
  autoModerationRules: z.array(
    z.union([
      DefaultKeywordRuleResponse$outboundSchema,
      KeywordRuleResponse$outboundSchema,
      MLSpamRuleResponse$outboundSchema,
      MentionSpamRuleResponse$outboundSchema,
      SpamLinkRuleResponse$outboundSchema,
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    auditLogEntries: "audit_log_entries",
    guildScheduledEvents: "guild_scheduled_events",
    applicationCommands: "application_commands",
    autoModerationRules: "auto_moderation_rules",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GuildAuditLogResponse$ {
  /** @deprecated use `GuildAuditLogResponse$inboundSchema` instead. */
  export const inboundSchema = GuildAuditLogResponse$inboundSchema;
  /** @deprecated use `GuildAuditLogResponse$outboundSchema` instead. */
  export const outboundSchema = GuildAuditLogResponse$outboundSchema;
  /** @deprecated use `GuildAuditLogResponse$Outbound` instead. */
  export type Outbound = GuildAuditLogResponse$Outbound;
}

export function guildAuditLogResponseToJSON(
  guildAuditLogResponse: GuildAuditLogResponse,
): string {
  return JSON.stringify(
    GuildAuditLogResponse$outboundSchema.parse(guildAuditLogResponse),
  );
}

export function guildAuditLogResponseFromJSON(
  jsonString: string,
): SafeParseResult<GuildAuditLogResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GuildAuditLogResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GuildAuditLogResponse' from JSON`,
  );
}
