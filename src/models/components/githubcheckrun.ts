/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GithubCheckPullRequest,
  GithubCheckPullRequest$inboundSchema,
  GithubCheckPullRequest$Outbound,
  GithubCheckPullRequest$outboundSchema,
} from "./githubcheckpullrequest.js";
import {
  GithubCheckRunOutput,
  GithubCheckRunOutput$inboundSchema,
  GithubCheckRunOutput$Outbound,
  GithubCheckRunOutput$outboundSchema,
} from "./githubcheckrunoutput.js";
import {
  GithubCheckSuite,
  GithubCheckSuite$inboundSchema,
  GithubCheckSuite$Outbound,
  GithubCheckSuite$outboundSchema,
} from "./githubchecksuite.js";

export type GithubCheckRun = {
  conclusion?: string | null | undefined;
  name: string;
  htmlUrl: string;
  checkSuite: GithubCheckSuite;
  detailsUrl?: string | null | undefined;
  output?: GithubCheckRunOutput | null | undefined;
  pullRequests?: Array<GithubCheckPullRequest> | null | undefined;
};

/** @internal */
export const GithubCheckRun$inboundSchema: z.ZodType<
  GithubCheckRun,
  z.ZodTypeDef,
  unknown
> = z.object({
  conclusion: z.nullable(z.string()).optional(),
  name: z.string(),
  html_url: z.string(),
  check_suite: GithubCheckSuite$inboundSchema,
  details_url: z.nullable(z.string()).optional(),
  output: z.nullable(GithubCheckRunOutput$inboundSchema).optional(),
  pull_requests: z.nullable(z.array(GithubCheckPullRequest$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "html_url": "htmlUrl",
    "check_suite": "checkSuite",
    "details_url": "detailsUrl",
    "pull_requests": "pullRequests",
  });
});

/** @internal */
export type GithubCheckRun$Outbound = {
  conclusion?: string | null | undefined;
  name: string;
  html_url: string;
  check_suite: GithubCheckSuite$Outbound;
  details_url?: string | null | undefined;
  output?: GithubCheckRunOutput$Outbound | null | undefined;
  pull_requests?: Array<GithubCheckPullRequest$Outbound> | null | undefined;
};

/** @internal */
export const GithubCheckRun$outboundSchema: z.ZodType<
  GithubCheckRun$Outbound,
  z.ZodTypeDef,
  GithubCheckRun
> = z.object({
  conclusion: z.nullable(z.string()).optional(),
  name: z.string(),
  htmlUrl: z.string(),
  checkSuite: GithubCheckSuite$outboundSchema,
  detailsUrl: z.nullable(z.string()).optional(),
  output: z.nullable(GithubCheckRunOutput$outboundSchema).optional(),
  pullRequests: z.nullable(z.array(GithubCheckPullRequest$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    htmlUrl: "html_url",
    checkSuite: "check_suite",
    detailsUrl: "details_url",
    pullRequests: "pull_requests",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubCheckRun$ {
  /** @deprecated use `GithubCheckRun$inboundSchema` instead. */
  export const inboundSchema = GithubCheckRun$inboundSchema;
  /** @deprecated use `GithubCheckRun$outboundSchema` instead. */
  export const outboundSchema = GithubCheckRun$outboundSchema;
  /** @deprecated use `GithubCheckRun$Outbound` instead. */
  export type Outbound = GithubCheckRun$Outbound;
}

export function githubCheckRunToJSON(githubCheckRun: GithubCheckRun): string {
  return JSON.stringify(GithubCheckRun$outboundSchema.parse(githubCheckRun));
}

export function githubCheckRunFromJSON(
  jsonString: string,
): SafeParseResult<GithubCheckRun, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GithubCheckRun$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GithubCheckRun' from JSON`,
  );
}
