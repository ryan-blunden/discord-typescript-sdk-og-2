/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GuildMemberResponse,
  GuildMemberResponse$inboundSchema,
  GuildMemberResponse$Outbound,
  GuildMemberResponse$outboundSchema,
} from "./guildmemberresponse.js";

export type VoiceStateResponse = {
  channelId?: string | null | undefined;
  deaf: boolean;
  guildId?: string | null | undefined;
  member?: GuildMemberResponse | null | undefined;
  mute: boolean;
  requestToSpeakTimestamp?: Date | null | undefined;
  suppress: boolean;
  selfStream?: boolean | null | undefined;
  selfDeaf: boolean;
  selfMute: boolean;
  selfVideo: boolean;
  sessionId: string;
  userId: string;
};

/** @internal */
export const VoiceStateResponse$inboundSchema: z.ZodType<
  VoiceStateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel_id: z.nullable(z.string()).optional(),
  deaf: z.boolean(),
  guild_id: z.nullable(z.string()).optional(),
  member: z.nullable(GuildMemberResponse$inboundSchema).optional(),
  mute: z.boolean(),
  request_to_speak_timestamp: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  suppress: z.boolean(),
  self_stream: z.nullable(z.boolean()).optional(),
  self_deaf: z.boolean(),
  self_mute: z.boolean(),
  self_video: z.boolean(),
  session_id: z.string(),
  user_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "channel_id": "channelId",
    "guild_id": "guildId",
    "request_to_speak_timestamp": "requestToSpeakTimestamp",
    "self_stream": "selfStream",
    "self_deaf": "selfDeaf",
    "self_mute": "selfMute",
    "self_video": "selfVideo",
    "session_id": "sessionId",
    "user_id": "userId",
  });
});

/** @internal */
export type VoiceStateResponse$Outbound = {
  channel_id?: string | null | undefined;
  deaf: boolean;
  guild_id?: string | null | undefined;
  member?: GuildMemberResponse$Outbound | null | undefined;
  mute: boolean;
  request_to_speak_timestamp?: string | null | undefined;
  suppress: boolean;
  self_stream?: boolean | null | undefined;
  self_deaf: boolean;
  self_mute: boolean;
  self_video: boolean;
  session_id: string;
  user_id: string;
};

/** @internal */
export const VoiceStateResponse$outboundSchema: z.ZodType<
  VoiceStateResponse$Outbound,
  z.ZodTypeDef,
  VoiceStateResponse
> = z.object({
  channelId: z.nullable(z.string()).optional(),
  deaf: z.boolean(),
  guildId: z.nullable(z.string()).optional(),
  member: z.nullable(GuildMemberResponse$outboundSchema).optional(),
  mute: z.boolean(),
  requestToSpeakTimestamp: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  suppress: z.boolean(),
  selfStream: z.nullable(z.boolean()).optional(),
  selfDeaf: z.boolean(),
  selfMute: z.boolean(),
  selfVideo: z.boolean(),
  sessionId: z.string(),
  userId: z.string(),
}).transform((v) => {
  return remap$(v, {
    channelId: "channel_id",
    guildId: "guild_id",
    requestToSpeakTimestamp: "request_to_speak_timestamp",
    selfStream: "self_stream",
    selfDeaf: "self_deaf",
    selfMute: "self_mute",
    selfVideo: "self_video",
    sessionId: "session_id",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VoiceStateResponse$ {
  /** @deprecated use `VoiceStateResponse$inboundSchema` instead. */
  export const inboundSchema = VoiceStateResponse$inboundSchema;
  /** @deprecated use `VoiceStateResponse$outboundSchema` instead. */
  export const outboundSchema = VoiceStateResponse$outboundSchema;
  /** @deprecated use `VoiceStateResponse$Outbound` instead. */
  export type Outbound = VoiceStateResponse$Outbound;
}

export function voiceStateResponseToJSON(
  voiceStateResponse: VoiceStateResponse,
): string {
  return JSON.stringify(
    VoiceStateResponse$outboundSchema.parse(voiceStateResponse),
  );
}

export function voiceStateResponseFromJSON(
  jsonString: string,
): SafeParseResult<VoiceStateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VoiceStateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VoiceStateResponse' from JSON`,
  );
}
