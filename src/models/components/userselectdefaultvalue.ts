/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UserSelectDefaultValue = {
  type?: "user" | undefined;
  id: string;
};

/** @internal */
export const UserSelectDefaultValue$inboundSchema: z.ZodType<
  UserSelectDefaultValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("user").optional(),
  id: z.string(),
});

/** @internal */
export type UserSelectDefaultValue$Outbound = {
  type: "user";
  id: string;
};

/** @internal */
export const UserSelectDefaultValue$outboundSchema: z.ZodType<
  UserSelectDefaultValue$Outbound,
  z.ZodTypeDef,
  UserSelectDefaultValue
> = z.object({
  type: z.literal("user").default("user" as const),
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserSelectDefaultValue$ {
  /** @deprecated use `UserSelectDefaultValue$inboundSchema` instead. */
  export const inboundSchema = UserSelectDefaultValue$inboundSchema;
  /** @deprecated use `UserSelectDefaultValue$outboundSchema` instead. */
  export const outboundSchema = UserSelectDefaultValue$outboundSchema;
  /** @deprecated use `UserSelectDefaultValue$Outbound` instead. */
  export type Outbound = UserSelectDefaultValue$Outbound;
}

export function userSelectDefaultValueToJSON(
  userSelectDefaultValue: UserSelectDefaultValue,
): string {
  return JSON.stringify(
    UserSelectDefaultValue$outboundSchema.parse(userSelectDefaultValue),
  );
}

export function userSelectDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<UserSelectDefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserSelectDefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserSelectDefaultValue' from JSON`,
  );
}
