/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  EmojiResponse,
  EmojiResponse$inboundSchema,
  EmojiResponse$Outbound,
  EmojiResponse$outboundSchema,
} from "./emojiresponse.js";
import {
  GuildStickerResponse,
  GuildStickerResponse$inboundSchema,
  GuildStickerResponse$Outbound,
  GuildStickerResponse$outboundSchema,
} from "./guildstickerresponse.js";

export type GuildPreviewResponse = {
  id: string;
  name: string;
  icon?: string | null | undefined;
  description?: string | null | undefined;
  homeHeader?: string | null | undefined;
  splash?: string | null | undefined;
  discoverySplash?: string | null | undefined;
  features: Array<string>;
  approximateMemberCount: number;
  approximatePresenceCount: number;
  emojis: Array<EmojiResponse>;
  stickers: Array<GuildStickerResponse>;
};

/** @internal */
export const GuildPreviewResponse$inboundSchema: z.ZodType<
  GuildPreviewResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  icon: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  home_header: z.nullable(z.string()).optional(),
  splash: z.nullable(z.string()).optional(),
  discovery_splash: z.nullable(z.string()).optional(),
  features: z.array(z.string()),
  approximate_member_count: z.number().int(),
  approximate_presence_count: z.number().int(),
  emojis: z.array(EmojiResponse$inboundSchema),
  stickers: z.array(GuildStickerResponse$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "home_header": "homeHeader",
    "discovery_splash": "discoverySplash",
    "approximate_member_count": "approximateMemberCount",
    "approximate_presence_count": "approximatePresenceCount",
  });
});

/** @internal */
export type GuildPreviewResponse$Outbound = {
  id: string;
  name: string;
  icon?: string | null | undefined;
  description?: string | null | undefined;
  home_header?: string | null | undefined;
  splash?: string | null | undefined;
  discovery_splash?: string | null | undefined;
  features: Array<string>;
  approximate_member_count: number;
  approximate_presence_count: number;
  emojis: Array<EmojiResponse$Outbound>;
  stickers: Array<GuildStickerResponse$Outbound>;
};

/** @internal */
export const GuildPreviewResponse$outboundSchema: z.ZodType<
  GuildPreviewResponse$Outbound,
  z.ZodTypeDef,
  GuildPreviewResponse
> = z.object({
  id: z.string(),
  name: z.string(),
  icon: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  homeHeader: z.nullable(z.string()).optional(),
  splash: z.nullable(z.string()).optional(),
  discoverySplash: z.nullable(z.string()).optional(),
  features: z.array(z.string()),
  approximateMemberCount: z.number().int(),
  approximatePresenceCount: z.number().int(),
  emojis: z.array(EmojiResponse$outboundSchema),
  stickers: z.array(GuildStickerResponse$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    homeHeader: "home_header",
    discoverySplash: "discovery_splash",
    approximateMemberCount: "approximate_member_count",
    approximatePresenceCount: "approximate_presence_count",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GuildPreviewResponse$ {
  /** @deprecated use `GuildPreviewResponse$inboundSchema` instead. */
  export const inboundSchema = GuildPreviewResponse$inboundSchema;
  /** @deprecated use `GuildPreviewResponse$outboundSchema` instead. */
  export const outboundSchema = GuildPreviewResponse$outboundSchema;
  /** @deprecated use `GuildPreviewResponse$Outbound` instead. */
  export type Outbound = GuildPreviewResponse$Outbound;
}
