/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreatePrivateChannelRequest = {
  recipientId?: string | null | undefined;
  accessTokens?: Array<string> | null | undefined;
  nicks?: { [k: string]: string } | null | undefined;
};

/** @internal */
export const CreatePrivateChannelRequest$inboundSchema: z.ZodType<
  CreatePrivateChannelRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  recipient_id: z.nullable(z.string()).optional(),
  access_tokens: z.nullable(z.array(z.string())).optional(),
  nicks: z.nullable(z.record(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "recipient_id": "recipientId",
    "access_tokens": "accessTokens",
  });
});

/** @internal */
export type CreatePrivateChannelRequest$Outbound = {
  recipient_id?: string | null | undefined;
  access_tokens?: Array<string> | null | undefined;
  nicks?: { [k: string]: string } | null | undefined;
};

/** @internal */
export const CreatePrivateChannelRequest$outboundSchema: z.ZodType<
  CreatePrivateChannelRequest$Outbound,
  z.ZodTypeDef,
  CreatePrivateChannelRequest
> = z.object({
  recipientId: z.nullable(z.string()).optional(),
  accessTokens: z.nullable(z.array(z.string())).optional(),
  nicks: z.nullable(z.record(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    recipientId: "recipient_id",
    accessTokens: "access_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePrivateChannelRequest$ {
  /** @deprecated use `CreatePrivateChannelRequest$inboundSchema` instead. */
  export const inboundSchema = CreatePrivateChannelRequest$inboundSchema;
  /** @deprecated use `CreatePrivateChannelRequest$outboundSchema` instead. */
  export const outboundSchema = CreatePrivateChannelRequest$outboundSchema;
  /** @deprecated use `CreatePrivateChannelRequest$Outbound` instead. */
  export type Outbound = CreatePrivateChannelRequest$Outbound;
}

export function createPrivateChannelRequestToJSON(
  createPrivateChannelRequest: CreatePrivateChannelRequest,
): string {
  return JSON.stringify(
    CreatePrivateChannelRequest$outboundSchema.parse(
      createPrivateChannelRequest,
    ),
  );
}

export function createPrivateChannelRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreatePrivateChannelRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePrivateChannelRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePrivateChannelRequest' from JSON`,
  );
}
