/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  ApplicationCommandOptionStringChoice,
  ApplicationCommandOptionStringChoice$inboundSchema,
  ApplicationCommandOptionStringChoice$Outbound,
  ApplicationCommandOptionStringChoice$outboundSchema,
} from "./applicationcommandoptionstringchoice.js";

export type ApplicationCommandStringOption = {
  type?: 1 | undefined;
  name: string;
  nameLocalizations?: { [k: string]: string } | null | undefined;
  description: string;
  descriptionLocalizations?: { [k: string]: string } | null | undefined;
  required?: boolean | null | undefined;
  autocomplete?: boolean | null | undefined;
  minLength?: number | null | undefined;
  maxLength?: number | null | undefined;
  choices?: Array<ApplicationCommandOptionStringChoice> | null | undefined;
};

/** @internal */
export const ApplicationCommandStringOption$inboundSchema: z.ZodType<
  ApplicationCommandStringOption,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal(1).optional(),
  name: z.string(),
  name_localizations: z.nullable(z.record(z.string())).optional(),
  description: z.string(),
  description_localizations: z.nullable(z.record(z.string())).optional(),
  required: z.nullable(z.boolean()).optional(),
  autocomplete: z.nullable(z.boolean()).optional(),
  min_length: z.nullable(z.number().int()).optional(),
  max_length: z.nullable(z.number().int()).optional(),
  choices: z.nullable(
    z.array(ApplicationCommandOptionStringChoice$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "name_localizations": "nameLocalizations",
    "description_localizations": "descriptionLocalizations",
    "min_length": "minLength",
    "max_length": "maxLength",
  });
});

/** @internal */
export type ApplicationCommandStringOption$Outbound = {
  type: 1;
  name: string;
  name_localizations?: { [k: string]: string } | null | undefined;
  description: string;
  description_localizations?: { [k: string]: string } | null | undefined;
  required?: boolean | null | undefined;
  autocomplete?: boolean | null | undefined;
  min_length?: number | null | undefined;
  max_length?: number | null | undefined;
  choices?:
    | Array<ApplicationCommandOptionStringChoice$Outbound>
    | null
    | undefined;
};

/** @internal */
export const ApplicationCommandStringOption$outboundSchema: z.ZodType<
  ApplicationCommandStringOption$Outbound,
  z.ZodTypeDef,
  ApplicationCommandStringOption
> = z.object({
  type: z.literal(1).default(1 as const),
  name: z.string(),
  nameLocalizations: z.nullable(z.record(z.string())).optional(),
  description: z.string(),
  descriptionLocalizations: z.nullable(z.record(z.string())).optional(),
  required: z.nullable(z.boolean()).optional(),
  autocomplete: z.nullable(z.boolean()).optional(),
  minLength: z.nullable(z.number().int()).optional(),
  maxLength: z.nullable(z.number().int()).optional(),
  choices: z.nullable(
    z.array(ApplicationCommandOptionStringChoice$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    nameLocalizations: "name_localizations",
    descriptionLocalizations: "description_localizations",
    minLength: "min_length",
    maxLength: "max_length",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationCommandStringOption$ {
  /** @deprecated use `ApplicationCommandStringOption$inboundSchema` instead. */
  export const inboundSchema = ApplicationCommandStringOption$inboundSchema;
  /** @deprecated use `ApplicationCommandStringOption$outboundSchema` instead. */
  export const outboundSchema = ApplicationCommandStringOption$outboundSchema;
  /** @deprecated use `ApplicationCommandStringOption$Outbound` instead. */
  export type Outbound = ApplicationCommandStringOption$Outbound;
}
