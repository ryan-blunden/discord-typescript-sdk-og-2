/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  GithubUser,
  GithubUser$inboundSchema,
  GithubUser$Outbound,
  GithubUser$outboundSchema,
} from "./githubuser.js";

export type GithubComment = {
  id: number;
  htmlUrl: string;
  user: GithubUser;
  commitId?: string | null | undefined;
  body: string;
};

/** @internal */
export const GithubComment$inboundSchema: z.ZodType<
  GithubComment,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  html_url: z.string(),
  user: GithubUser$inboundSchema,
  commit_id: z.nullable(z.string()).optional(),
  body: z.string(),
}).transform((v) => {
  return remap$(v, {
    "html_url": "htmlUrl",
    "commit_id": "commitId",
  });
});

/** @internal */
export type GithubComment$Outbound = {
  id: number;
  html_url: string;
  user: GithubUser$Outbound;
  commit_id?: string | null | undefined;
  body: string;
};

/** @internal */
export const GithubComment$outboundSchema: z.ZodType<
  GithubComment$Outbound,
  z.ZodTypeDef,
  GithubComment
> = z.object({
  id: z.number().int(),
  htmlUrl: z.string(),
  user: GithubUser$outboundSchema,
  commitId: z.nullable(z.string()).optional(),
  body: z.string(),
}).transform((v) => {
  return remap$(v, {
    htmlUrl: "html_url",
    commitId: "commit_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubComment$ {
  /** @deprecated use `GithubComment$inboundSchema` instead. */
  export const inboundSchema = GithubComment$inboundSchema;
  /** @deprecated use `GithubComment$outboundSchema` instead. */
  export const outboundSchema = GithubComment$outboundSchema;
  /** @deprecated use `GithubComment$Outbound` instead. */
  export type Outbound = GithubComment$Outbound;
}
