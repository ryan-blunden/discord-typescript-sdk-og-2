/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GuildProductPurchaseResponse = {
  listingId: string;
  productName: string;
};

/** @internal */
export const GuildProductPurchaseResponse$inboundSchema: z.ZodType<
  GuildProductPurchaseResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  listing_id: z.string(),
  product_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "listing_id": "listingId",
    "product_name": "productName",
  });
});

/** @internal */
export type GuildProductPurchaseResponse$Outbound = {
  listing_id: string;
  product_name: string;
};

/** @internal */
export const GuildProductPurchaseResponse$outboundSchema: z.ZodType<
  GuildProductPurchaseResponse$Outbound,
  z.ZodTypeDef,
  GuildProductPurchaseResponse
> = z.object({
  listingId: z.string(),
  productName: z.string(),
}).transform((v) => {
  return remap$(v, {
    listingId: "listing_id",
    productName: "product_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GuildProductPurchaseResponse$ {
  /** @deprecated use `GuildProductPurchaseResponse$inboundSchema` instead. */
  export const inboundSchema = GuildProductPurchaseResponse$inboundSchema;
  /** @deprecated use `GuildProductPurchaseResponse$outboundSchema` instead. */
  export const outboundSchema = GuildProductPurchaseResponse$outboundSchema;
  /** @deprecated use `GuildProductPurchaseResponse$Outbound` instead. */
  export type Outbound = GuildProductPurchaseResponse$Outbound;
}

export function guildProductPurchaseResponseToJSON(
  guildProductPurchaseResponse: GuildProductPurchaseResponse,
): string {
  return JSON.stringify(
    GuildProductPurchaseResponse$outboundSchema.parse(
      guildProductPurchaseResponse,
    ),
  );
}

export function guildProductPurchaseResponseFromJSON(
  jsonString: string,
): SafeParseResult<GuildProductPurchaseResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GuildProductPurchaseResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GuildProductPurchaseResponse' from JSON`,
  );
}
