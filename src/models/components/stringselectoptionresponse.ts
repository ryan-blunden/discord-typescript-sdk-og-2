/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ComponentEmojiResponse,
  ComponentEmojiResponse$inboundSchema,
  ComponentEmojiResponse$Outbound,
  ComponentEmojiResponse$outboundSchema,
} from "./componentemojiresponse.js";

export type StringSelectOptionResponse = {
  label: string;
  value: string;
  description?: string | null | undefined;
  emoji?: ComponentEmojiResponse | null | undefined;
  default?: boolean | null | undefined;
};

/** @internal */
export const StringSelectOptionResponse$inboundSchema: z.ZodType<
  StringSelectOptionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
  value: z.string(),
  description: z.nullable(z.string()).optional(),
  emoji: z.nullable(ComponentEmojiResponse$inboundSchema).optional(),
  default: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type StringSelectOptionResponse$Outbound = {
  label: string;
  value: string;
  description?: string | null | undefined;
  emoji?: ComponentEmojiResponse$Outbound | null | undefined;
  default?: boolean | null | undefined;
};

/** @internal */
export const StringSelectOptionResponse$outboundSchema: z.ZodType<
  StringSelectOptionResponse$Outbound,
  z.ZodTypeDef,
  StringSelectOptionResponse
> = z.object({
  label: z.string(),
  value: z.string(),
  description: z.nullable(z.string()).optional(),
  emoji: z.nullable(ComponentEmojiResponse$outboundSchema).optional(),
  default: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StringSelectOptionResponse$ {
  /** @deprecated use `StringSelectOptionResponse$inboundSchema` instead. */
  export const inboundSchema = StringSelectOptionResponse$inboundSchema;
  /** @deprecated use `StringSelectOptionResponse$outboundSchema` instead. */
  export const outboundSchema = StringSelectOptionResponse$outboundSchema;
  /** @deprecated use `StringSelectOptionResponse$Outbound` instead. */
  export type Outbound = StringSelectOptionResponse$Outbound;
}

export function stringSelectOptionResponseToJSON(
  stringSelectOptionResponse: StringSelectOptionResponse,
): string {
  return JSON.stringify(
    StringSelectOptionResponse$outboundSchema.parse(stringSelectOptionResponse),
  );
}

export function stringSelectOptionResponseFromJSON(
  jsonString: string,
): SafeParseResult<StringSelectOptionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StringSelectOptionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StringSelectOptionResponse' from JSON`,
  );
}
