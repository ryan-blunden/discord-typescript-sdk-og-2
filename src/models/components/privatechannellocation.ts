/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PrivateChannelLocation = {
  id: string;
  kind?: "gc" | undefined;
  channelId: string;
};

/** @internal */
export const PrivateChannelLocation$inboundSchema: z.ZodType<
  PrivateChannelLocation,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  kind: z.literal("gc").optional(),
  channel_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "channel_id": "channelId",
  });
});

/** @internal */
export type PrivateChannelLocation$Outbound = {
  id: string;
  kind: "gc";
  channel_id: string;
};

/** @internal */
export const PrivateChannelLocation$outboundSchema: z.ZodType<
  PrivateChannelLocation$Outbound,
  z.ZodTypeDef,
  PrivateChannelLocation
> = z.object({
  id: z.string(),
  kind: z.literal("gc").default("gc" as const),
  channelId: z.string(),
}).transform((v) => {
  return remap$(v, {
    channelId: "channel_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrivateChannelLocation$ {
  /** @deprecated use `PrivateChannelLocation$inboundSchema` instead. */
  export const inboundSchema = PrivateChannelLocation$inboundSchema;
  /** @deprecated use `PrivateChannelLocation$outboundSchema` instead. */
  export const outboundSchema = PrivateChannelLocation$outboundSchema;
  /** @deprecated use `PrivateChannelLocation$Outbound` instead. */
  export type Outbound = PrivateChannelLocation$Outbound;
}

export function privateChannelLocationToJSON(
  privateChannelLocation: PrivateChannelLocation,
): string {
  return JSON.stringify(
    PrivateChannelLocation$outboundSchema.parse(privateChannelLocation),
  );
}

export function privateChannelLocationFromJSON(
  jsonString: string,
): SafeParseResult<PrivateChannelLocation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrivateChannelLocation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrivateChannelLocation' from JSON`,
  );
}
