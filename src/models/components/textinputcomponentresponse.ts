/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TextInputComponentResponse = {
  type?: 1 | undefined;
  id: number;
  customId: string;
  style?: 1 | undefined;
  label?: string | null | undefined;
  value?: string | null | undefined;
  placeholder?: string | null | undefined;
  required?: boolean | null | undefined;
  minLength?: number | null | undefined;
  maxLength?: number | null | undefined;
};

/** @internal */
export const TextInputComponentResponse$inboundSchema: z.ZodType<
  TextInputComponentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal(1).optional(),
  id: z.number().int(),
  custom_id: z.string(),
  style: z.literal(1).optional(),
  label: z.nullable(z.string()).optional(),
  value: z.nullable(z.string()).optional(),
  placeholder: z.nullable(z.string()).optional(),
  required: z.nullable(z.boolean()).optional(),
  min_length: z.nullable(z.number().int()).optional(),
  max_length: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_id": "customId",
    "min_length": "minLength",
    "max_length": "maxLength",
  });
});

/** @internal */
export type TextInputComponentResponse$Outbound = {
  type: 1;
  id: number;
  custom_id: string;
  style: 1;
  label?: string | null | undefined;
  value?: string | null | undefined;
  placeholder?: string | null | undefined;
  required?: boolean | null | undefined;
  min_length?: number | null | undefined;
  max_length?: number | null | undefined;
};

/** @internal */
export const TextInputComponentResponse$outboundSchema: z.ZodType<
  TextInputComponentResponse$Outbound,
  z.ZodTypeDef,
  TextInputComponentResponse
> = z.object({
  type: z.literal(1).default(1 as const),
  id: z.number().int(),
  customId: z.string(),
  style: z.literal(1).default(1 as const),
  label: z.nullable(z.string()).optional(),
  value: z.nullable(z.string()).optional(),
  placeholder: z.nullable(z.string()).optional(),
  required: z.nullable(z.boolean()).optional(),
  minLength: z.nullable(z.number().int()).optional(),
  maxLength: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    customId: "custom_id",
    minLength: "min_length",
    maxLength: "max_length",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TextInputComponentResponse$ {
  /** @deprecated use `TextInputComponentResponse$inboundSchema` instead. */
  export const inboundSchema = TextInputComponentResponse$inboundSchema;
  /** @deprecated use `TextInputComponentResponse$outboundSchema` instead. */
  export const outboundSchema = TextInputComponentResponse$outboundSchema;
  /** @deprecated use `TextInputComponentResponse$Outbound` instead. */
  export type Outbound = TextInputComponentResponse$Outbound;
}

export function textInputComponentResponseToJSON(
  textInputComponentResponse: TextInputComponentResponse,
): string {
  return JSON.stringify(
    TextInputComponentResponse$outboundSchema.parse(textInputComponentResponse),
  );
}

export function textInputComponentResponseFromJSON(
  jsonString: string,
): SafeParseResult<TextInputComponentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TextInputComponentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TextInputComponentResponse' from JSON`,
  );
}
