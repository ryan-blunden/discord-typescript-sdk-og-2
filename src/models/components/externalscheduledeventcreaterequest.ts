/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EntityMetadataExternal,
  EntityMetadataExternal$inboundSchema,
  EntityMetadataExternal$Outbound,
  EntityMetadataExternal$outboundSchema,
} from "./entitymetadataexternal.js";

export type ExternalScheduledEventCreateRequest = {
  name: string;
  description?: string | null | undefined;
  image?: string | null | undefined;
  scheduledStartTime: Date;
  scheduledEndTime?: Date | null | undefined;
  privacyLevel?: 2 | undefined;
  entityType?: 0 | undefined;
  channelId?: string | null | undefined;
  entityMetadata: EntityMetadataExternal;
};

/** @internal */
export const ExternalScheduledEventCreateRequest$inboundSchema: z.ZodType<
  ExternalScheduledEventCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  scheduled_start_time: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  scheduled_end_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  privacy_level: z.literal(2).optional(),
  entity_type: z.literal(0).optional(),
  channel_id: z.nullable(z.string()).optional(),
  entity_metadata: EntityMetadataExternal$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "scheduled_start_time": "scheduledStartTime",
    "scheduled_end_time": "scheduledEndTime",
    "privacy_level": "privacyLevel",
    "entity_type": "entityType",
    "channel_id": "channelId",
    "entity_metadata": "entityMetadata",
  });
});

/** @internal */
export type ExternalScheduledEventCreateRequest$Outbound = {
  name: string;
  description?: string | null | undefined;
  image?: string | null | undefined;
  scheduled_start_time: string;
  scheduled_end_time?: string | null | undefined;
  privacy_level: 2;
  entity_type: 0;
  channel_id?: string | null | undefined;
  entity_metadata: EntityMetadataExternal$Outbound;
};

/** @internal */
export const ExternalScheduledEventCreateRequest$outboundSchema: z.ZodType<
  ExternalScheduledEventCreateRequest$Outbound,
  z.ZodTypeDef,
  ExternalScheduledEventCreateRequest
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  scheduledStartTime: z.date().transform(v => v.toISOString()),
  scheduledEndTime: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  privacyLevel: z.literal(2).default(2 as const),
  entityType: z.literal(0).default(0 as const),
  channelId: z.nullable(z.string()).optional(),
  entityMetadata: EntityMetadataExternal$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    scheduledStartTime: "scheduled_start_time",
    scheduledEndTime: "scheduled_end_time",
    privacyLevel: "privacy_level",
    entityType: "entity_type",
    channelId: "channel_id",
    entityMetadata: "entity_metadata",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalScheduledEventCreateRequest$ {
  /** @deprecated use `ExternalScheduledEventCreateRequest$inboundSchema` instead. */
  export const inboundSchema =
    ExternalScheduledEventCreateRequest$inboundSchema;
  /** @deprecated use `ExternalScheduledEventCreateRequest$outboundSchema` instead. */
  export const outboundSchema =
    ExternalScheduledEventCreateRequest$outboundSchema;
  /** @deprecated use `ExternalScheduledEventCreateRequest$Outbound` instead. */
  export type Outbound = ExternalScheduledEventCreateRequest$Outbound;
}

export function externalScheduledEventCreateRequestToJSON(
  externalScheduledEventCreateRequest: ExternalScheduledEventCreateRequest,
): string {
  return JSON.stringify(
    ExternalScheduledEventCreateRequest$outboundSchema.parse(
      externalScheduledEventCreateRequest,
    ),
  );
}

export function externalScheduledEventCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<ExternalScheduledEventCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ExternalScheduledEventCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExternalScheduledEventCreateRequest' from JSON`,
  );
}
