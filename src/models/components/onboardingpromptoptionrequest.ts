/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OnboardingPromptOptionRequest = {
  id?: string | null | undefined;
  title: string;
  description?: string | null | undefined;
  emojiId?: string | null | undefined;
  emojiName?: string | null | undefined;
  emojiAnimated?: boolean | null | undefined;
  roleIds?: Array<string> | null | undefined;
  channelIds?: Array<string> | null | undefined;
};

/** @internal */
export const OnboardingPromptOptionRequest$inboundSchema: z.ZodType<
  OnboardingPromptOptionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  title: z.string(),
  description: z.nullable(z.string()).optional(),
  emoji_id: z.nullable(z.string()).optional(),
  emoji_name: z.nullable(z.string()).optional(),
  emoji_animated: z.nullable(z.boolean()).optional(),
  role_ids: z.nullable(z.array(z.string())).optional(),
  channel_ids: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "emoji_id": "emojiId",
    "emoji_name": "emojiName",
    "emoji_animated": "emojiAnimated",
    "role_ids": "roleIds",
    "channel_ids": "channelIds",
  });
});

/** @internal */
export type OnboardingPromptOptionRequest$Outbound = {
  id?: string | null | undefined;
  title: string;
  description?: string | null | undefined;
  emoji_id?: string | null | undefined;
  emoji_name?: string | null | undefined;
  emoji_animated?: boolean | null | undefined;
  role_ids?: Array<string> | null | undefined;
  channel_ids?: Array<string> | null | undefined;
};

/** @internal */
export const OnboardingPromptOptionRequest$outboundSchema: z.ZodType<
  OnboardingPromptOptionRequest$Outbound,
  z.ZodTypeDef,
  OnboardingPromptOptionRequest
> = z.object({
  id: z.nullable(z.string()).optional(),
  title: z.string(),
  description: z.nullable(z.string()).optional(),
  emojiId: z.nullable(z.string()).optional(),
  emojiName: z.nullable(z.string()).optional(),
  emojiAnimated: z.nullable(z.boolean()).optional(),
  roleIds: z.nullable(z.array(z.string())).optional(),
  channelIds: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    emojiId: "emoji_id",
    emojiName: "emoji_name",
    emojiAnimated: "emoji_animated",
    roleIds: "role_ids",
    channelIds: "channel_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OnboardingPromptOptionRequest$ {
  /** @deprecated use `OnboardingPromptOptionRequest$inboundSchema` instead. */
  export const inboundSchema = OnboardingPromptOptionRequest$inboundSchema;
  /** @deprecated use `OnboardingPromptOptionRequest$outboundSchema` instead. */
  export const outboundSchema = OnboardingPromptOptionRequest$outboundSchema;
  /** @deprecated use `OnboardingPromptOptionRequest$Outbound` instead. */
  export type Outbound = OnboardingPromptOptionRequest$Outbound;
}

export function onboardingPromptOptionRequestToJSON(
  onboardingPromptOptionRequest: OnboardingPromptOptionRequest,
): string {
  return JSON.stringify(
    OnboardingPromptOptionRequest$outboundSchema.parse(
      onboardingPromptOptionRequest,
    ),
  );
}

export function onboardingPromptOptionRequestFromJSON(
  jsonString: string,
): SafeParseResult<OnboardingPromptOptionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OnboardingPromptOptionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OnboardingPromptOptionRequest' from JSON`,
  );
}
