/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RoleSelectDefaultValueResponse,
  RoleSelectDefaultValueResponse$inboundSchema,
  RoleSelectDefaultValueResponse$Outbound,
  RoleSelectDefaultValueResponse$outboundSchema,
} from "./roleselectdefaultvalueresponse.js";

export type RoleSelectComponentResponse = {
  type?: 1 | undefined;
  id: number;
  customId: string;
  placeholder?: string | null | undefined;
  minValues?: number | null | undefined;
  maxValues?: number | null | undefined;
  disabled?: boolean | null | undefined;
  defaultValues?: Array<RoleSelectDefaultValueResponse> | null | undefined;
};

/** @internal */
export const RoleSelectComponentResponse$inboundSchema: z.ZodType<
  RoleSelectComponentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal(1).optional(),
  id: z.number().int(),
  custom_id: z.string(),
  placeholder: z.nullable(z.string()).optional(),
  min_values: z.nullable(z.number().int()).optional(),
  max_values: z.nullable(z.number().int()).optional(),
  disabled: z.nullable(z.boolean()).optional(),
  default_values: z.nullable(
    z.array(RoleSelectDefaultValueResponse$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_id": "customId",
    "min_values": "minValues",
    "max_values": "maxValues",
    "default_values": "defaultValues",
  });
});

/** @internal */
export type RoleSelectComponentResponse$Outbound = {
  type: 1;
  id: number;
  custom_id: string;
  placeholder?: string | null | undefined;
  min_values?: number | null | undefined;
  max_values?: number | null | undefined;
  disabled?: boolean | null | undefined;
  default_values?:
    | Array<RoleSelectDefaultValueResponse$Outbound>
    | null
    | undefined;
};

/** @internal */
export const RoleSelectComponentResponse$outboundSchema: z.ZodType<
  RoleSelectComponentResponse$Outbound,
  z.ZodTypeDef,
  RoleSelectComponentResponse
> = z.object({
  type: z.literal(1).default(1 as const),
  id: z.number().int(),
  customId: z.string(),
  placeholder: z.nullable(z.string()).optional(),
  minValues: z.nullable(z.number().int()).optional(),
  maxValues: z.nullable(z.number().int()).optional(),
  disabled: z.nullable(z.boolean()).optional(),
  defaultValues: z.nullable(
    z.array(RoleSelectDefaultValueResponse$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    customId: "custom_id",
    minValues: "min_values",
    maxValues: "max_values",
    defaultValues: "default_values",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleSelectComponentResponse$ {
  /** @deprecated use `RoleSelectComponentResponse$inboundSchema` instead. */
  export const inboundSchema = RoleSelectComponentResponse$inboundSchema;
  /** @deprecated use `RoleSelectComponentResponse$outboundSchema` instead. */
  export const outboundSchema = RoleSelectComponentResponse$outboundSchema;
  /** @deprecated use `RoleSelectComponentResponse$Outbound` instead. */
  export type Outbound = RoleSelectComponentResponse$Outbound;
}

export function roleSelectComponentResponseToJSON(
  roleSelectComponentResponse: RoleSelectComponentResponse,
): string {
  return JSON.stringify(
    RoleSelectComponentResponse$outboundSchema.parse(
      roleSelectComponentResponse,
    ),
  );
}

export function roleSelectComponentResponseFromJSON(
  jsonString: string,
): SafeParseResult<RoleSelectComponentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RoleSelectComponentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RoleSelectComponentResponse' from JSON`,
  );
}
