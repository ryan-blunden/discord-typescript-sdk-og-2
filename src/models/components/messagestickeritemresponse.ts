/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MessageStickerItemResponse = {
  id: string;
  name: string;
  formatType?: 1 | undefined;
};

/** @internal */
export const MessageStickerItemResponse$inboundSchema: z.ZodType<
  MessageStickerItemResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  format_type: z.literal(1).optional(),
}).transform((v) => {
  return remap$(v, {
    "format_type": "formatType",
  });
});

/** @internal */
export type MessageStickerItemResponse$Outbound = {
  id: string;
  name: string;
  format_type: 1;
};

/** @internal */
export const MessageStickerItemResponse$outboundSchema: z.ZodType<
  MessageStickerItemResponse$Outbound,
  z.ZodTypeDef,
  MessageStickerItemResponse
> = z.object({
  id: z.string(),
  name: z.string(),
  formatType: z.literal(1).default(1 as const),
}).transform((v) => {
  return remap$(v, {
    formatType: "format_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageStickerItemResponse$ {
  /** @deprecated use `MessageStickerItemResponse$inboundSchema` instead. */
  export const inboundSchema = MessageStickerItemResponse$inboundSchema;
  /** @deprecated use `MessageStickerItemResponse$outboundSchema` instead. */
  export const outboundSchema = MessageStickerItemResponse$outboundSchema;
  /** @deprecated use `MessageStickerItemResponse$Outbound` instead. */
  export type Outbound = MessageStickerItemResponse$Outbound;
}

export function messageStickerItemResponseToJSON(
  messageStickerItemResponse: MessageStickerItemResponse,
): string {
  return JSON.stringify(
    MessageStickerItemResponse$outboundSchema.parse(messageStickerItemResponse),
  );
}

export function messageStickerItemResponseFromJSON(
  jsonString: string,
): SafeParseResult<MessageStickerItemResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageStickerItemResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageStickerItemResponse' from JSON`,
  );
}
