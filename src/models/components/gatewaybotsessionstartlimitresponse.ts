/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type GatewayBotSessionStartLimitResponse = {
  maxConcurrency: number;
  remaining: number;
  resetAfter: number;
  total: number;
};

/** @internal */
export const GatewayBotSessionStartLimitResponse$inboundSchema: z.ZodType<
  GatewayBotSessionStartLimitResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  max_concurrency: z.number().int(),
  remaining: z.number().int(),
  reset_after: z.number().int(),
  total: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "max_concurrency": "maxConcurrency",
    "reset_after": "resetAfter",
  });
});

/** @internal */
export type GatewayBotSessionStartLimitResponse$Outbound = {
  max_concurrency: number;
  remaining: number;
  reset_after: number;
  total: number;
};

/** @internal */
export const GatewayBotSessionStartLimitResponse$outboundSchema: z.ZodType<
  GatewayBotSessionStartLimitResponse$Outbound,
  z.ZodTypeDef,
  GatewayBotSessionStartLimitResponse
> = z.object({
  maxConcurrency: z.number().int(),
  remaining: z.number().int(),
  resetAfter: z.number().int(),
  total: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrency: "max_concurrency",
    resetAfter: "reset_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GatewayBotSessionStartLimitResponse$ {
  /** @deprecated use `GatewayBotSessionStartLimitResponse$inboundSchema` instead. */
  export const inboundSchema =
    GatewayBotSessionStartLimitResponse$inboundSchema;
  /** @deprecated use `GatewayBotSessionStartLimitResponse$outboundSchema` instead. */
  export const outboundSchema =
    GatewayBotSessionStartLimitResponse$outboundSchema;
  /** @deprecated use `GatewayBotSessionStartLimitResponse$Outbound` instead. */
  export type Outbound = GatewayBotSessionStartLimitResponse$Outbound;
}
