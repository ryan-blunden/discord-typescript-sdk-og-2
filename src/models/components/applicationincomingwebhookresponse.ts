/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserResponse,
  UserResponse$inboundSchema,
  UserResponse$Outbound,
  UserResponse$outboundSchema,
} from "./userresponse.js";

export type ApplicationIncomingWebhookResponse = {
  applicationId?: string | null | undefined;
  avatar?: string | null | undefined;
  channelId?: string | null | undefined;
  guildId?: string | null | undefined;
  id: string;
  name: string;
  type?: 1 | undefined;
  user?: UserResponse | null | undefined;
};

/** @internal */
export const ApplicationIncomingWebhookResponse$inboundSchema: z.ZodType<
  ApplicationIncomingWebhookResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  application_id: z.nullable(z.string()).optional(),
  avatar: z.nullable(z.string()).optional(),
  channel_id: z.nullable(z.string()).optional(),
  guild_id: z.nullable(z.string()).optional(),
  id: z.string(),
  name: z.string(),
  type: z.literal(1).optional(),
  user: z.nullable(UserResponse$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "application_id": "applicationId",
    "channel_id": "channelId",
    "guild_id": "guildId",
  });
});

/** @internal */
export type ApplicationIncomingWebhookResponse$Outbound = {
  application_id?: string | null | undefined;
  avatar?: string | null | undefined;
  channel_id?: string | null | undefined;
  guild_id?: string | null | undefined;
  id: string;
  name: string;
  type: 1;
  user?: UserResponse$Outbound | null | undefined;
};

/** @internal */
export const ApplicationIncomingWebhookResponse$outboundSchema: z.ZodType<
  ApplicationIncomingWebhookResponse$Outbound,
  z.ZodTypeDef,
  ApplicationIncomingWebhookResponse
> = z.object({
  applicationId: z.nullable(z.string()).optional(),
  avatar: z.nullable(z.string()).optional(),
  channelId: z.nullable(z.string()).optional(),
  guildId: z.nullable(z.string()).optional(),
  id: z.string(),
  name: z.string(),
  type: z.literal(1).default(1 as const),
  user: z.nullable(UserResponse$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    applicationId: "application_id",
    channelId: "channel_id",
    guildId: "guild_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationIncomingWebhookResponse$ {
  /** @deprecated use `ApplicationIncomingWebhookResponse$inboundSchema` instead. */
  export const inboundSchema = ApplicationIncomingWebhookResponse$inboundSchema;
  /** @deprecated use `ApplicationIncomingWebhookResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationIncomingWebhookResponse$outboundSchema;
  /** @deprecated use `ApplicationIncomingWebhookResponse$Outbound` instead. */
  export type Outbound = ApplicationIncomingWebhookResponse$Outbound;
}

export function applicationIncomingWebhookResponseToJSON(
  applicationIncomingWebhookResponse: ApplicationIncomingWebhookResponse,
): string {
  return JSON.stringify(
    ApplicationIncomingWebhookResponse$outboundSchema.parse(
      applicationIncomingWebhookResponse,
    ),
  );
}

export function applicationIncomingWebhookResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationIncomingWebhookResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationIncomingWebhookResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationIncomingWebhookResponse' from JSON`,
  );
}
