/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type AuditLogObjectChangeResponse = {
  key?: string | null | undefined;
  newValue?: any | undefined;
  oldValue?: any | undefined;
};

/** @internal */
export const AuditLogObjectChangeResponse$inboundSchema: z.ZodType<
  AuditLogObjectChangeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.nullable(z.string()).optional(),
  new_value: z.any().optional(),
  old_value: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "new_value": "newValue",
    "old_value": "oldValue",
  });
});

/** @internal */
export type AuditLogObjectChangeResponse$Outbound = {
  key?: string | null | undefined;
  new_value?: any | undefined;
  old_value?: any | undefined;
};

/** @internal */
export const AuditLogObjectChangeResponse$outboundSchema: z.ZodType<
  AuditLogObjectChangeResponse$Outbound,
  z.ZodTypeDef,
  AuditLogObjectChangeResponse
> = z.object({
  key: z.nullable(z.string()).optional(),
  newValue: z.any().optional(),
  oldValue: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    newValue: "new_value",
    oldValue: "old_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditLogObjectChangeResponse$ {
  /** @deprecated use `AuditLogObjectChangeResponse$inboundSchema` instead. */
  export const inboundSchema = AuditLogObjectChangeResponse$inboundSchema;
  /** @deprecated use `AuditLogObjectChangeResponse$outboundSchema` instead. */
  export const outboundSchema = AuditLogObjectChangeResponse$outboundSchema;
  /** @deprecated use `AuditLogObjectChangeResponse$Outbound` instead. */
  export type Outbound = AuditLogObjectChangeResponse$Outbound;
}
