/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GithubCheckPullRequest = {
  number: number;
};

/** @internal */
export const GithubCheckPullRequest$inboundSchema: z.ZodType<
  GithubCheckPullRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  number: z.number().int(),
});

/** @internal */
export type GithubCheckPullRequest$Outbound = {
  number: number;
};

/** @internal */
export const GithubCheckPullRequest$outboundSchema: z.ZodType<
  GithubCheckPullRequest$Outbound,
  z.ZodTypeDef,
  GithubCheckPullRequest
> = z.object({
  number: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubCheckPullRequest$ {
  /** @deprecated use `GithubCheckPullRequest$inboundSchema` instead. */
  export const inboundSchema = GithubCheckPullRequest$inboundSchema;
  /** @deprecated use `GithubCheckPullRequest$outboundSchema` instead. */
  export const outboundSchema = GithubCheckPullRequest$outboundSchema;
  /** @deprecated use `GithubCheckPullRequest$Outbound` instead. */
  export type Outbound = GithubCheckPullRequest$Outbound;
}

export function githubCheckPullRequestToJSON(
  githubCheckPullRequest: GithubCheckPullRequest,
): string {
  return JSON.stringify(
    GithubCheckPullRequest$outboundSchema.parse(githubCheckPullRequest),
  );
}

export function githubCheckPullRequestFromJSON(
  jsonString: string,
): SafeParseResult<GithubCheckPullRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GithubCheckPullRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GithubCheckPullRequest' from JSON`,
  );
}
