/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  ApplicationCommandOptionIntegerChoiceResponse,
  ApplicationCommandOptionIntegerChoiceResponse$inboundSchema,
  ApplicationCommandOptionIntegerChoiceResponse$Outbound,
  ApplicationCommandOptionIntegerChoiceResponse$outboundSchema,
} from "./applicationcommandoptionintegerchoiceresponse.js";

export type ApplicationCommandIntegerOptionResponse = {
  type?: 1 | undefined;
  name: string;
  nameLocalized?: string | null | undefined;
  nameLocalizations?: { [k: string]: string } | null | undefined;
  description: string;
  descriptionLocalized?: string | null | undefined;
  descriptionLocalizations?: { [k: string]: string } | null | undefined;
  required?: boolean | null | undefined;
  autocomplete?: boolean | null | undefined;
  choices?:
    | Array<ApplicationCommandOptionIntegerChoiceResponse>
    | null
    | undefined;
  minValue?: number | null | undefined;
  maxValue?: number | null | undefined;
};

/** @internal */
export const ApplicationCommandIntegerOptionResponse$inboundSchema: z.ZodType<
  ApplicationCommandIntegerOptionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal(1).optional(),
  name: z.string(),
  name_localized: z.nullable(z.string()).optional(),
  name_localizations: z.nullable(z.record(z.string())).optional(),
  description: z.string(),
  description_localized: z.nullable(z.string()).optional(),
  description_localizations: z.nullable(z.record(z.string())).optional(),
  required: z.nullable(z.boolean()).optional(),
  autocomplete: z.nullable(z.boolean()).optional(),
  choices: z.nullable(
    z.array(ApplicationCommandOptionIntegerChoiceResponse$inboundSchema),
  ).optional(),
  min_value: z.nullable(z.number().int()).optional(),
  max_value: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "name_localized": "nameLocalized",
    "name_localizations": "nameLocalizations",
    "description_localized": "descriptionLocalized",
    "description_localizations": "descriptionLocalizations",
    "min_value": "minValue",
    "max_value": "maxValue",
  });
});

/** @internal */
export type ApplicationCommandIntegerOptionResponse$Outbound = {
  type: 1;
  name: string;
  name_localized?: string | null | undefined;
  name_localizations?: { [k: string]: string } | null | undefined;
  description: string;
  description_localized?: string | null | undefined;
  description_localizations?: { [k: string]: string } | null | undefined;
  required?: boolean | null | undefined;
  autocomplete?: boolean | null | undefined;
  choices?:
    | Array<ApplicationCommandOptionIntegerChoiceResponse$Outbound>
    | null
    | undefined;
  min_value?: number | null | undefined;
  max_value?: number | null | undefined;
};

/** @internal */
export const ApplicationCommandIntegerOptionResponse$outboundSchema: z.ZodType<
  ApplicationCommandIntegerOptionResponse$Outbound,
  z.ZodTypeDef,
  ApplicationCommandIntegerOptionResponse
> = z.object({
  type: z.literal(1).default(1 as const),
  name: z.string(),
  nameLocalized: z.nullable(z.string()).optional(),
  nameLocalizations: z.nullable(z.record(z.string())).optional(),
  description: z.string(),
  descriptionLocalized: z.nullable(z.string()).optional(),
  descriptionLocalizations: z.nullable(z.record(z.string())).optional(),
  required: z.nullable(z.boolean()).optional(),
  autocomplete: z.nullable(z.boolean()).optional(),
  choices: z.nullable(
    z.array(ApplicationCommandOptionIntegerChoiceResponse$outboundSchema),
  ).optional(),
  minValue: z.nullable(z.number().int()).optional(),
  maxValue: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    nameLocalized: "name_localized",
    nameLocalizations: "name_localizations",
    descriptionLocalized: "description_localized",
    descriptionLocalizations: "description_localizations",
    minValue: "min_value",
    maxValue: "max_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationCommandIntegerOptionResponse$ {
  /** @deprecated use `ApplicationCommandIntegerOptionResponse$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationCommandIntegerOptionResponse$inboundSchema;
  /** @deprecated use `ApplicationCommandIntegerOptionResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationCommandIntegerOptionResponse$outboundSchema;
  /** @deprecated use `ApplicationCommandIntegerOptionResponse$Outbound` instead. */
  export type Outbound = ApplicationCommandIntegerOptionResponse$Outbound;
}
