/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PollAnswerCreateRequest,
  PollAnswerCreateRequest$inboundSchema,
  PollAnswerCreateRequest$Outbound,
  PollAnswerCreateRequest$outboundSchema,
} from "./pollanswercreaterequest.js";
import {
  PollMedia,
  PollMedia$inboundSchema,
  PollMedia$Outbound,
  PollMedia$outboundSchema,
} from "./pollmedia.js";

export type PollCreateRequest = {
  question: PollMedia;
  answers: Array<PollAnswerCreateRequest>;
  allowMultiselect?: boolean | null | undefined;
  layoutType?: number | null | undefined;
  duration?: number | null | undefined;
};

/** @internal */
export const PollCreateRequest$inboundSchema: z.ZodType<
  PollCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  question: PollMedia$inboundSchema,
  answers: z.array(PollAnswerCreateRequest$inboundSchema),
  allow_multiselect: z.nullable(z.boolean()).optional(),
  layout_type: z.nullable(z.number().int()).optional(),
  duration: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "allow_multiselect": "allowMultiselect",
    "layout_type": "layoutType",
  });
});

/** @internal */
export type PollCreateRequest$Outbound = {
  question: PollMedia$Outbound;
  answers: Array<PollAnswerCreateRequest$Outbound>;
  allow_multiselect?: boolean | null | undefined;
  layout_type?: number | null | undefined;
  duration?: number | null | undefined;
};

/** @internal */
export const PollCreateRequest$outboundSchema: z.ZodType<
  PollCreateRequest$Outbound,
  z.ZodTypeDef,
  PollCreateRequest
> = z.object({
  question: PollMedia$outboundSchema,
  answers: z.array(PollAnswerCreateRequest$outboundSchema),
  allowMultiselect: z.nullable(z.boolean()).optional(),
  layoutType: z.nullable(z.number().int()).optional(),
  duration: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    allowMultiselect: "allow_multiselect",
    layoutType: "layout_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PollCreateRequest$ {
  /** @deprecated use `PollCreateRequest$inboundSchema` instead. */
  export const inboundSchema = PollCreateRequest$inboundSchema;
  /** @deprecated use `PollCreateRequest$outboundSchema` instead. */
  export const outboundSchema = PollCreateRequest$outboundSchema;
  /** @deprecated use `PollCreateRequest$Outbound` instead. */
  export type Outbound = PollCreateRequest$Outbound;
}

export function pollCreateRequestToJSON(
  pollCreateRequest: PollCreateRequest,
): string {
  return JSON.stringify(
    PollCreateRequest$outboundSchema.parse(pollCreateRequest),
  );
}

export function pollCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<PollCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PollCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PollCreateRequest' from JSON`,
  );
}
