/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ApplicationOAuth2InstallParams = {
  scopes?: Array<string> | null | undefined;
  permissions?: number | null | undefined;
};

/** @internal */
export const ApplicationOAuth2InstallParams$inboundSchema: z.ZodType<
  ApplicationOAuth2InstallParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  scopes: z.nullable(z.array(z.string())).optional(),
  permissions: z.nullable(z.number().int()).optional(),
});

/** @internal */
export type ApplicationOAuth2InstallParams$Outbound = {
  scopes?: Array<string> | null | undefined;
  permissions?: number | null | undefined;
};

/** @internal */
export const ApplicationOAuth2InstallParams$outboundSchema: z.ZodType<
  ApplicationOAuth2InstallParams$Outbound,
  z.ZodTypeDef,
  ApplicationOAuth2InstallParams
> = z.object({
  scopes: z.nullable(z.array(z.string())).optional(),
  permissions: z.nullable(z.number().int()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOAuth2InstallParams$ {
  /** @deprecated use `ApplicationOAuth2InstallParams$inboundSchema` instead. */
  export const inboundSchema = ApplicationOAuth2InstallParams$inboundSchema;
  /** @deprecated use `ApplicationOAuth2InstallParams$outboundSchema` instead. */
  export const outboundSchema = ApplicationOAuth2InstallParams$outboundSchema;
  /** @deprecated use `ApplicationOAuth2InstallParams$Outbound` instead. */
  export type Outbound = ApplicationOAuth2InstallParams$Outbound;
}

export function applicationOAuth2InstallParamsToJSON(
  applicationOAuth2InstallParams: ApplicationOAuth2InstallParams,
): string {
  return JSON.stringify(
    ApplicationOAuth2InstallParams$outboundSchema.parse(
      applicationOAuth2InstallParams,
    ),
  );
}

export function applicationOAuth2InstallParamsFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOAuth2InstallParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOAuth2InstallParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOAuth2InstallParams' from JSON`,
  );
}
