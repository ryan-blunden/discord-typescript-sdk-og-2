/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IncludeRoles = string | Array<string>;

export type PruneGuildRequestBody = {
  days?: number | null | undefined;
  computePruneCount?: boolean | null | undefined;
  includeRoles?: string | Array<string> | null | undefined;
};

export type PruneGuildRequest = {
  guildId: string;
  requestBody: PruneGuildRequestBody;
};

/** @internal */
export const IncludeRoles$inboundSchema: z.ZodType<
  IncludeRoles,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type IncludeRoles$Outbound = string | Array<string>;

/** @internal */
export const IncludeRoles$outboundSchema: z.ZodType<
  IncludeRoles$Outbound,
  z.ZodTypeDef,
  IncludeRoles
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncludeRoles$ {
  /** @deprecated use `IncludeRoles$inboundSchema` instead. */
  export const inboundSchema = IncludeRoles$inboundSchema;
  /** @deprecated use `IncludeRoles$outboundSchema` instead. */
  export const outboundSchema = IncludeRoles$outboundSchema;
  /** @deprecated use `IncludeRoles$Outbound` instead. */
  export type Outbound = IncludeRoles$Outbound;
}

export function includeRolesToJSON(includeRoles: IncludeRoles): string {
  return JSON.stringify(IncludeRoles$outboundSchema.parse(includeRoles));
}

export function includeRolesFromJSON(
  jsonString: string,
): SafeParseResult<IncludeRoles, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncludeRoles$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncludeRoles' from JSON`,
  );
}

/** @internal */
export const PruneGuildRequestBody$inboundSchema: z.ZodType<
  PruneGuildRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  days: z.nullable(z.number().int()).optional(),
  compute_prune_count: z.nullable(z.boolean()).optional(),
  include_roles: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "compute_prune_count": "computePruneCount",
    "include_roles": "includeRoles",
  });
});

/** @internal */
export type PruneGuildRequestBody$Outbound = {
  days?: number | null | undefined;
  compute_prune_count?: boolean | null | undefined;
  include_roles?: string | Array<string> | null | undefined;
};

/** @internal */
export const PruneGuildRequestBody$outboundSchema: z.ZodType<
  PruneGuildRequestBody$Outbound,
  z.ZodTypeDef,
  PruneGuildRequestBody
> = z.object({
  days: z.nullable(z.number().int()).optional(),
  computePruneCount: z.nullable(z.boolean()).optional(),
  includeRoles: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    computePruneCount: "compute_prune_count",
    includeRoles: "include_roles",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PruneGuildRequestBody$ {
  /** @deprecated use `PruneGuildRequestBody$inboundSchema` instead. */
  export const inboundSchema = PruneGuildRequestBody$inboundSchema;
  /** @deprecated use `PruneGuildRequestBody$outboundSchema` instead. */
  export const outboundSchema = PruneGuildRequestBody$outboundSchema;
  /** @deprecated use `PruneGuildRequestBody$Outbound` instead. */
  export type Outbound = PruneGuildRequestBody$Outbound;
}

export function pruneGuildRequestBodyToJSON(
  pruneGuildRequestBody: PruneGuildRequestBody,
): string {
  return JSON.stringify(
    PruneGuildRequestBody$outboundSchema.parse(pruneGuildRequestBody),
  );
}

export function pruneGuildRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PruneGuildRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PruneGuildRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PruneGuildRequestBody' from JSON`,
  );
}

/** @internal */
export const PruneGuildRequest$inboundSchema: z.ZodType<
  PruneGuildRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  guild_id: z.string(),
  RequestBody: z.lazy(() => PruneGuildRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "guild_id": "guildId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PruneGuildRequest$Outbound = {
  guild_id: string;
  RequestBody: PruneGuildRequestBody$Outbound;
};

/** @internal */
export const PruneGuildRequest$outboundSchema: z.ZodType<
  PruneGuildRequest$Outbound,
  z.ZodTypeDef,
  PruneGuildRequest
> = z.object({
  guildId: z.string(),
  requestBody: z.lazy(() => PruneGuildRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    guildId: "guild_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PruneGuildRequest$ {
  /** @deprecated use `PruneGuildRequest$inboundSchema` instead. */
  export const inboundSchema = PruneGuildRequest$inboundSchema;
  /** @deprecated use `PruneGuildRequest$outboundSchema` instead. */
  export const outboundSchema = PruneGuildRequest$outboundSchema;
  /** @deprecated use `PruneGuildRequest$Outbound` instead. */
  export type Outbound = PruneGuildRequest$Outbound;
}

export function pruneGuildRequestToJSON(
  pruneGuildRequest: PruneGuildRequest,
): string {
  return JSON.stringify(
    PruneGuildRequest$outboundSchema.parse(pruneGuildRequest),
  );
}

export function pruneGuildRequestFromJSON(
  jsonString: string,
): SafeParseResult<PruneGuildRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PruneGuildRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PruneGuildRequest' from JSON`,
  );
}
