/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateGuildMemberRequestBody = {
  nick?: string | null | undefined;
  roles?: Array<string> | null | undefined;
  mute?: boolean | null | undefined;
  deaf?: boolean | null | undefined;
  channelId?: string | null | undefined;
  communicationDisabledUntil?: Date | null | undefined;
  flags?: number | null | undefined;
};

export type UpdateGuildMemberRequest = {
  guildId: string;
  userId: string;
  requestBody: UpdateGuildMemberRequestBody;
};

/** @internal */
export const UpdateGuildMemberRequestBody$inboundSchema: z.ZodType<
  UpdateGuildMemberRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  nick: z.nullable(z.string()).optional(),
  roles: z.nullable(z.array(z.string())).optional(),
  mute: z.nullable(z.boolean()).optional(),
  deaf: z.nullable(z.boolean()).optional(),
  channel_id: z.nullable(z.string()).optional(),
  communication_disabled_until: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  flags: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "channel_id": "channelId",
    "communication_disabled_until": "communicationDisabledUntil",
  });
});

/** @internal */
export type UpdateGuildMemberRequestBody$Outbound = {
  nick?: string | null | undefined;
  roles?: Array<string> | null | undefined;
  mute?: boolean | null | undefined;
  deaf?: boolean | null | undefined;
  channel_id?: string | null | undefined;
  communication_disabled_until?: string | null | undefined;
  flags?: number | null | undefined;
};

/** @internal */
export const UpdateGuildMemberRequestBody$outboundSchema: z.ZodType<
  UpdateGuildMemberRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateGuildMemberRequestBody
> = z.object({
  nick: z.nullable(z.string()).optional(),
  roles: z.nullable(z.array(z.string())).optional(),
  mute: z.nullable(z.boolean()).optional(),
  deaf: z.nullable(z.boolean()).optional(),
  channelId: z.nullable(z.string()).optional(),
  communicationDisabledUntil: z.nullable(
    z.date().transform(v => v.toISOString()),
  ).optional(),
  flags: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    channelId: "channel_id",
    communicationDisabledUntil: "communication_disabled_until",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGuildMemberRequestBody$ {
  /** @deprecated use `UpdateGuildMemberRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateGuildMemberRequestBody$inboundSchema;
  /** @deprecated use `UpdateGuildMemberRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateGuildMemberRequestBody$outboundSchema;
  /** @deprecated use `UpdateGuildMemberRequestBody$Outbound` instead. */
  export type Outbound = UpdateGuildMemberRequestBody$Outbound;
}

export function updateGuildMemberRequestBodyToJSON(
  updateGuildMemberRequestBody: UpdateGuildMemberRequestBody,
): string {
  return JSON.stringify(
    UpdateGuildMemberRequestBody$outboundSchema.parse(
      updateGuildMemberRequestBody,
    ),
  );
}

export function updateGuildMemberRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateGuildMemberRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateGuildMemberRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateGuildMemberRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateGuildMemberRequest$inboundSchema: z.ZodType<
  UpdateGuildMemberRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  guild_id: z.string(),
  user_id: z.string(),
  RequestBody: z.lazy(() => UpdateGuildMemberRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "guild_id": "guildId",
    "user_id": "userId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateGuildMemberRequest$Outbound = {
  guild_id: string;
  user_id: string;
  RequestBody: UpdateGuildMemberRequestBody$Outbound;
};

/** @internal */
export const UpdateGuildMemberRequest$outboundSchema: z.ZodType<
  UpdateGuildMemberRequest$Outbound,
  z.ZodTypeDef,
  UpdateGuildMemberRequest
> = z.object({
  guildId: z.string(),
  userId: z.string(),
  requestBody: z.lazy(() => UpdateGuildMemberRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    guildId: "guild_id",
    userId: "user_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGuildMemberRequest$ {
  /** @deprecated use `UpdateGuildMemberRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateGuildMemberRequest$inboundSchema;
  /** @deprecated use `UpdateGuildMemberRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateGuildMemberRequest$outboundSchema;
  /** @deprecated use `UpdateGuildMemberRequest$Outbound` instead. */
  export type Outbound = UpdateGuildMemberRequest$Outbound;
}

export function updateGuildMemberRequestToJSON(
  updateGuildMemberRequest: UpdateGuildMemberRequest,
): string {
  return JSON.stringify(
    UpdateGuildMemberRequest$outboundSchema.parse(updateGuildMemberRequest),
  );
}

export function updateGuildMemberRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateGuildMemberRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateGuildMemberRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateGuildMemberRequest' from JSON`,
  );
}
