/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateOriginalWebhookMessageFormSecurity = {
  botToken?: string | undefined;
};

export type UpdateOriginalWebhookMessageFormRequest = {
  webhookId: string;
  webhookToken: string;
  threadId?: string | undefined;
  withComponents?: boolean | undefined;
  incomingWebhookUpdateRequestPartial:
    components.IncomingWebhookUpdateRequestPartial;
};

/** @internal */
export const UpdateOriginalWebhookMessageFormSecurity$inboundSchema: z.ZodType<
  UpdateOriginalWebhookMessageFormSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BotToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BotToken": "botToken",
  });
});

/** @internal */
export type UpdateOriginalWebhookMessageFormSecurity$Outbound = {
  BotToken?: string | undefined;
};

/** @internal */
export const UpdateOriginalWebhookMessageFormSecurity$outboundSchema: z.ZodType<
  UpdateOriginalWebhookMessageFormSecurity$Outbound,
  z.ZodTypeDef,
  UpdateOriginalWebhookMessageFormSecurity
> = z.object({
  botToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    botToken: "BotToken",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOriginalWebhookMessageFormSecurity$ {
  /** @deprecated use `UpdateOriginalWebhookMessageFormSecurity$inboundSchema` instead. */
  export const inboundSchema =
    UpdateOriginalWebhookMessageFormSecurity$inboundSchema;
  /** @deprecated use `UpdateOriginalWebhookMessageFormSecurity$outboundSchema` instead. */
  export const outboundSchema =
    UpdateOriginalWebhookMessageFormSecurity$outboundSchema;
  /** @deprecated use `UpdateOriginalWebhookMessageFormSecurity$Outbound` instead. */
  export type Outbound = UpdateOriginalWebhookMessageFormSecurity$Outbound;
}

export function updateOriginalWebhookMessageFormSecurityToJSON(
  updateOriginalWebhookMessageFormSecurity:
    UpdateOriginalWebhookMessageFormSecurity,
): string {
  return JSON.stringify(
    UpdateOriginalWebhookMessageFormSecurity$outboundSchema.parse(
      updateOriginalWebhookMessageFormSecurity,
    ),
  );
}

export function updateOriginalWebhookMessageFormSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateOriginalWebhookMessageFormSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateOriginalWebhookMessageFormSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateOriginalWebhookMessageFormSecurity' from JSON`,
  );
}

/** @internal */
export const UpdateOriginalWebhookMessageFormRequest$inboundSchema: z.ZodType<
  UpdateOriginalWebhookMessageFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  webhook_id: z.string(),
  webhook_token: z.string(),
  thread_id: z.string().optional(),
  with_components: z.boolean().optional(),
  IncomingWebhookUpdateRequestPartial:
    components.IncomingWebhookUpdateRequestPartial$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "webhook_id": "webhookId",
    "webhook_token": "webhookToken",
    "thread_id": "threadId",
    "with_components": "withComponents",
    "IncomingWebhookUpdateRequestPartial":
      "incomingWebhookUpdateRequestPartial",
  });
});

/** @internal */
export type UpdateOriginalWebhookMessageFormRequest$Outbound = {
  webhook_id: string;
  webhook_token: string;
  thread_id?: string | undefined;
  with_components?: boolean | undefined;
  IncomingWebhookUpdateRequestPartial:
    components.IncomingWebhookUpdateRequestPartial$Outbound;
};

/** @internal */
export const UpdateOriginalWebhookMessageFormRequest$outboundSchema: z.ZodType<
  UpdateOriginalWebhookMessageFormRequest$Outbound,
  z.ZodTypeDef,
  UpdateOriginalWebhookMessageFormRequest
> = z.object({
  webhookId: z.string(),
  webhookToken: z.string(),
  threadId: z.string().optional(),
  withComponents: z.boolean().optional(),
  incomingWebhookUpdateRequestPartial:
    components.IncomingWebhookUpdateRequestPartial$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    webhookId: "webhook_id",
    webhookToken: "webhook_token",
    threadId: "thread_id",
    withComponents: "with_components",
    incomingWebhookUpdateRequestPartial: "IncomingWebhookUpdateRequestPartial",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOriginalWebhookMessageFormRequest$ {
  /** @deprecated use `UpdateOriginalWebhookMessageFormRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateOriginalWebhookMessageFormRequest$inboundSchema;
  /** @deprecated use `UpdateOriginalWebhookMessageFormRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateOriginalWebhookMessageFormRequest$outboundSchema;
  /** @deprecated use `UpdateOriginalWebhookMessageFormRequest$Outbound` instead. */
  export type Outbound = UpdateOriginalWebhookMessageFormRequest$Outbound;
}

export function updateOriginalWebhookMessageFormRequestToJSON(
  updateOriginalWebhookMessageFormRequest:
    UpdateOriginalWebhookMessageFormRequest,
): string {
  return JSON.stringify(
    UpdateOriginalWebhookMessageFormRequest$outboundSchema.parse(
      updateOriginalWebhookMessageFormRequest,
    ),
  );
}

export function updateOriginalWebhookMessageFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateOriginalWebhookMessageFormRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateOriginalWebhookMessageFormRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateOriginalWebhookMessageFormRequest' from JSON`,
  );
}
