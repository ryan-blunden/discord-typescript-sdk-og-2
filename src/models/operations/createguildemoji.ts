/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateGuildEmojiRequestBody = {
  name: string;
  image: string;
  roles?: Array<string> | null | undefined;
};

export type CreateGuildEmojiRequest = {
  guildId: string;
  requestBody: CreateGuildEmojiRequestBody;
};

/** @internal */
export const CreateGuildEmojiRequestBody$inboundSchema: z.ZodType<
  CreateGuildEmojiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  image: z.string(),
  roles: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type CreateGuildEmojiRequestBody$Outbound = {
  name: string;
  image: string;
  roles?: Array<string> | null | undefined;
};

/** @internal */
export const CreateGuildEmojiRequestBody$outboundSchema: z.ZodType<
  CreateGuildEmojiRequestBody$Outbound,
  z.ZodTypeDef,
  CreateGuildEmojiRequestBody
> = z.object({
  name: z.string(),
  image: z.string(),
  roles: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateGuildEmojiRequestBody$ {
  /** @deprecated use `CreateGuildEmojiRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateGuildEmojiRequestBody$inboundSchema;
  /** @deprecated use `CreateGuildEmojiRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateGuildEmojiRequestBody$outboundSchema;
  /** @deprecated use `CreateGuildEmojiRequestBody$Outbound` instead. */
  export type Outbound = CreateGuildEmojiRequestBody$Outbound;
}

export function createGuildEmojiRequestBodyToJSON(
  createGuildEmojiRequestBody: CreateGuildEmojiRequestBody,
): string {
  return JSON.stringify(
    CreateGuildEmojiRequestBody$outboundSchema.parse(
      createGuildEmojiRequestBody,
    ),
  );
}

export function createGuildEmojiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateGuildEmojiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateGuildEmojiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateGuildEmojiRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateGuildEmojiRequest$inboundSchema: z.ZodType<
  CreateGuildEmojiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  guild_id: z.string(),
  RequestBody: z.lazy(() => CreateGuildEmojiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "guild_id": "guildId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateGuildEmojiRequest$Outbound = {
  guild_id: string;
  RequestBody: CreateGuildEmojiRequestBody$Outbound;
};

/** @internal */
export const CreateGuildEmojiRequest$outboundSchema: z.ZodType<
  CreateGuildEmojiRequest$Outbound,
  z.ZodTypeDef,
  CreateGuildEmojiRequest
> = z.object({
  guildId: z.string(),
  requestBody: z.lazy(() => CreateGuildEmojiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    guildId: "guild_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateGuildEmojiRequest$ {
  /** @deprecated use `CreateGuildEmojiRequest$inboundSchema` instead. */
  export const inboundSchema = CreateGuildEmojiRequest$inboundSchema;
  /** @deprecated use `CreateGuildEmojiRequest$outboundSchema` instead. */
  export const outboundSchema = CreateGuildEmojiRequest$outboundSchema;
  /** @deprecated use `CreateGuildEmojiRequest$Outbound` instead. */
  export type Outbound = CreateGuildEmojiRequest$Outbound;
}

export function createGuildEmojiRequestToJSON(
  createGuildEmojiRequest: CreateGuildEmojiRequest,
): string {
  return JSON.stringify(
    CreateGuildEmojiRequest$outboundSchema.parse(createGuildEmojiRequest),
  );
}

export function createGuildEmojiRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateGuildEmojiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateGuildEmojiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateGuildEmojiRequest' from JSON`,
  );
}
