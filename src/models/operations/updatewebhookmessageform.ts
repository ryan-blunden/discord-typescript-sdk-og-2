/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateWebhookMessageFormSecurity = {
  botToken?: string | undefined;
};

export type UpdateWebhookMessageFormRequest = {
  webhookId: string;
  webhookToken: string;
  messageId: string;
  threadId?: string | undefined;
  incomingWebhookUpdateRequestPartial:
    components.IncomingWebhookUpdateRequestPartial;
};

/** @internal */
export const UpdateWebhookMessageFormSecurity$inboundSchema: z.ZodType<
  UpdateWebhookMessageFormSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BotToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BotToken": "botToken",
  });
});

/** @internal */
export type UpdateWebhookMessageFormSecurity$Outbound = {
  BotToken?: string | undefined;
};

/** @internal */
export const UpdateWebhookMessageFormSecurity$outboundSchema: z.ZodType<
  UpdateWebhookMessageFormSecurity$Outbound,
  z.ZodTypeDef,
  UpdateWebhookMessageFormSecurity
> = z.object({
  botToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    botToken: "BotToken",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookMessageFormSecurity$ {
  /** @deprecated use `UpdateWebhookMessageFormSecurity$inboundSchema` instead. */
  export const inboundSchema = UpdateWebhookMessageFormSecurity$inboundSchema;
  /** @deprecated use `UpdateWebhookMessageFormSecurity$outboundSchema` instead. */
  export const outboundSchema = UpdateWebhookMessageFormSecurity$outboundSchema;
  /** @deprecated use `UpdateWebhookMessageFormSecurity$Outbound` instead. */
  export type Outbound = UpdateWebhookMessageFormSecurity$Outbound;
}

export function updateWebhookMessageFormSecurityToJSON(
  updateWebhookMessageFormSecurity: UpdateWebhookMessageFormSecurity,
): string {
  return JSON.stringify(
    UpdateWebhookMessageFormSecurity$outboundSchema.parse(
      updateWebhookMessageFormSecurity,
    ),
  );
}

export function updateWebhookMessageFormSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWebhookMessageFormSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateWebhookMessageFormSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWebhookMessageFormSecurity' from JSON`,
  );
}

/** @internal */
export const UpdateWebhookMessageFormRequest$inboundSchema: z.ZodType<
  UpdateWebhookMessageFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  webhook_id: z.string(),
  webhook_token: z.string(),
  message_id: z.string(),
  thread_id: z.string().optional(),
  IncomingWebhookUpdateRequestPartial:
    components.IncomingWebhookUpdateRequestPartial$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "webhook_id": "webhookId",
    "webhook_token": "webhookToken",
    "message_id": "messageId",
    "thread_id": "threadId",
    "IncomingWebhookUpdateRequestPartial":
      "incomingWebhookUpdateRequestPartial",
  });
});

/** @internal */
export type UpdateWebhookMessageFormRequest$Outbound = {
  webhook_id: string;
  webhook_token: string;
  message_id: string;
  thread_id?: string | undefined;
  IncomingWebhookUpdateRequestPartial:
    components.IncomingWebhookUpdateRequestPartial$Outbound;
};

/** @internal */
export const UpdateWebhookMessageFormRequest$outboundSchema: z.ZodType<
  UpdateWebhookMessageFormRequest$Outbound,
  z.ZodTypeDef,
  UpdateWebhookMessageFormRequest
> = z.object({
  webhookId: z.string(),
  webhookToken: z.string(),
  messageId: z.string(),
  threadId: z.string().optional(),
  incomingWebhookUpdateRequestPartial:
    components.IncomingWebhookUpdateRequestPartial$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    webhookId: "webhook_id",
    webhookToken: "webhook_token",
    messageId: "message_id",
    threadId: "thread_id",
    incomingWebhookUpdateRequestPartial: "IncomingWebhookUpdateRequestPartial",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookMessageFormRequest$ {
  /** @deprecated use `UpdateWebhookMessageFormRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateWebhookMessageFormRequest$inboundSchema;
  /** @deprecated use `UpdateWebhookMessageFormRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateWebhookMessageFormRequest$outboundSchema;
  /** @deprecated use `UpdateWebhookMessageFormRequest$Outbound` instead. */
  export type Outbound = UpdateWebhookMessageFormRequest$Outbound;
}

export function updateWebhookMessageFormRequestToJSON(
  updateWebhookMessageFormRequest: UpdateWebhookMessageFormRequest,
): string {
  return JSON.stringify(
    UpdateWebhookMessageFormRequest$outboundSchema.parse(
      updateWebhookMessageFormRequest,
    ),
  );
}

export function updateWebhookMessageFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWebhookMessageFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateWebhookMessageFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWebhookMessageFormRequest' from JSON`,
  );
}
