/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateGuildEmojiRequestBody = {
  name?: string | undefined;
  roles?: Array<string> | null | undefined;
};

export type UpdateGuildEmojiRequest = {
  guildId: string;
  emojiId: string;
  requestBody: UpdateGuildEmojiRequestBody;
};

/** @internal */
export const UpdateGuildEmojiRequestBody$inboundSchema: z.ZodType<
  UpdateGuildEmojiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  roles: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type UpdateGuildEmojiRequestBody$Outbound = {
  name?: string | undefined;
  roles?: Array<string> | null | undefined;
};

/** @internal */
export const UpdateGuildEmojiRequestBody$outboundSchema: z.ZodType<
  UpdateGuildEmojiRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateGuildEmojiRequestBody
> = z.object({
  name: z.string().optional(),
  roles: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGuildEmojiRequestBody$ {
  /** @deprecated use `UpdateGuildEmojiRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateGuildEmojiRequestBody$inboundSchema;
  /** @deprecated use `UpdateGuildEmojiRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateGuildEmojiRequestBody$outboundSchema;
  /** @deprecated use `UpdateGuildEmojiRequestBody$Outbound` instead. */
  export type Outbound = UpdateGuildEmojiRequestBody$Outbound;
}

export function updateGuildEmojiRequestBodyToJSON(
  updateGuildEmojiRequestBody: UpdateGuildEmojiRequestBody,
): string {
  return JSON.stringify(
    UpdateGuildEmojiRequestBody$outboundSchema.parse(
      updateGuildEmojiRequestBody,
    ),
  );
}

export function updateGuildEmojiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateGuildEmojiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateGuildEmojiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateGuildEmojiRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateGuildEmojiRequest$inboundSchema: z.ZodType<
  UpdateGuildEmojiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  guild_id: z.string(),
  emoji_id: z.string(),
  RequestBody: z.lazy(() => UpdateGuildEmojiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "guild_id": "guildId",
    "emoji_id": "emojiId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateGuildEmojiRequest$Outbound = {
  guild_id: string;
  emoji_id: string;
  RequestBody: UpdateGuildEmojiRequestBody$Outbound;
};

/** @internal */
export const UpdateGuildEmojiRequest$outboundSchema: z.ZodType<
  UpdateGuildEmojiRequest$Outbound,
  z.ZodTypeDef,
  UpdateGuildEmojiRequest
> = z.object({
  guildId: z.string(),
  emojiId: z.string(),
  requestBody: z.lazy(() => UpdateGuildEmojiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    guildId: "guild_id",
    emojiId: "emoji_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGuildEmojiRequest$ {
  /** @deprecated use `UpdateGuildEmojiRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateGuildEmojiRequest$inboundSchema;
  /** @deprecated use `UpdateGuildEmojiRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateGuildEmojiRequest$outboundSchema;
  /** @deprecated use `UpdateGuildEmojiRequest$Outbound` instead. */
  export type Outbound = UpdateGuildEmojiRequest$Outbound;
}

export function updateGuildEmojiRequestToJSON(
  updateGuildEmojiRequest: UpdateGuildEmojiRequest,
): string {
  return JSON.stringify(
    UpdateGuildEmojiRequest$outboundSchema.parse(updateGuildEmojiRequest),
  );
}

export function updateGuildEmojiRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateGuildEmojiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateGuildEmojiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateGuildEmojiRequest' from JSON`,
  );
}
