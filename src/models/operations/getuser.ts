/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type GetUserRequest = {
  userId: string;
};

/** @internal */
export const GetUserRequest$inboundSchema: z.ZodType<
  GetUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
  });
});

/** @internal */
export type GetUserRequest$Outbound = {
  user_id: string;
};

/** @internal */
export const GetUserRequest$outboundSchema: z.ZodType<
  GetUserRequest$Outbound,
  z.ZodTypeDef,
  GetUserRequest
> = z.object({
  userId: z.string(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserRequest$ {
  /** @deprecated use `GetUserRequest$inboundSchema` instead. */
  export const inboundSchema = GetUserRequest$inboundSchema;
  /** @deprecated use `GetUserRequest$outboundSchema` instead. */
  export const outboundSchema = GetUserRequest$outboundSchema;
  /** @deprecated use `GetUserRequest$Outbound` instead. */
  export type Outbound = GetUserRequest$Outbound;
}
