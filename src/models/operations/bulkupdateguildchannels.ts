/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RequestBody = {
  id?: string | undefined;
  position?: number | null | undefined;
  parentId?: string | null | undefined;
  lockPermissions?: boolean | null | undefined;
};

export type BulkUpdateGuildChannelsRequest = {
  guildId: string;
  requestBody: Array<RequestBody>;
};

/** @internal */
export const RequestBody$inboundSchema: z.ZodType<
  RequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  position: z.nullable(z.number().int()).optional(),
  parent_id: z.nullable(z.string()).optional(),
  lock_permissions: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "parent_id": "parentId",
    "lock_permissions": "lockPermissions",
  });
});

/** @internal */
export type RequestBody$Outbound = {
  id?: string | undefined;
  position?: number | null | undefined;
  parent_id?: string | null | undefined;
  lock_permissions?: boolean | null | undefined;
};

/** @internal */
export const RequestBody$outboundSchema: z.ZodType<
  RequestBody$Outbound,
  z.ZodTypeDef,
  RequestBody
> = z.object({
  id: z.string().optional(),
  position: z.nullable(z.number().int()).optional(),
  parentId: z.nullable(z.string()).optional(),
  lockPermissions: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    parentId: "parent_id",
    lockPermissions: "lock_permissions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBody$ {
  /** @deprecated use `RequestBody$inboundSchema` instead. */
  export const inboundSchema = RequestBody$inboundSchema;
  /** @deprecated use `RequestBody$outboundSchema` instead. */
  export const outboundSchema = RequestBody$outboundSchema;
  /** @deprecated use `RequestBody$Outbound` instead. */
  export type Outbound = RequestBody$Outbound;
}

export function requestBodyToJSON(requestBody: RequestBody): string {
  return JSON.stringify(RequestBody$outboundSchema.parse(requestBody));
}

export function requestBodyFromJSON(
  jsonString: string,
): SafeParseResult<RequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestBody' from JSON`,
  );
}

/** @internal */
export const BulkUpdateGuildChannelsRequest$inboundSchema: z.ZodType<
  BulkUpdateGuildChannelsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  guild_id: z.string(),
  RequestBody: z.array(z.lazy(() => RequestBody$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "guild_id": "guildId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type BulkUpdateGuildChannelsRequest$Outbound = {
  guild_id: string;
  RequestBody: Array<RequestBody$Outbound>;
};

/** @internal */
export const BulkUpdateGuildChannelsRequest$outboundSchema: z.ZodType<
  BulkUpdateGuildChannelsRequest$Outbound,
  z.ZodTypeDef,
  BulkUpdateGuildChannelsRequest
> = z.object({
  guildId: z.string(),
  requestBody: z.array(z.lazy(() => RequestBody$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    guildId: "guild_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkUpdateGuildChannelsRequest$ {
  /** @deprecated use `BulkUpdateGuildChannelsRequest$inboundSchema` instead. */
  export const inboundSchema = BulkUpdateGuildChannelsRequest$inboundSchema;
  /** @deprecated use `BulkUpdateGuildChannelsRequest$outboundSchema` instead. */
  export const outboundSchema = BulkUpdateGuildChannelsRequest$outboundSchema;
  /** @deprecated use `BulkUpdateGuildChannelsRequest$Outbound` instead. */
  export type Outbound = BulkUpdateGuildChannelsRequest$Outbound;
}

export function bulkUpdateGuildChannelsRequestToJSON(
  bulkUpdateGuildChannelsRequest: BulkUpdateGuildChannelsRequest,
): string {
  return JSON.stringify(
    BulkUpdateGuildChannelsRequest$outboundSchema.parse(
      bulkUpdateGuildChannelsRequest,
    ),
  );
}

export function bulkUpdateGuildChannelsRequestFromJSON(
  jsonString: string,
): SafeParseResult<BulkUpdateGuildChannelsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BulkUpdateGuildChannelsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkUpdateGuildChannelsRequest' from JSON`,
  );
}
