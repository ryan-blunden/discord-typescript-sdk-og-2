/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateGuildApplicationCommandSecurity = {
  botToken?: string | undefined;
};

export type CreateGuildApplicationCommandRequest = {
  applicationId: string;
  guildId: string;
  applicationCommandCreateRequest: components.ApplicationCommandCreateRequest;
};

/** @internal */
export const CreateGuildApplicationCommandSecurity$inboundSchema: z.ZodType<
  CreateGuildApplicationCommandSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BotToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BotToken": "botToken",
  });
});

/** @internal */
export type CreateGuildApplicationCommandSecurity$Outbound = {
  BotToken?: string | undefined;
};

/** @internal */
export const CreateGuildApplicationCommandSecurity$outboundSchema: z.ZodType<
  CreateGuildApplicationCommandSecurity$Outbound,
  z.ZodTypeDef,
  CreateGuildApplicationCommandSecurity
> = z.object({
  botToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    botToken: "BotToken",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateGuildApplicationCommandSecurity$ {
  /** @deprecated use `CreateGuildApplicationCommandSecurity$inboundSchema` instead. */
  export const inboundSchema =
    CreateGuildApplicationCommandSecurity$inboundSchema;
  /** @deprecated use `CreateGuildApplicationCommandSecurity$outboundSchema` instead. */
  export const outboundSchema =
    CreateGuildApplicationCommandSecurity$outboundSchema;
  /** @deprecated use `CreateGuildApplicationCommandSecurity$Outbound` instead. */
  export type Outbound = CreateGuildApplicationCommandSecurity$Outbound;
}

export function createGuildApplicationCommandSecurityToJSON(
  createGuildApplicationCommandSecurity: CreateGuildApplicationCommandSecurity,
): string {
  return JSON.stringify(
    CreateGuildApplicationCommandSecurity$outboundSchema.parse(
      createGuildApplicationCommandSecurity,
    ),
  );
}

export function createGuildApplicationCommandSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CreateGuildApplicationCommandSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateGuildApplicationCommandSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateGuildApplicationCommandSecurity' from JSON`,
  );
}

/** @internal */
export const CreateGuildApplicationCommandRequest$inboundSchema: z.ZodType<
  CreateGuildApplicationCommandRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  application_id: z.string(),
  guild_id: z.string(),
  ApplicationCommandCreateRequest:
    components.ApplicationCommandCreateRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "application_id": "applicationId",
    "guild_id": "guildId",
    "ApplicationCommandCreateRequest": "applicationCommandCreateRequest",
  });
});

/** @internal */
export type CreateGuildApplicationCommandRequest$Outbound = {
  application_id: string;
  guild_id: string;
  ApplicationCommandCreateRequest:
    components.ApplicationCommandCreateRequest$Outbound;
};

/** @internal */
export const CreateGuildApplicationCommandRequest$outboundSchema: z.ZodType<
  CreateGuildApplicationCommandRequest$Outbound,
  z.ZodTypeDef,
  CreateGuildApplicationCommandRequest
> = z.object({
  applicationId: z.string(),
  guildId: z.string(),
  applicationCommandCreateRequest:
    components.ApplicationCommandCreateRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    applicationId: "application_id",
    guildId: "guild_id",
    applicationCommandCreateRequest: "ApplicationCommandCreateRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateGuildApplicationCommandRequest$ {
  /** @deprecated use `CreateGuildApplicationCommandRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateGuildApplicationCommandRequest$inboundSchema;
  /** @deprecated use `CreateGuildApplicationCommandRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateGuildApplicationCommandRequest$outboundSchema;
  /** @deprecated use `CreateGuildApplicationCommandRequest$Outbound` instead. */
  export type Outbound = CreateGuildApplicationCommandRequest$Outbound;
}

export function createGuildApplicationCommandRequestToJSON(
  createGuildApplicationCommandRequest: CreateGuildApplicationCommandRequest,
): string {
  return JSON.stringify(
    CreateGuildApplicationCommandRequest$outboundSchema.parse(
      createGuildApplicationCommandRequest,
    ),
  );
}

export function createGuildApplicationCommandRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateGuildApplicationCommandRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateGuildApplicationCommandRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateGuildApplicationCommandRequest' from JSON`,
  );
}
