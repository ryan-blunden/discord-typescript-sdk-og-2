/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListMyConnectionsSecurity = {
  botToken?: string | undefined;
};

/** @internal */
export const ListMyConnectionsSecurity$inboundSchema: z.ZodType<
  ListMyConnectionsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BotToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BotToken": "botToken",
  });
});

/** @internal */
export type ListMyConnectionsSecurity$Outbound = {
  BotToken?: string | undefined;
};

/** @internal */
export const ListMyConnectionsSecurity$outboundSchema: z.ZodType<
  ListMyConnectionsSecurity$Outbound,
  z.ZodTypeDef,
  ListMyConnectionsSecurity
> = z.object({
  botToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    botToken: "BotToken",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMyConnectionsSecurity$ {
  /** @deprecated use `ListMyConnectionsSecurity$inboundSchema` instead. */
  export const inboundSchema = ListMyConnectionsSecurity$inboundSchema;
  /** @deprecated use `ListMyConnectionsSecurity$outboundSchema` instead. */
  export const outboundSchema = ListMyConnectionsSecurity$outboundSchema;
  /** @deprecated use `ListMyConnectionsSecurity$Outbound` instead. */
  export type Outbound = ListMyConnectionsSecurity$Outbound;
}

export function listMyConnectionsSecurityToJSON(
  listMyConnectionsSecurity: ListMyConnectionsSecurity,
): string {
  return JSON.stringify(
    ListMyConnectionsSecurity$outboundSchema.parse(listMyConnectionsSecurity),
  );
}

export function listMyConnectionsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListMyConnectionsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMyConnectionsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMyConnectionsSecurity' from JSON`,
  );
}
