/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SetGuildApplicationCommandPermissionsSecurity = {
  botToken?: string | undefined;
};

export type SetGuildApplicationCommandPermissionsRequestBody = {
  permissions?:
    | Array<components.ApplicationCommandPermission>
    | null
    | undefined;
};

export type SetGuildApplicationCommandPermissionsRequest = {
  applicationId: string;
  guildId: string;
  commandId: string;
  requestBody: SetGuildApplicationCommandPermissionsRequestBody;
};

/** @internal */
export const SetGuildApplicationCommandPermissionsSecurity$inboundSchema:
  z.ZodType<
    SetGuildApplicationCommandPermissionsSecurity,
    z.ZodTypeDef,
    unknown
  > = z.object({
    BotToken: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "BotToken": "botToken",
    });
  });

/** @internal */
export type SetGuildApplicationCommandPermissionsSecurity$Outbound = {
  BotToken?: string | undefined;
};

/** @internal */
export const SetGuildApplicationCommandPermissionsSecurity$outboundSchema:
  z.ZodType<
    SetGuildApplicationCommandPermissionsSecurity$Outbound,
    z.ZodTypeDef,
    SetGuildApplicationCommandPermissionsSecurity
  > = z.object({
    botToken: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      botToken: "BotToken",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetGuildApplicationCommandPermissionsSecurity$ {
  /** @deprecated use `SetGuildApplicationCommandPermissionsSecurity$inboundSchema` instead. */
  export const inboundSchema =
    SetGuildApplicationCommandPermissionsSecurity$inboundSchema;
  /** @deprecated use `SetGuildApplicationCommandPermissionsSecurity$outboundSchema` instead. */
  export const outboundSchema =
    SetGuildApplicationCommandPermissionsSecurity$outboundSchema;
  /** @deprecated use `SetGuildApplicationCommandPermissionsSecurity$Outbound` instead. */
  export type Outbound = SetGuildApplicationCommandPermissionsSecurity$Outbound;
}

export function setGuildApplicationCommandPermissionsSecurityToJSON(
  setGuildApplicationCommandPermissionsSecurity:
    SetGuildApplicationCommandPermissionsSecurity,
): string {
  return JSON.stringify(
    SetGuildApplicationCommandPermissionsSecurity$outboundSchema.parse(
      setGuildApplicationCommandPermissionsSecurity,
    ),
  );
}

export function setGuildApplicationCommandPermissionsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  SetGuildApplicationCommandPermissionsSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SetGuildApplicationCommandPermissionsSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SetGuildApplicationCommandPermissionsSecurity' from JSON`,
  );
}

/** @internal */
export const SetGuildApplicationCommandPermissionsRequestBody$inboundSchema:
  z.ZodType<
    SetGuildApplicationCommandPermissionsRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    permissions: z.nullable(
      z.array(components.ApplicationCommandPermission$inboundSchema),
    ).optional(),
  });

/** @internal */
export type SetGuildApplicationCommandPermissionsRequestBody$Outbound = {
  permissions?:
    | Array<components.ApplicationCommandPermission$Outbound>
    | null
    | undefined;
};

/** @internal */
export const SetGuildApplicationCommandPermissionsRequestBody$outboundSchema:
  z.ZodType<
    SetGuildApplicationCommandPermissionsRequestBody$Outbound,
    z.ZodTypeDef,
    SetGuildApplicationCommandPermissionsRequestBody
  > = z.object({
    permissions: z.nullable(
      z.array(components.ApplicationCommandPermission$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetGuildApplicationCommandPermissionsRequestBody$ {
  /** @deprecated use `SetGuildApplicationCommandPermissionsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    SetGuildApplicationCommandPermissionsRequestBody$inboundSchema;
  /** @deprecated use `SetGuildApplicationCommandPermissionsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    SetGuildApplicationCommandPermissionsRequestBody$outboundSchema;
  /** @deprecated use `SetGuildApplicationCommandPermissionsRequestBody$Outbound` instead. */
  export type Outbound =
    SetGuildApplicationCommandPermissionsRequestBody$Outbound;
}

export function setGuildApplicationCommandPermissionsRequestBodyToJSON(
  setGuildApplicationCommandPermissionsRequestBody:
    SetGuildApplicationCommandPermissionsRequestBody,
): string {
  return JSON.stringify(
    SetGuildApplicationCommandPermissionsRequestBody$outboundSchema.parse(
      setGuildApplicationCommandPermissionsRequestBody,
    ),
  );
}

export function setGuildApplicationCommandPermissionsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  SetGuildApplicationCommandPermissionsRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SetGuildApplicationCommandPermissionsRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SetGuildApplicationCommandPermissionsRequestBody' from JSON`,
  );
}

/** @internal */
export const SetGuildApplicationCommandPermissionsRequest$inboundSchema:
  z.ZodType<
    SetGuildApplicationCommandPermissionsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    application_id: z.string(),
    guild_id: z.string(),
    command_id: z.string(),
    RequestBody: z.lazy(() =>
      SetGuildApplicationCommandPermissionsRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "application_id": "applicationId",
      "guild_id": "guildId",
      "command_id": "commandId",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type SetGuildApplicationCommandPermissionsRequest$Outbound = {
  application_id: string;
  guild_id: string;
  command_id: string;
  RequestBody: SetGuildApplicationCommandPermissionsRequestBody$Outbound;
};

/** @internal */
export const SetGuildApplicationCommandPermissionsRequest$outboundSchema:
  z.ZodType<
    SetGuildApplicationCommandPermissionsRequest$Outbound,
    z.ZodTypeDef,
    SetGuildApplicationCommandPermissionsRequest
  > = z.object({
    applicationId: z.string(),
    guildId: z.string(),
    commandId: z.string(),
    requestBody: z.lazy(() =>
      SetGuildApplicationCommandPermissionsRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      applicationId: "application_id",
      guildId: "guild_id",
      commandId: "command_id",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetGuildApplicationCommandPermissionsRequest$ {
  /** @deprecated use `SetGuildApplicationCommandPermissionsRequest$inboundSchema` instead. */
  export const inboundSchema =
    SetGuildApplicationCommandPermissionsRequest$inboundSchema;
  /** @deprecated use `SetGuildApplicationCommandPermissionsRequest$outboundSchema` instead. */
  export const outboundSchema =
    SetGuildApplicationCommandPermissionsRequest$outboundSchema;
  /** @deprecated use `SetGuildApplicationCommandPermissionsRequest$Outbound` instead. */
  export type Outbound = SetGuildApplicationCommandPermissionsRequest$Outbound;
}

export function setGuildApplicationCommandPermissionsRequestToJSON(
  setGuildApplicationCommandPermissionsRequest:
    SetGuildApplicationCommandPermissionsRequest,
): string {
  return JSON.stringify(
    SetGuildApplicationCommandPermissionsRequest$outboundSchema.parse(
      setGuildApplicationCommandPermissionsRequest,
    ),
  );
}

export function setGuildApplicationCommandPermissionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  SetGuildApplicationCommandPermissionsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SetGuildApplicationCommandPermissionsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SetGuildApplicationCommandPermissionsRequest' from JSON`,
  );
}
