/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateApplicationEmojiRequestBody = {
  name: string;
  image: string;
};

export type CreateApplicationEmojiRequest = {
  applicationId: string;
  requestBody: CreateApplicationEmojiRequestBody;
};

/** @internal */
export const CreateApplicationEmojiRequestBody$inboundSchema: z.ZodType<
  CreateApplicationEmojiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  image: z.string(),
});

/** @internal */
export type CreateApplicationEmojiRequestBody$Outbound = {
  name: string;
  image: string;
};

/** @internal */
export const CreateApplicationEmojiRequestBody$outboundSchema: z.ZodType<
  CreateApplicationEmojiRequestBody$Outbound,
  z.ZodTypeDef,
  CreateApplicationEmojiRequestBody
> = z.object({
  name: z.string(),
  image: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApplicationEmojiRequestBody$ {
  /** @deprecated use `CreateApplicationEmojiRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateApplicationEmojiRequestBody$inboundSchema;
  /** @deprecated use `CreateApplicationEmojiRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateApplicationEmojiRequestBody$outboundSchema;
  /** @deprecated use `CreateApplicationEmojiRequestBody$Outbound` instead. */
  export type Outbound = CreateApplicationEmojiRequestBody$Outbound;
}

export function createApplicationEmojiRequestBodyToJSON(
  createApplicationEmojiRequestBody: CreateApplicationEmojiRequestBody,
): string {
  return JSON.stringify(
    CreateApplicationEmojiRequestBody$outboundSchema.parse(
      createApplicationEmojiRequestBody,
    ),
  );
}

export function createApplicationEmojiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateApplicationEmojiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateApplicationEmojiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApplicationEmojiRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateApplicationEmojiRequest$inboundSchema: z.ZodType<
  CreateApplicationEmojiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  application_id: z.string(),
  RequestBody: z.lazy(() => CreateApplicationEmojiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "application_id": "applicationId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateApplicationEmojiRequest$Outbound = {
  application_id: string;
  RequestBody: CreateApplicationEmojiRequestBody$Outbound;
};

/** @internal */
export const CreateApplicationEmojiRequest$outboundSchema: z.ZodType<
  CreateApplicationEmojiRequest$Outbound,
  z.ZodTypeDef,
  CreateApplicationEmojiRequest
> = z.object({
  applicationId: z.string(),
  requestBody: z.lazy(() => CreateApplicationEmojiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    applicationId: "application_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApplicationEmojiRequest$ {
  /** @deprecated use `CreateApplicationEmojiRequest$inboundSchema` instead. */
  export const inboundSchema = CreateApplicationEmojiRequest$inboundSchema;
  /** @deprecated use `CreateApplicationEmojiRequest$outboundSchema` instead. */
  export const outboundSchema = CreateApplicationEmojiRequest$outboundSchema;
  /** @deprecated use `CreateApplicationEmojiRequest$Outbound` instead. */
  export type Outbound = CreateApplicationEmojiRequest$Outbound;
}

export function createApplicationEmojiRequestToJSON(
  createApplicationEmojiRequest: CreateApplicationEmojiRequest,
): string {
  return JSON.stringify(
    CreateApplicationEmojiRequest$outboundSchema.parse(
      createApplicationEmojiRequest,
    ),
  );
}

export function createApplicationEmojiRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateApplicationEmojiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateApplicationEmojiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApplicationEmojiRequest' from JSON`,
  );
}
