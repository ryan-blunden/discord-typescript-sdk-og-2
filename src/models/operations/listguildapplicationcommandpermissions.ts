/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListGuildApplicationCommandPermissionsSecurity = {
  botToken?: string | undefined;
};

export type ListGuildApplicationCommandPermissionsRequest = {
  applicationId: string;
  guildId: string;
};

/** @internal */
export const ListGuildApplicationCommandPermissionsSecurity$inboundSchema:
  z.ZodType<
    ListGuildApplicationCommandPermissionsSecurity,
    z.ZodTypeDef,
    unknown
  > = z.object({
    BotToken: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "BotToken": "botToken",
    });
  });

/** @internal */
export type ListGuildApplicationCommandPermissionsSecurity$Outbound = {
  BotToken?: string | undefined;
};

/** @internal */
export const ListGuildApplicationCommandPermissionsSecurity$outboundSchema:
  z.ZodType<
    ListGuildApplicationCommandPermissionsSecurity$Outbound,
    z.ZodTypeDef,
    ListGuildApplicationCommandPermissionsSecurity
  > = z.object({
    botToken: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      botToken: "BotToken",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListGuildApplicationCommandPermissionsSecurity$ {
  /** @deprecated use `ListGuildApplicationCommandPermissionsSecurity$inboundSchema` instead. */
  export const inboundSchema =
    ListGuildApplicationCommandPermissionsSecurity$inboundSchema;
  /** @deprecated use `ListGuildApplicationCommandPermissionsSecurity$outboundSchema` instead. */
  export const outboundSchema =
    ListGuildApplicationCommandPermissionsSecurity$outboundSchema;
  /** @deprecated use `ListGuildApplicationCommandPermissionsSecurity$Outbound` instead. */
  export type Outbound =
    ListGuildApplicationCommandPermissionsSecurity$Outbound;
}

export function listGuildApplicationCommandPermissionsSecurityToJSON(
  listGuildApplicationCommandPermissionsSecurity:
    ListGuildApplicationCommandPermissionsSecurity,
): string {
  return JSON.stringify(
    ListGuildApplicationCommandPermissionsSecurity$outboundSchema.parse(
      listGuildApplicationCommandPermissionsSecurity,
    ),
  );
}

export function listGuildApplicationCommandPermissionsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  ListGuildApplicationCommandPermissionsSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListGuildApplicationCommandPermissionsSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListGuildApplicationCommandPermissionsSecurity' from JSON`,
  );
}

/** @internal */
export const ListGuildApplicationCommandPermissionsRequest$inboundSchema:
  z.ZodType<
    ListGuildApplicationCommandPermissionsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    application_id: z.string(),
    guild_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "application_id": "applicationId",
      "guild_id": "guildId",
    });
  });

/** @internal */
export type ListGuildApplicationCommandPermissionsRequest$Outbound = {
  application_id: string;
  guild_id: string;
};

/** @internal */
export const ListGuildApplicationCommandPermissionsRequest$outboundSchema:
  z.ZodType<
    ListGuildApplicationCommandPermissionsRequest$Outbound,
    z.ZodTypeDef,
    ListGuildApplicationCommandPermissionsRequest
  > = z.object({
    applicationId: z.string(),
    guildId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      applicationId: "application_id",
      guildId: "guild_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListGuildApplicationCommandPermissionsRequest$ {
  /** @deprecated use `ListGuildApplicationCommandPermissionsRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListGuildApplicationCommandPermissionsRequest$inboundSchema;
  /** @deprecated use `ListGuildApplicationCommandPermissionsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListGuildApplicationCommandPermissionsRequest$outboundSchema;
  /** @deprecated use `ListGuildApplicationCommandPermissionsRequest$Outbound` instead. */
  export type Outbound = ListGuildApplicationCommandPermissionsRequest$Outbound;
}

export function listGuildApplicationCommandPermissionsRequestToJSON(
  listGuildApplicationCommandPermissionsRequest:
    ListGuildApplicationCommandPermissionsRequest,
): string {
  return JSON.stringify(
    ListGuildApplicationCommandPermissionsRequest$outboundSchema.parse(
      listGuildApplicationCommandPermissionsRequest,
    ),
  );
}

export function listGuildApplicationCommandPermissionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ListGuildApplicationCommandPermissionsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListGuildApplicationCommandPermissionsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListGuildApplicationCommandPermissionsRequest' from JSON`,
  );
}
