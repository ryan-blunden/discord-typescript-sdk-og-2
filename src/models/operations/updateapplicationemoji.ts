/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateApplicationEmojiRequestBody = {
  name?: string | undefined;
};

export type UpdateApplicationEmojiRequest = {
  applicationId: string;
  emojiId: string;
  requestBody: UpdateApplicationEmojiRequestBody;
};

/** @internal */
export const UpdateApplicationEmojiRequestBody$inboundSchema: z.ZodType<
  UpdateApplicationEmojiRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
});

/** @internal */
export type UpdateApplicationEmojiRequestBody$Outbound = {
  name?: string | undefined;
};

/** @internal */
export const UpdateApplicationEmojiRequestBody$outboundSchema: z.ZodType<
  UpdateApplicationEmojiRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateApplicationEmojiRequestBody
> = z.object({
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateApplicationEmojiRequestBody$ {
  /** @deprecated use `UpdateApplicationEmojiRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateApplicationEmojiRequestBody$inboundSchema;
  /** @deprecated use `UpdateApplicationEmojiRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateApplicationEmojiRequestBody$outboundSchema;
  /** @deprecated use `UpdateApplicationEmojiRequestBody$Outbound` instead. */
  export type Outbound = UpdateApplicationEmojiRequestBody$Outbound;
}

export function updateApplicationEmojiRequestBodyToJSON(
  updateApplicationEmojiRequestBody: UpdateApplicationEmojiRequestBody,
): string {
  return JSON.stringify(
    UpdateApplicationEmojiRequestBody$outboundSchema.parse(
      updateApplicationEmojiRequestBody,
    ),
  );
}

export function updateApplicationEmojiRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateApplicationEmojiRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateApplicationEmojiRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateApplicationEmojiRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateApplicationEmojiRequest$inboundSchema: z.ZodType<
  UpdateApplicationEmojiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  application_id: z.string(),
  emoji_id: z.string(),
  RequestBody: z.lazy(() => UpdateApplicationEmojiRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "application_id": "applicationId",
    "emoji_id": "emojiId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateApplicationEmojiRequest$Outbound = {
  application_id: string;
  emoji_id: string;
  RequestBody: UpdateApplicationEmojiRequestBody$Outbound;
};

/** @internal */
export const UpdateApplicationEmojiRequest$outboundSchema: z.ZodType<
  UpdateApplicationEmojiRequest$Outbound,
  z.ZodTypeDef,
  UpdateApplicationEmojiRequest
> = z.object({
  applicationId: z.string(),
  emojiId: z.string(),
  requestBody: z.lazy(() => UpdateApplicationEmojiRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    applicationId: "application_id",
    emojiId: "emoji_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateApplicationEmojiRequest$ {
  /** @deprecated use `UpdateApplicationEmojiRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateApplicationEmojiRequest$inboundSchema;
  /** @deprecated use `UpdateApplicationEmojiRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateApplicationEmojiRequest$outboundSchema;
  /** @deprecated use `UpdateApplicationEmojiRequest$Outbound` instead. */
  export type Outbound = UpdateApplicationEmojiRequest$Outbound;
}

export function updateApplicationEmojiRequestToJSON(
  updateApplicationEmojiRequest: UpdateApplicationEmojiRequest,
): string {
  return JSON.stringify(
    UpdateApplicationEmojiRequest$outboundSchema.parse(
      updateApplicationEmojiRequest,
    ),
  );
}

export function updateApplicationEmojiRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateApplicationEmojiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateApplicationEmojiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateApplicationEmojiRequest' from JSON`,
  );
}
