/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetOriginalWebhookMessageSecurity = {
  botToken?: string | undefined;
};

export type GetOriginalWebhookMessageRequest = {
  webhookId: string;
  webhookToken: string;
  threadId?: string | undefined;
};

/** @internal */
export const GetOriginalWebhookMessageSecurity$inboundSchema: z.ZodType<
  GetOriginalWebhookMessageSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BotToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BotToken": "botToken",
  });
});

/** @internal */
export type GetOriginalWebhookMessageSecurity$Outbound = {
  BotToken?: string | undefined;
};

/** @internal */
export const GetOriginalWebhookMessageSecurity$outboundSchema: z.ZodType<
  GetOriginalWebhookMessageSecurity$Outbound,
  z.ZodTypeDef,
  GetOriginalWebhookMessageSecurity
> = z.object({
  botToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    botToken: "BotToken",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOriginalWebhookMessageSecurity$ {
  /** @deprecated use `GetOriginalWebhookMessageSecurity$inboundSchema` instead. */
  export const inboundSchema = GetOriginalWebhookMessageSecurity$inboundSchema;
  /** @deprecated use `GetOriginalWebhookMessageSecurity$outboundSchema` instead. */
  export const outboundSchema =
    GetOriginalWebhookMessageSecurity$outboundSchema;
  /** @deprecated use `GetOriginalWebhookMessageSecurity$Outbound` instead. */
  export type Outbound = GetOriginalWebhookMessageSecurity$Outbound;
}

export function getOriginalWebhookMessageSecurityToJSON(
  getOriginalWebhookMessageSecurity: GetOriginalWebhookMessageSecurity,
): string {
  return JSON.stringify(
    GetOriginalWebhookMessageSecurity$outboundSchema.parse(
      getOriginalWebhookMessageSecurity,
    ),
  );
}

export function getOriginalWebhookMessageSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetOriginalWebhookMessageSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOriginalWebhookMessageSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOriginalWebhookMessageSecurity' from JSON`,
  );
}

/** @internal */
export const GetOriginalWebhookMessageRequest$inboundSchema: z.ZodType<
  GetOriginalWebhookMessageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  webhook_id: z.string(),
  webhook_token: z.string(),
  thread_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "webhook_id": "webhookId",
    "webhook_token": "webhookToken",
    "thread_id": "threadId",
  });
});

/** @internal */
export type GetOriginalWebhookMessageRequest$Outbound = {
  webhook_id: string;
  webhook_token: string;
  thread_id?: string | undefined;
};

/** @internal */
export const GetOriginalWebhookMessageRequest$outboundSchema: z.ZodType<
  GetOriginalWebhookMessageRequest$Outbound,
  z.ZodTypeDef,
  GetOriginalWebhookMessageRequest
> = z.object({
  webhookId: z.string(),
  webhookToken: z.string(),
  threadId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    webhookId: "webhook_id",
    webhookToken: "webhook_token",
    threadId: "thread_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOriginalWebhookMessageRequest$ {
  /** @deprecated use `GetOriginalWebhookMessageRequest$inboundSchema` instead. */
  export const inboundSchema = GetOriginalWebhookMessageRequest$inboundSchema;
  /** @deprecated use `GetOriginalWebhookMessageRequest$outboundSchema` instead. */
  export const outboundSchema = GetOriginalWebhookMessageRequest$outboundSchema;
  /** @deprecated use `GetOriginalWebhookMessageRequest$Outbound` instead. */
  export type Outbound = GetOriginalWebhookMessageRequest$Outbound;
}

export function getOriginalWebhookMessageRequestToJSON(
  getOriginalWebhookMessageRequest: GetOriginalWebhookMessageRequest,
): string {
  return JSON.stringify(
    GetOriginalWebhookMessageRequest$outboundSchema.parse(
      getOriginalWebhookMessageRequest,
    ),
  );
}

export function getOriginalWebhookMessageRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetOriginalWebhookMessageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOriginalWebhookMessageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOriginalWebhookMessageRequest' from JSON`,
  );
}
