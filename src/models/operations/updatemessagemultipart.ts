/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type UpdateMessageMultipartRequestBody = {
  allowedMentions?: components.MessageAllowedMentionsRequest | null | undefined;
  attachments?: Array<components.MessageAttachmentRequest> | null | undefined;
  components?: Array<components.ActionRow> | null | undefined;
  content?: string | null | undefined;
  embeds?: Array<components.RichEmbed> | null | undefined;
  files0?: string | undefined;
  files1?: string | undefined;
  files2?: string | undefined;
  files3?: string | undefined;
  files4?: string | undefined;
  files5?: string | undefined;
  files6?: string | undefined;
  files7?: string | undefined;
  files8?: string | undefined;
  files9?: string | undefined;
  flags?: number | null | undefined;
  stickerIds?: Array<string> | null | undefined;
};

export type UpdateMessageMultipartRequest = {
  channelId: string;
  messageId: string;
  requestBody: UpdateMessageMultipartRequestBody;
};

/** @internal */
export const UpdateMessageMultipartRequestBody$inboundSchema: z.ZodType<
  UpdateMessageMultipartRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowed_mentions: z.nullable(
    components.MessageAllowedMentionsRequest$inboundSchema,
  ).optional(),
  attachments: z.nullable(
    z.array(components.MessageAttachmentRequest$inboundSchema),
  ).optional(),
  components: z.nullable(z.array(components.ActionRow$inboundSchema))
    .optional(),
  content: z.nullable(z.string()).optional(),
  embeds: z.nullable(z.array(components.RichEmbed$inboundSchema)).optional(),
  "files[0]": z.string().optional(),
  "files[1]": z.string().optional(),
  "files[2]": z.string().optional(),
  "files[3]": z.string().optional(),
  "files[4]": z.string().optional(),
  "files[5]": z.string().optional(),
  "files[6]": z.string().optional(),
  "files[7]": z.string().optional(),
  "files[8]": z.string().optional(),
  "files[9]": z.string().optional(),
  flags: z.nullable(z.number().int()).optional(),
  sticker_ids: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "allowed_mentions": "allowedMentions",
    "files[0]": "files0",
    "files[1]": "files1",
    "files[2]": "files2",
    "files[3]": "files3",
    "files[4]": "files4",
    "files[5]": "files5",
    "files[6]": "files6",
    "files[7]": "files7",
    "files[8]": "files8",
    "files[9]": "files9",
    "sticker_ids": "stickerIds",
  });
});

/** @internal */
export type UpdateMessageMultipartRequestBody$Outbound = {
  allowed_mentions?:
    | components.MessageAllowedMentionsRequest$Outbound
    | null
    | undefined;
  attachments?:
    | Array<components.MessageAttachmentRequest$Outbound>
    | null
    | undefined;
  components?: Array<components.ActionRow$Outbound> | null | undefined;
  content?: string | null | undefined;
  embeds?: Array<components.RichEmbed$Outbound> | null | undefined;
  "files[0]"?: string | undefined;
  "files[1]"?: string | undefined;
  "files[2]"?: string | undefined;
  "files[3]"?: string | undefined;
  "files[4]"?: string | undefined;
  "files[5]"?: string | undefined;
  "files[6]"?: string | undefined;
  "files[7]"?: string | undefined;
  "files[8]"?: string | undefined;
  "files[9]"?: string | undefined;
  flags?: number | null | undefined;
  sticker_ids?: Array<string> | null | undefined;
};

/** @internal */
export const UpdateMessageMultipartRequestBody$outboundSchema: z.ZodType<
  UpdateMessageMultipartRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateMessageMultipartRequestBody
> = z.object({
  allowedMentions: z.nullable(
    components.MessageAllowedMentionsRequest$outboundSchema,
  ).optional(),
  attachments: z.nullable(
    z.array(components.MessageAttachmentRequest$outboundSchema),
  ).optional(),
  components: z.nullable(z.array(components.ActionRow$outboundSchema))
    .optional(),
  content: z.nullable(z.string()).optional(),
  embeds: z.nullable(z.array(components.RichEmbed$outboundSchema)).optional(),
  files0: z.string().optional(),
  files1: z.string().optional(),
  files2: z.string().optional(),
  files3: z.string().optional(),
  files4: z.string().optional(),
  files5: z.string().optional(),
  files6: z.string().optional(),
  files7: z.string().optional(),
  files8: z.string().optional(),
  files9: z.string().optional(),
  flags: z.nullable(z.number().int()).optional(),
  stickerIds: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    allowedMentions: "allowed_mentions",
    files0: "files[0]",
    files1: "files[1]",
    files2: "files[2]",
    files3: "files[3]",
    files4: "files[4]",
    files5: "files[5]",
    files6: "files[6]",
    files7: "files[7]",
    files8: "files[8]",
    files9: "files[9]",
    stickerIds: "sticker_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateMessageMultipartRequestBody$ {
  /** @deprecated use `UpdateMessageMultipartRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateMessageMultipartRequestBody$inboundSchema;
  /** @deprecated use `UpdateMessageMultipartRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateMessageMultipartRequestBody$outboundSchema;
  /** @deprecated use `UpdateMessageMultipartRequestBody$Outbound` instead. */
  export type Outbound = UpdateMessageMultipartRequestBody$Outbound;
}

/** @internal */
export const UpdateMessageMultipartRequest$inboundSchema: z.ZodType<
  UpdateMessageMultipartRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel_id: z.string(),
  message_id: z.string(),
  RequestBody: z.lazy(() => UpdateMessageMultipartRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "channel_id": "channelId",
    "message_id": "messageId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateMessageMultipartRequest$Outbound = {
  channel_id: string;
  message_id: string;
  RequestBody: UpdateMessageMultipartRequestBody$Outbound;
};

/** @internal */
export const UpdateMessageMultipartRequest$outboundSchema: z.ZodType<
  UpdateMessageMultipartRequest$Outbound,
  z.ZodTypeDef,
  UpdateMessageMultipartRequest
> = z.object({
  channelId: z.string(),
  messageId: z.string(),
  requestBody: z.lazy(() => UpdateMessageMultipartRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    channelId: "channel_id",
    messageId: "message_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateMessageMultipartRequest$ {
  /** @deprecated use `UpdateMessageMultipartRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateMessageMultipartRequest$inboundSchema;
  /** @deprecated use `UpdateMessageMultipartRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateMessageMultipartRequest$outboundSchema;
  /** @deprecated use `UpdateMessageMultipartRequest$Outbound` instead. */
  export type Outbound = UpdateMessageMultipartRequest$Outbound;
}
