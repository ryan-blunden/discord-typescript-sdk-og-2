/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetThreadMemberRequest = {
  channelId: string;
  userId: string;
  withMember?: boolean | undefined;
};

/** @internal */
export const GetThreadMemberRequest$inboundSchema: z.ZodType<
  GetThreadMemberRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel_id: z.string(),
  user_id: z.string(),
  with_member: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "channel_id": "channelId",
    "user_id": "userId",
    "with_member": "withMember",
  });
});

/** @internal */
export type GetThreadMemberRequest$Outbound = {
  channel_id: string;
  user_id: string;
  with_member?: boolean | undefined;
};

/** @internal */
export const GetThreadMemberRequest$outboundSchema: z.ZodType<
  GetThreadMemberRequest$Outbound,
  z.ZodTypeDef,
  GetThreadMemberRequest
> = z.object({
  channelId: z.string(),
  userId: z.string(),
  withMember: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    channelId: "channel_id",
    userId: "user_id",
    withMember: "with_member",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetThreadMemberRequest$ {
  /** @deprecated use `GetThreadMemberRequest$inboundSchema` instead. */
  export const inboundSchema = GetThreadMemberRequest$inboundSchema;
  /** @deprecated use `GetThreadMemberRequest$outboundSchema` instead. */
  export const outboundSchema = GetThreadMemberRequest$outboundSchema;
  /** @deprecated use `GetThreadMemberRequest$Outbound` instead. */
  export type Outbound = GetThreadMemberRequest$Outbound;
}

export function getThreadMemberRequestToJSON(
  getThreadMemberRequest: GetThreadMemberRequest,
): string {
  return JSON.stringify(
    GetThreadMemberRequest$outboundSchema.parse(getThreadMemberRequest),
  );
}

export function getThreadMemberRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetThreadMemberRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetThreadMemberRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetThreadMemberRequest' from JSON`,
  );
}
