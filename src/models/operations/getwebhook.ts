/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetWebhookRequest = {
  webhookId: string;
};

/**
 * 200 response for get_webhook
 */
export type GetWebhookResponseBody =
  | components.ApplicationIncomingWebhookResponse
  | components.ChannelFollowerWebhookResponse
  | components.GuildIncomingWebhookResponse;

/** @internal */
export const GetWebhookRequest$inboundSchema: z.ZodType<
  GetWebhookRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  webhook_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "webhook_id": "webhookId",
  });
});

/** @internal */
export type GetWebhookRequest$Outbound = {
  webhook_id: string;
};

/** @internal */
export const GetWebhookRequest$outboundSchema: z.ZodType<
  GetWebhookRequest$Outbound,
  z.ZodTypeDef,
  GetWebhookRequest
> = z.object({
  webhookId: z.string(),
}).transform((v) => {
  return remap$(v, {
    webhookId: "webhook_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookRequest$ {
  /** @deprecated use `GetWebhookRequest$inboundSchema` instead. */
  export const inboundSchema = GetWebhookRequest$inboundSchema;
  /** @deprecated use `GetWebhookRequest$outboundSchema` instead. */
  export const outboundSchema = GetWebhookRequest$outboundSchema;
  /** @deprecated use `GetWebhookRequest$Outbound` instead. */
  export type Outbound = GetWebhookRequest$Outbound;
}

export function getWebhookRequestToJSON(
  getWebhookRequest: GetWebhookRequest,
): string {
  return JSON.stringify(
    GetWebhookRequest$outboundSchema.parse(getWebhookRequest),
  );
}

export function getWebhookRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookRequest' from JSON`,
  );
}

/** @internal */
export const GetWebhookResponseBody$inboundSchema: z.ZodType<
  GetWebhookResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.ApplicationIncomingWebhookResponse$inboundSchema,
  components.ChannelFollowerWebhookResponse$inboundSchema,
  components.GuildIncomingWebhookResponse$inboundSchema,
]);

/** @internal */
export type GetWebhookResponseBody$Outbound =
  | components.ApplicationIncomingWebhookResponse$Outbound
  | components.ChannelFollowerWebhookResponse$Outbound
  | components.GuildIncomingWebhookResponse$Outbound;

/** @internal */
export const GetWebhookResponseBody$outboundSchema: z.ZodType<
  GetWebhookResponseBody$Outbound,
  z.ZodTypeDef,
  GetWebhookResponseBody
> = z.union([
  components.ApplicationIncomingWebhookResponse$outboundSchema,
  components.ChannelFollowerWebhookResponse$outboundSchema,
  components.GuildIncomingWebhookResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookResponseBody$ {
  /** @deprecated use `GetWebhookResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetWebhookResponseBody$inboundSchema;
  /** @deprecated use `GetWebhookResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetWebhookResponseBody$outboundSchema;
  /** @deprecated use `GetWebhookResponseBody$Outbound` instead. */
  export type Outbound = GetWebhookResponseBody$Outbound;
}

export function getWebhookResponseBodyToJSON(
  getWebhookResponseBody: GetWebhookResponseBody,
): string {
  return JSON.stringify(
    GetWebhookResponseBody$outboundSchema.parse(getWebhookResponseBody),
  );
}

export function getWebhookResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookResponseBody' from JSON`,
  );
}
