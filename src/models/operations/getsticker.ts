/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetStickerRequest = {
  stickerId: string;
};

/**
 * 200 response for get_sticker
 */
export type GetStickerResponseBody =
  | components.StandardStickerResponse
  | components.GuildStickerResponse;

/** @internal */
export const GetStickerRequest$inboundSchema: z.ZodType<
  GetStickerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sticker_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "sticker_id": "stickerId",
  });
});

/** @internal */
export type GetStickerRequest$Outbound = {
  sticker_id: string;
};

/** @internal */
export const GetStickerRequest$outboundSchema: z.ZodType<
  GetStickerRequest$Outbound,
  z.ZodTypeDef,
  GetStickerRequest
> = z.object({
  stickerId: z.string(),
}).transform((v) => {
  return remap$(v, {
    stickerId: "sticker_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStickerRequest$ {
  /** @deprecated use `GetStickerRequest$inboundSchema` instead. */
  export const inboundSchema = GetStickerRequest$inboundSchema;
  /** @deprecated use `GetStickerRequest$outboundSchema` instead. */
  export const outboundSchema = GetStickerRequest$outboundSchema;
  /** @deprecated use `GetStickerRequest$Outbound` instead. */
  export type Outbound = GetStickerRequest$Outbound;
}

export function getStickerRequestToJSON(
  getStickerRequest: GetStickerRequest,
): string {
  return JSON.stringify(
    GetStickerRequest$outboundSchema.parse(getStickerRequest),
  );
}

export function getStickerRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetStickerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStickerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStickerRequest' from JSON`,
  );
}

/** @internal */
export const GetStickerResponseBody$inboundSchema: z.ZodType<
  GetStickerResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.StandardStickerResponse$inboundSchema,
  components.GuildStickerResponse$inboundSchema,
]);

/** @internal */
export type GetStickerResponseBody$Outbound =
  | components.StandardStickerResponse$Outbound
  | components.GuildStickerResponse$Outbound;

/** @internal */
export const GetStickerResponseBody$outboundSchema: z.ZodType<
  GetStickerResponseBody$Outbound,
  z.ZodTypeDef,
  GetStickerResponseBody
> = z.union([
  components.StandardStickerResponse$outboundSchema,
  components.GuildStickerResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStickerResponseBody$ {
  /** @deprecated use `GetStickerResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetStickerResponseBody$inboundSchema;
  /** @deprecated use `GetStickerResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetStickerResponseBody$outboundSchema;
  /** @deprecated use `GetStickerResponseBody$Outbound` instead. */
  export type Outbound = GetStickerResponseBody$Outbound;
}

export function getStickerResponseBodyToJSON(
  getStickerResponseBody: GetStickerResponseBody,
): string {
  return JSON.stringify(
    GetStickerResponseBody$outboundSchema.parse(getStickerResponseBody),
  );
}

export function getStickerResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetStickerResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStickerResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStickerResponseBody' from JSON`,
  );
}
