/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListApplicationCommandsSecurity = {
  botToken?: string | undefined;
};

export type ListApplicationCommandsRequest = {
  applicationId: string;
  withLocalizations?: boolean | undefined;
};

/** @internal */
export const ListApplicationCommandsSecurity$inboundSchema: z.ZodType<
  ListApplicationCommandsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BotToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BotToken": "botToken",
  });
});

/** @internal */
export type ListApplicationCommandsSecurity$Outbound = {
  BotToken?: string | undefined;
};

/** @internal */
export const ListApplicationCommandsSecurity$outboundSchema: z.ZodType<
  ListApplicationCommandsSecurity$Outbound,
  z.ZodTypeDef,
  ListApplicationCommandsSecurity
> = z.object({
  botToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    botToken: "BotToken",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListApplicationCommandsSecurity$ {
  /** @deprecated use `ListApplicationCommandsSecurity$inboundSchema` instead. */
  export const inboundSchema = ListApplicationCommandsSecurity$inboundSchema;
  /** @deprecated use `ListApplicationCommandsSecurity$outboundSchema` instead. */
  export const outboundSchema = ListApplicationCommandsSecurity$outboundSchema;
  /** @deprecated use `ListApplicationCommandsSecurity$Outbound` instead. */
  export type Outbound = ListApplicationCommandsSecurity$Outbound;
}

export function listApplicationCommandsSecurityToJSON(
  listApplicationCommandsSecurity: ListApplicationCommandsSecurity,
): string {
  return JSON.stringify(
    ListApplicationCommandsSecurity$outboundSchema.parse(
      listApplicationCommandsSecurity,
    ),
  );
}

export function listApplicationCommandsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListApplicationCommandsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListApplicationCommandsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListApplicationCommandsSecurity' from JSON`,
  );
}

/** @internal */
export const ListApplicationCommandsRequest$inboundSchema: z.ZodType<
  ListApplicationCommandsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  application_id: z.string(),
  with_localizations: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "application_id": "applicationId",
    "with_localizations": "withLocalizations",
  });
});

/** @internal */
export type ListApplicationCommandsRequest$Outbound = {
  application_id: string;
  with_localizations?: boolean | undefined;
};

/** @internal */
export const ListApplicationCommandsRequest$outboundSchema: z.ZodType<
  ListApplicationCommandsRequest$Outbound,
  z.ZodTypeDef,
  ListApplicationCommandsRequest
> = z.object({
  applicationId: z.string(),
  withLocalizations: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    applicationId: "application_id",
    withLocalizations: "with_localizations",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListApplicationCommandsRequest$ {
  /** @deprecated use `ListApplicationCommandsRequest$inboundSchema` instead. */
  export const inboundSchema = ListApplicationCommandsRequest$inboundSchema;
  /** @deprecated use `ListApplicationCommandsRequest$outboundSchema` instead. */
  export const outboundSchema = ListApplicationCommandsRequest$outboundSchema;
  /** @deprecated use `ListApplicationCommandsRequest$Outbound` instead. */
  export type Outbound = ListApplicationCommandsRequest$Outbound;
}

export function listApplicationCommandsRequestToJSON(
  listApplicationCommandsRequest: ListApplicationCommandsRequest,
): string {
  return JSON.stringify(
    ListApplicationCommandsRequest$outboundSchema.parse(
      listApplicationCommandsRequest,
    ),
  );
}

export function listApplicationCommandsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListApplicationCommandsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListApplicationCommandsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListApplicationCommandsRequest' from JSON`,
  );
}
