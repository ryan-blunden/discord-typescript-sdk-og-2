/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAnswerVotersRequest = {
  channelId: string;
  messageId: string;
  answerId: number;
  after?: string | undefined;
  limit?: number | undefined;
};

/** @internal */
export const GetAnswerVotersRequest$inboundSchema: z.ZodType<
  GetAnswerVotersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel_id: z.string(),
  message_id: z.string(),
  answer_id: z.number().int(),
  after: z.string().optional(),
  limit: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "channel_id": "channelId",
    "message_id": "messageId",
    "answer_id": "answerId",
  });
});

/** @internal */
export type GetAnswerVotersRequest$Outbound = {
  channel_id: string;
  message_id: string;
  answer_id: number;
  after?: string | undefined;
  limit?: number | undefined;
};

/** @internal */
export const GetAnswerVotersRequest$outboundSchema: z.ZodType<
  GetAnswerVotersRequest$Outbound,
  z.ZodTypeDef,
  GetAnswerVotersRequest
> = z.object({
  channelId: z.string(),
  messageId: z.string(),
  answerId: z.number().int(),
  after: z.string().optional(),
  limit: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    channelId: "channel_id",
    messageId: "message_id",
    answerId: "answer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAnswerVotersRequest$ {
  /** @deprecated use `GetAnswerVotersRequest$inboundSchema` instead. */
  export const inboundSchema = GetAnswerVotersRequest$inboundSchema;
  /** @deprecated use `GetAnswerVotersRequest$outboundSchema` instead. */
  export const outboundSchema = GetAnswerVotersRequest$outboundSchema;
  /** @deprecated use `GetAnswerVotersRequest$Outbound` instead. */
  export type Outbound = GetAnswerVotersRequest$Outbound;
}

export function getAnswerVotersRequestToJSON(
  getAnswerVotersRequest: GetAnswerVotersRequest,
): string {
  return JSON.stringify(
    GetAnswerVotersRequest$outboundSchema.parse(getAnswerVotersRequest),
  );
}

export function getAnswerVotersRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAnswerVotersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAnswerVotersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAnswerVotersRequest' from JSON`,
  );
}
