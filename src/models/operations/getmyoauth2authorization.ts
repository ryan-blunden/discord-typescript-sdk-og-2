/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetMyOauth2AuthorizationSecurity = {
  botToken?: string | undefined;
};

/** @internal */
export const GetMyOauth2AuthorizationSecurity$inboundSchema: z.ZodType<
  GetMyOauth2AuthorizationSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BotToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "BotToken": "botToken",
  });
});

/** @internal */
export type GetMyOauth2AuthorizationSecurity$Outbound = {
  BotToken?: string | undefined;
};

/** @internal */
export const GetMyOauth2AuthorizationSecurity$outboundSchema: z.ZodType<
  GetMyOauth2AuthorizationSecurity$Outbound,
  z.ZodTypeDef,
  GetMyOauth2AuthorizationSecurity
> = z.object({
  botToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    botToken: "BotToken",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMyOauth2AuthorizationSecurity$ {
  /** @deprecated use `GetMyOauth2AuthorizationSecurity$inboundSchema` instead. */
  export const inboundSchema = GetMyOauth2AuthorizationSecurity$inboundSchema;
  /** @deprecated use `GetMyOauth2AuthorizationSecurity$outboundSchema` instead. */
  export const outboundSchema = GetMyOauth2AuthorizationSecurity$outboundSchema;
  /** @deprecated use `GetMyOauth2AuthorizationSecurity$Outbound` instead. */
  export type Outbound = GetMyOauth2AuthorizationSecurity$Outbound;
}

export function getMyOauth2AuthorizationSecurityToJSON(
  getMyOauth2AuthorizationSecurity: GetMyOauth2AuthorizationSecurity,
): string {
  return JSON.stringify(
    GetMyOauth2AuthorizationSecurity$outboundSchema.parse(
      getMyOauth2AuthorizationSecurity,
    ),
  );
}

export function getMyOauth2AuthorizationSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetMyOauth2AuthorizationSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMyOauth2AuthorizationSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMyOauth2AuthorizationSecurity' from JSON`,
  );
}
