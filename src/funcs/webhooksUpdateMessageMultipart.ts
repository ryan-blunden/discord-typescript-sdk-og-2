/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { DiscordCore } from "../core.js";
import { encodeFormQuery, encodeJSON, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { resolveSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import { APIError } from "../models/errors/apierror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { Result } from "../types/fp.js";

export async function webhooksUpdateMessageMultipart(
  client: DiscordCore,
  request: operations.UpdateWebhookMessageMultipartRequest,
  security?: operations.UpdateWebhookMessageMultipartSecurity | undefined,
  options?: RequestOptions,
): Promise<
  Result<
    components.MessageResponse,
    | errors.ErrorResponse
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations.UpdateWebhookMessageMultipartRequest$outboundSchema.parse(
        value,
      ),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return parsed;
  }
  const payload = parsed.value;
  const body = new FormData();

  if (payload.RequestBody.allowed_mentions !== undefined) {
    body.append(
      "allowed_mentions",
      encodeJSON("allowed_mentions", payload.RequestBody.allowed_mentions, {
        explode: true,
      }),
    );
  }
  if (payload.RequestBody.attachments !== undefined) {
    body.append(
      "attachments",
      encodeJSON("attachments", payload.RequestBody.attachments, {
        explode: true,
      }),
    );
  }
  if (payload.RequestBody.components !== undefined) {
    body.append(
      "components",
      encodeJSON("components", payload.RequestBody.components, {
        explode: true,
      }),
    );
  }
  if (payload.RequestBody.content !== undefined) {
    body.append("content", String(payload.RequestBody.content));
  }
  if (payload.RequestBody.embeds !== undefined) {
    body.append(
      "embeds",
      encodeJSON("embeds", payload.RequestBody.embeds, { explode: true }),
    );
  }
  if (payload.RequestBody["files[0]"] !== undefined) {
    body.append("files[0]", payload.RequestBody["files[0]"]);
  }
  if (payload.RequestBody["files[1]"] !== undefined) {
    body.append("files[1]", payload.RequestBody["files[1]"]);
  }
  if (payload.RequestBody["files[2]"] !== undefined) {
    body.append("files[2]", payload.RequestBody["files[2]"]);
  }
  if (payload.RequestBody["files[3]"] !== undefined) {
    body.append("files[3]", payload.RequestBody["files[3]"]);
  }
  if (payload.RequestBody["files[4]"] !== undefined) {
    body.append("files[4]", payload.RequestBody["files[4]"]);
  }
  if (payload.RequestBody["files[5]"] !== undefined) {
    body.append("files[5]", payload.RequestBody["files[5]"]);
  }
  if (payload.RequestBody["files[6]"] !== undefined) {
    body.append("files[6]", payload.RequestBody["files[6]"]);
  }
  if (payload.RequestBody["files[7]"] !== undefined) {
    body.append("files[7]", payload.RequestBody["files[7]"]);
  }
  if (payload.RequestBody["files[8]"] !== undefined) {
    body.append("files[8]", payload.RequestBody["files[8]"]);
  }
  if (payload.RequestBody["files[9]"] !== undefined) {
    body.append("files[9]", payload.RequestBody["files[9]"]);
  }
  if (payload.RequestBody.flags !== undefined) {
    body.append("flags", String(payload.RequestBody.flags));
  }
  if (payload.RequestBody.poll !== undefined) {
    body.append(
      "poll",
      encodeJSON("poll", payload.RequestBody.poll, { explode: true }),
    );
  }

  const pathParams = {
    message_id: encodeSimple("message_id", payload.message_id, {
      explode: false,
      charEncoding: "percent",
    }),
    webhook_id: encodeSimple("webhook_id", payload.webhook_id, {
      explode: false,
      charEncoding: "percent",
    }),
    webhook_token: encodeSimple("webhook_token", payload.webhook_token, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc(
    "/webhooks/{webhook_id}/{webhook_token}/messages/{message_id}",
  )(pathParams);

  const query = encodeFormQuery({
    "thread_id": payload.thread_id,
  });

  const headers = new Headers({
    Accept: "application/json",
  });

  const requestSecurity = resolveSecurity(
    [
      {
        fieldName: "Authorization",
        type: "apiKey:header",
        value: security?.botToken,
      },
    ],
  );

  const context = {
    operationID: "update_webhook_message_multipart",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "PATCH",
    path: path,
    headers: headers,
    query: query,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return requestRes;
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return doResult;
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    components.MessageResponse,
    | errors.ErrorResponse
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(200, components.MessageResponse$inboundSchema),
    M.jsonErr("4XX", errors.ErrorResponse$inboundSchema),
    M.fail("5XX"),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return result;
  }

  return result;
}
