/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { webhooksDelete } from "../funcs/webhooksDelete.js";
import { webhooksDeleteOriginalMessage } from "../funcs/webhooksDeleteOriginalMessage.js";
import { webhooksExecuteGithubCompatible } from "../funcs/webhooksExecuteGithubCompatible.js";
import { webhooksExecuteSlackCompatible } from "../funcs/webhooksExecuteSlackCompatible.js";
import { webhooksGet } from "../funcs/webhooksGet.js";
import { webhooksGetMessage } from "../funcs/webhooksGetMessage.js";
import { webhooksUpdate } from "../funcs/webhooksUpdate.js";
import { webhooksUpdateMessageForm } from "../funcs/webhooksUpdateMessageForm.js";
import { webhooksUpdateMessageJson } from "../funcs/webhooksUpdateMessageJson.js";
import { webhooksUpdateMessageMultipart } from "../funcs/webhooksUpdateMessageMultipart.js";
import { webhooksUpdateOriginalMessageForm } from "../funcs/webhooksUpdateOriginalMessageForm.js";
import { webhooksUpdateOriginalMessageJson } from "../funcs/webhooksUpdateOriginalMessageJson.js";
import { webhooksUpdateOriginalMessageMultipart } from "../funcs/webhooksUpdateOriginalMessageMultipart.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { DiscordWebhooksMessages } from "./discordwebhooksmessages.js";

export class Webhooks extends ClientSDK {
  private _messages?: DiscordWebhooksMessages;
  get messages(): DiscordWebhooksMessages {
    return (this._messages ??= new DiscordWebhooksMessages(this._options));
  }

  async deleteOriginalMessage(
    request: operations.DeleteOriginalWebhookMessageRequest,
    security?: operations.DeleteOriginalWebhookMessageSecurity | undefined,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(webhooksDeleteOriginalMessage(
      this,
      request,
      security,
      options,
    ));
  }

  async updateOriginalMessageForm(
    request: operations.UpdateOriginalWebhookMessageFormRequest,
    security?: operations.UpdateOriginalWebhookMessageFormSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(webhooksUpdateOriginalMessageForm(
      this,
      request,
      security,
      options,
    ));
  }

  async updateOriginalMessageMultipart(
    request: operations.UpdateOriginalWebhookMessageMultipartRequest,
    security?:
      | operations.UpdateOriginalWebhookMessageMultipartSecurity
      | undefined,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(webhooksUpdateOriginalMessageMultipart(
      this,
      request,
      security,
      options,
    ));
  }

  async updateOriginalMessageJson(
    request: operations.UpdateOriginalWebhookMessageJsonRequest,
    security?: operations.UpdateOriginalWebhookMessageJsonSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(webhooksUpdateOriginalMessageJson(
      this,
      request,
      security,
      options,
    ));
  }

  async getMessage(
    request: operations.GetWebhookMessageRequest,
    security?: operations.GetWebhookMessageSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(webhooksGetMessage(
      this,
      request,
      security,
      options,
    ));
  }

  async updateMessageForm(
    request: operations.UpdateWebhookMessageFormRequest,
    security?: operations.UpdateWebhookMessageFormSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(webhooksUpdateMessageForm(
      this,
      request,
      security,
      options,
    ));
  }

  async updateMessageMultipart(
    request: operations.UpdateWebhookMessageMultipartRequest,
    security?: operations.UpdateWebhookMessageMultipartSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(webhooksUpdateMessageMultipart(
      this,
      request,
      security,
      options,
    ));
  }

  async updateMessageJson(
    request: operations.UpdateWebhookMessageJsonRequest,
    security?: operations.UpdateWebhookMessageJsonSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(webhooksUpdateMessageJson(
      this,
      request,
      security,
      options,
    ));
  }

  async executeGithubCompatible(
    request: operations.ExecuteGithubCompatibleWebhookRequest,
    security?: operations.ExecuteGithubCompatibleWebhookSecurity | undefined,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(webhooksExecuteGithubCompatible(
      this,
      request,
      security,
      options,
    ));
  }

  async executeSlackCompatible(
    request: operations.ExecuteSlackCompatibleWebhookRequest,
    security?: operations.ExecuteSlackCompatibleWebhookSecurity | undefined,
    options?: RequestOptions,
  ): Promise<string> {
    return unwrapAsync(webhooksExecuteSlackCompatible(
      this,
      request,
      security,
      options,
    ));
  }

  async get(
    request: operations.GetWebhookRequest,
    options?: RequestOptions,
  ): Promise<operations.GetWebhookResponseBody> {
    return unwrapAsync(webhooksGet(
      this,
      request,
      options,
    ));
  }

  async delete(
    request: operations.DeleteWebhookRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(webhooksDelete(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.UpdateWebhookRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateWebhookResponseBody> {
    return unwrapAsync(webhooksUpdate(
      this,
      request,
      options,
    ));
  }
}
