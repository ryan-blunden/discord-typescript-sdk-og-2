/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { channelsAddThreadMember } from "../funcs/channelsAddThreadMember.js";
import { channelsCreateInvite } from "../funcs/channelsCreateInvite.js";
import { channelsCreateWebhook } from "../funcs/channelsCreateWebhook.js";
import { channelsCrosspostMessage } from "../funcs/channelsCrosspostMessage.js";
import { channelsDelete } from "../funcs/channelsDelete.js";
import { channelsDeleteDmUser } from "../funcs/channelsDeleteDmUser.js";
import { channelsDeleteMessage } from "../funcs/channelsDeleteMessage.js";
import { channelsDeleteUserMessageReaction } from "../funcs/channelsDeleteUserMessageReaction.js";
import { channelsExpirePoll } from "../funcs/channelsExpirePoll.js";
import { channelsFollow } from "../funcs/channelsFollow.js";
import { channelsGet } from "../funcs/channelsGet.js";
import { channelsGetThreadMember } from "../funcs/channelsGetThreadMember.js";
import { channelsListInvites } from "../funcs/channelsListInvites.js";
import { channelsListMyPrivateArchivedThreads } from "../funcs/channelsListMyPrivateArchivedThreads.js";
import { channelsListPinnedMessages } from "../funcs/channelsListPinnedMessages.js";
import { channelsListPrivateArchivedThreads } from "../funcs/channelsListPrivateArchivedThreads.js";
import { channelsListThreadMembers } from "../funcs/channelsListThreadMembers.js";
import { channelsListWebhooks } from "../funcs/channelsListWebhooks.js";
import { channelsPinMessage } from "../funcs/channelsPinMessage.js";
import { channelsSendSoundboardSound } from "../funcs/channelsSendSoundboardSound.js";
import { channelsStartThreadFromMessage } from "../funcs/channelsStartThreadFromMessage.js";
import { channelsTriggerTyping } from "../funcs/channelsTriggerTyping.js";
import { channelsUpdate } from "../funcs/channelsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { DiscordMessages } from "./discordmessages.js";
import { DiscordThreadMembers } from "./discordthreadmembers.js";
import { DiscordThreads } from "./discordthreads.js";
import { Permissions } from "./permissions.js";
import { Pins } from "./pins.js";

export class Channels extends ClientSDK {
  private _messages?: DiscordMessages;
  get messages(): DiscordMessages {
    return (this._messages ??= new DiscordMessages(this._options));
  }

  private _threadMembers?: DiscordThreadMembers;
  get threadMembers(): DiscordThreadMembers {
    return (this._threadMembers ??= new DiscordThreadMembers(this._options));
  }

  private _permissions?: Permissions;
  get permissions(): Permissions {
    return (this._permissions ??= new Permissions(this._options));
  }

  private _threads?: DiscordThreads;
  get threads(): DiscordThreads {
    return (this._threads ??= new DiscordThreads(this._options));
  }

  private _pins?: Pins;
  get pins(): Pins {
    return (this._pins ??= new Pins(this._options));
  }

  async listMyPrivateArchivedThreads(
    request: operations.ListMyPrivateArchivedThreadsRequest,
    options?: RequestOptions,
  ): Promise<components.ThreadsResponse> {
    return unwrapAsync(channelsListMyPrivateArchivedThreads(
      this,
      request,
      options,
    ));
  }

  async listPrivateArchivedThreads(
    request: operations.ListPrivateArchivedThreadsRequest,
    options?: RequestOptions,
  ): Promise<components.ThreadsResponse> {
    return unwrapAsync(channelsListPrivateArchivedThreads(
      this,
      request,
      options,
    ));
  }

  async deleteUserMessageReaction(
    request: operations.DeleteUserMessageReactionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(channelsDeleteUserMessageReaction(
      this,
      request,
      options,
    ));
  }

  async crosspostMessage(
    request: operations.CrosspostMessageRequest,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(channelsCrosspostMessage(
      this,
      request,
      options,
    ));
  }

  async startThreadFromMessage(
    request: operations.CreateThreadFromMessageRequest,
    options?: RequestOptions,
  ): Promise<components.ThreadResponse> {
    return unwrapAsync(channelsStartThreadFromMessage(
      this,
      request,
      options,
    ));
  }

  async expirePoll(
    request: operations.PollExpireRequest,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(channelsExpirePoll(
      this,
      request,
      options,
    ));
  }

  async sendSoundboardSound(
    request: operations.SendSoundboardSoundRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(channelsSendSoundboardSound(
      this,
      request,
      options,
    ));
  }

  async getThreadMember(
    request: operations.GetThreadMemberRequest,
    options?: RequestOptions,
  ): Promise<components.ThreadMemberResponse> {
    return unwrapAsync(channelsGetThreadMember(
      this,
      request,
      options,
    ));
  }

  async addThreadMember(
    request: operations.AddThreadMemberRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(channelsAddThreadMember(
      this,
      request,
      options,
    ));
  }

  async listThreadMembers(
    request: operations.ListThreadMembersRequest,
    options?: RequestOptions,
  ): Promise<Array<components.ThreadMemberResponse>> {
    return unwrapAsync(channelsListThreadMembers(
      this,
      request,
      options,
    ));
  }

  async deleteDmUser(
    request: operations.DeleteGroupDmUserRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(channelsDeleteDmUser(
      this,
      request,
      options,
    ));
  }

  async follow(
    request: operations.FollowChannelRequest,
    options?: RequestOptions,
  ): Promise<components.ChannelFollowerResponse> {
    return unwrapAsync(channelsFollow(
      this,
      request,
      options,
    ));
  }

  async deleteMessage(
    request: operations.DeleteMessageRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(channelsDeleteMessage(
      this,
      request,
      options,
    ));
  }

  async listWebhooks(
    request: operations.ListChannelWebhooksRequest,
    options?: RequestOptions,
  ): Promise<Array<operations.ListChannelWebhooksResponseBody>> {
    return unwrapAsync(channelsListWebhooks(
      this,
      request,
      options,
    ));
  }

  async createWebhook(
    request: operations.CreateWebhookRequest,
    options?: RequestOptions,
  ): Promise<components.GuildIncomingWebhookResponse> {
    return unwrapAsync(channelsCreateWebhook(
      this,
      request,
      options,
    ));
  }

  async listInvites(
    request: operations.ListChannelInvitesRequest,
    options?: RequestOptions,
  ): Promise<Array<operations.ListChannelInvitesResponseBody>> {
    return unwrapAsync(channelsListInvites(
      this,
      request,
      options,
    ));
  }

  async createInvite(
    request: operations.CreateChannelInviteRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateChannelInviteResponseBody | undefined> {
    return unwrapAsync(channelsCreateInvite(
      this,
      request,
      options,
    ));
  }

  async triggerTyping(
    request: operations.TriggerTypingIndicatorRequest,
    options?: RequestOptions,
  ): Promise<components.TypingIndicatorResponse | undefined> {
    return unwrapAsync(channelsTriggerTyping(
      this,
      request,
      options,
    ));
  }

  async pinMessage(
    request: operations.PinMessageRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(channelsPinMessage(
      this,
      request,
      options,
    ));
  }

  async listPinnedMessages(
    request: operations.ListPinnedMessagesRequest,
    options?: RequestOptions,
  ): Promise<Array<components.MessageResponse>> {
    return unwrapAsync(channelsListPinnedMessages(
      this,
      request,
      options,
    ));
  }

  async get(
    request: operations.GetChannelRequest,
    options?: RequestOptions,
  ): Promise<operations.GetChannelResponseBody> {
    return unwrapAsync(channelsGet(
      this,
      request,
      options,
    ));
  }

  async delete(
    request: operations.DeleteChannelRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteChannelResponseBody> {
    return unwrapAsync(channelsDelete(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.UpdateChannelRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateChannelResponseBody> {
    return unwrapAsync(channelsUpdate(
      this,
      request,
      options,
    ));
  }
}
