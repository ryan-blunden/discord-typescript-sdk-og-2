/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { guildApplicationCommandsBulkSet } from "../funcs/guildApplicationCommandsBulkSet.js";
import { guildApplicationCommandsDelete } from "../funcs/guildApplicationCommandsDelete.js";
import { guildApplicationCommandsList } from "../funcs/guildApplicationCommandsList.js";
import { guildApplicationCommandsUpdate } from "../funcs/guildApplicationCommandsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class GuildApplicationCommands extends ClientSDK {
  async delete(
    security: operations.DeleteGuildApplicationCommandSecurity,
    request: operations.DeleteGuildApplicationCommandRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(guildApplicationCommandsDelete(
      this,
      security,
      request,
      options,
    ));
  }

  async list(
    security: operations.ListGuildApplicationCommandsSecurity,
    request: operations.ListGuildApplicationCommandsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.ApplicationCommandResponse>> {
    return unwrapAsync(guildApplicationCommandsList(
      this,
      security,
      request,
      options,
    ));
  }

  async update(
    security: operations.UpdateGuildApplicationCommandSecurity,
    request: operations.UpdateGuildApplicationCommandRequest,
    options?: RequestOptions,
  ): Promise<components.ApplicationCommandResponse> {
    return unwrapAsync(guildApplicationCommandsUpdate(
      this,
      security,
      request,
      options,
    ));
  }

  async bulkSet(
    security: operations.BulkSetGuildApplicationCommandsSecurity,
    request: operations.BulkSetGuildApplicationCommandsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.ApplicationCommandResponse>> {
    return unwrapAsync(guildApplicationCommandsBulkSet(
      this,
      security,
      request,
      options,
    ));
  }
}
