/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { usersCreateDm } from "../funcs/usersCreateDm.js";
import { usersGet } from "../funcs/usersGet.js";
import { usersGetMe } from "../funcs/usersGetMe.js";
import { usersListMyConnections } from "../funcs/usersListMyConnections.js";
import { usersListMyGuilds } from "../funcs/usersListMyGuilds.js";
import { usersUpdateMe } from "../funcs/usersUpdateMe.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { DiscordUsersGuilds } from "./discordusersguilds.js";

export class Users extends ClientSDK {
  private _guilds?: DiscordUsersGuilds;
  get guilds(): DiscordUsersGuilds {
    return (this._guilds ??= new DiscordUsersGuilds(this._options));
  }

  async listMyConnections(
    security: operations.ListMyConnectionsSecurity,
    options?: RequestOptions,
  ): Promise<Array<components.ConnectedAccountResponse>> {
    return unwrapAsync(usersListMyConnections(
      this,
      security,
      options,
    ));
  }

  async createDm(
    request: components.CreatePrivateChannelRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateDmResponseBody> {
    return unwrapAsync(usersCreateDm(
      this,
      request,
      options,
    ));
  }

  async listMyGuilds(
    security: operations.ListMyGuildsSecurity,
    request: operations.ListMyGuildsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.MyGuildResponse>> {
    return unwrapAsync(usersListMyGuilds(
      this,
      security,
      request,
      options,
    ));
  }

  async getMe(
    security: operations.GetMyUserSecurity,
    options?: RequestOptions,
  ): Promise<components.UserPIIResponse> {
    return unwrapAsync(usersGetMe(
      this,
      security,
      options,
    ));
  }

  async updateMe(
    request: components.BotAccountPatchRequest,
    options?: RequestOptions,
  ): Promise<components.UserPIIResponse> {
    return unwrapAsync(usersUpdateMe(
      this,
      request,
      options,
    ));
  }

  async get(
    request: operations.GetUserRequest,
    options?: RequestOptions,
  ): Promise<components.UserResponse> {
    return unwrapAsync(usersGet(
      this,
      request,
      options,
    ));
  }
}
