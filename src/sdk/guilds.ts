/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { guildsBanUser } from "../funcs/guildsBanUser.js";
import { guildsCreate } from "../funcs/guildsCreate.js";
import { guildsCreateEmoji } from "../funcs/guildsCreateEmoji.js";
import { guildsCreateRole } from "../funcs/guildsCreateRole.js";
import { guildsCreateSoundboardSound } from "../funcs/guildsCreateSoundboardSound.js";
import { guildsCreateSticker } from "../funcs/guildsCreateSticker.js";
import { guildsDelete } from "../funcs/guildsDelete.js";
import { guildsDeleteEmoji } from "../funcs/guildsDeleteEmoji.js";
import { guildsDeleteMember } from "../funcs/guildsDeleteMember.js";
import { guildsDeleteRole } from "../funcs/guildsDeleteRole.js";
import { guildsDeleteSticker } from "../funcs/guildsDeleteSticker.js";
import { guildsGet } from "../funcs/guildsGet.js";
import { guildsGetMyMember } from "../funcs/guildsGetMyMember.js";
import { guildsGetNewMemberWelcome } from "../funcs/guildsGetNewMemberWelcome.js";
import { guildsGetPreview } from "../funcs/guildsGetPreview.js";
import { guildsGetRole } from "../funcs/guildsGetRole.js";
import { guildsGetSoundboardSound } from "../funcs/guildsGetSoundboardSound.js";
import { guildsGetSticker } from "../funcs/guildsGetSticker.js";
import { guildsGetTemplate } from "../funcs/guildsGetTemplate.js";
import { guildsGetVanityUrl } from "../funcs/guildsGetVanityUrl.js";
import { guildsGetVoiceState } from "../funcs/guildsGetVoiceState.js";
import { guildsGetWelcomeScreen } from "../funcs/guildsGetWelcomeScreen.js";
import { guildsGetWidget } from "../funcs/guildsGetWidget.js";
import { guildsGetWidgetPng } from "../funcs/guildsGetWidgetPng.js";
import { guildsGetWidgetSettings } from "../funcs/guildsGetWidgetSettings.js";
import { guildsListAuditLogs } from "../funcs/guildsListAuditLogs.js";
import { guildsListAutoModerationRules } from "../funcs/guildsListAutoModerationRules.js";
import { guildsListChannels } from "../funcs/guildsListChannels.js";
import { guildsListEmojis } from "../funcs/guildsListEmojis.js";
import { guildsListInvites } from "../funcs/guildsListInvites.js";
import { guildsListMembers } from "../funcs/guildsListMembers.js";
import { guildsListRoles } from "../funcs/guildsListRoles.js";
import { guildsListTemplates } from "../funcs/guildsListTemplates.js";
import { guildsListWebhooks } from "../funcs/guildsListWebhooks.js";
import { guildsPreviewPrune } from "../funcs/guildsPreviewPrune.js";
import { guildsPrune } from "../funcs/guildsPrune.js";
import { guildsSearchMembers } from "../funcs/guildsSearchMembers.js";
import { guildsSyncTemplate } from "../funcs/guildsSyncTemplate.js";
import { guildsUnbanUser } from "../funcs/guildsUnbanUser.js";
import { guildsUpdate } from "../funcs/guildsUpdate.js";
import { guildsUpdateEmoji } from "../funcs/guildsUpdateEmoji.js";
import { guildsUpdateRole } from "../funcs/guildsUpdateRole.js";
import { guildsUpdateTemplate } from "../funcs/guildsUpdateTemplate.js";
import { guildsUpdateWelcomeScreen } from "../funcs/guildsUpdateWelcomeScreen.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { AutoModeration } from "./automoderation.js";
import { DiscordChannels } from "./discordchannels.js";
import { DiscordGuildsScheduledEvents } from "./discordguildsscheduledevents.js";
import { DiscordStickers } from "./discordstickers.js";
import { Integrations } from "./integrations.js";
import { Mfa } from "./mfa.js";
import { SoundboardSounds } from "./soundboardsounds.js";
import { Templates } from "./templates.js";
import { VoiceStates } from "./voicestates.js";

export class Guilds extends ClientSDK {
  private _scheduledEvents?: DiscordGuildsScheduledEvents;
  get scheduledEvents(): DiscordGuildsScheduledEvents {
    return (this._scheduledEvents ??= new DiscordGuildsScheduledEvents(
      this._options,
    ));
  }

  private _autoModeration?: AutoModeration;
  get autoModeration(): AutoModeration {
    return (this._autoModeration ??= new AutoModeration(this._options));
  }

  private _voiceStates?: VoiceStates;
  get voiceStates(): VoiceStates {
    return (this._voiceStates ??= new VoiceStates(this._options));
  }

  private _soundboardSounds?: SoundboardSounds;
  get soundboardSounds(): SoundboardSounds {
    return (this._soundboardSounds ??= new SoundboardSounds(this._options));
  }

  private _integrations?: Integrations;
  get integrations(): Integrations {
    return (this._integrations ??= new Integrations(this._options));
  }

  private _templates?: Templates;
  get templates(): Templates {
    return (this._templates ??= new Templates(this._options));
  }

  private _stickers?: DiscordStickers;
  get stickers(): DiscordStickers {
    return (this._stickers ??= new DiscordStickers(this._options));
  }

  private _channels?: DiscordChannels;
  get channels(): DiscordChannels {
    return (this._channels ??= new DiscordChannels(this._options));
  }

  private _mfa?: Mfa;
  get mfa(): Mfa {
    return (this._mfa ??= new Mfa(this._options));
  }

  async create(
    request: components.GuildCreateRequest,
    options?: RequestOptions,
  ): Promise<components.GuildResponse> {
    return unwrapAsync(guildsCreate(
      this,
      request,
      options,
    ));
  }

  async getMyMember(
    request: operations.GetMyGuildMemberRequest,
    options?: RequestOptions,
  ): Promise<components.PrivateGuildMemberResponse> {
    return unwrapAsync(guildsGetMyMember(
      this,
      request,
      options,
    ));
  }

  async listAutoModerationRules(
    request: operations.ListAutoModerationRulesRequest,
    options?: RequestOptions,
  ): Promise<Array<operations.ResponseBody>> {
    return unwrapAsync(guildsListAutoModerationRules(
      this,
      request,
      options,
    ));
  }

  async searchMembers(
    request: operations.SearchGuildMembersRequest,
    options?: RequestOptions,
  ): Promise<Array<components.GuildMemberResponse>> {
    return unwrapAsync(guildsSearchMembers(
      this,
      request,
      options,
    ));
  }

  async getTemplate(
    request: operations.GetGuildTemplateRequest,
    security?: operations.GetGuildTemplateSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.GuildTemplateResponse> {
    return unwrapAsync(guildsGetTemplate(
      this,
      request,
      security,
      options,
    ));
  }

  async getNewMemberWelcome(
    request: operations.GetGuildNewMemberWelcomeRequest,
    options?: RequestOptions,
  ): Promise<components.GuildHomeSettingsResponse | undefined> {
    return unwrapAsync(guildsGetNewMemberWelcome(
      this,
      request,
      options,
    ));
  }

  async getSoundboardSound(
    request: operations.GetGuildSoundboardSoundRequest,
    options?: RequestOptions,
  ): Promise<components.SoundboardSoundResponse> {
    return unwrapAsync(guildsGetSoundboardSound(
      this,
      request,
      options,
    ));
  }

  async createSoundboardSound(
    request: operations.CreateGuildSoundboardSoundRequest,
    options?: RequestOptions,
  ): Promise<components.SoundboardSoundResponse> {
    return unwrapAsync(guildsCreateSoundboardSound(
      this,
      request,
      options,
    ));
  }

  async getWelcomeScreen(
    request: operations.GetGuildWelcomeScreenRequest,
    options?: RequestOptions,
  ): Promise<components.GuildWelcomeScreenResponse> {
    return unwrapAsync(guildsGetWelcomeScreen(
      this,
      request,
      options,
    ));
  }

  async updateWelcomeScreen(
    request: operations.UpdateGuildWelcomeScreenRequest,
    options?: RequestOptions,
  ): Promise<components.GuildWelcomeScreenResponse> {
    return unwrapAsync(guildsUpdateWelcomeScreen(
      this,
      request,
      options,
    ));
  }

  async getVoiceState(
    request: operations.GetVoiceStateRequest,
    options?: RequestOptions,
  ): Promise<components.VoiceStateResponse> {
    return unwrapAsync(guildsGetVoiceState(
      this,
      request,
      options,
    ));
  }

  async getWidget(
    request: operations.GetGuildWidgetRequest,
    security?: operations.GetGuildWidgetSecurity | undefined,
    options?: RequestOptions,
  ): Promise<components.WidgetResponse> {
    return unwrapAsync(guildsGetWidget(
      this,
      request,
      security,
      options,
    ));
  }

  async getVanityUrl(
    request: operations.GetGuildVanityUrlRequest,
    options?: RequestOptions,
  ): Promise<components.VanityURLResponse> {
    return unwrapAsync(guildsGetVanityUrl(
      this,
      request,
      options,
    ));
  }

  async listAuditLogs(
    request: operations.ListGuildAuditLogEntriesRequest,
    options?: RequestOptions,
  ): Promise<components.GuildAuditLogResponse> {
    return unwrapAsync(guildsListAuditLogs(
      this,
      request,
      options,
    ));
  }

  async getWidgetPng(
    request: operations.GetGuildWidgetPngRequest,
    security?: operations.GetGuildWidgetPngSecurity | undefined,
    options?: RequestOptions,
  ): Promise<string> {
    return unwrapAsync(guildsGetWidgetPng(
      this,
      request,
      security,
      options,
    ));
  }

  async syncTemplate(
    request: operations.SyncGuildTemplateRequest,
    options?: RequestOptions,
  ): Promise<components.GuildTemplateResponse> {
    return unwrapAsync(guildsSyncTemplate(
      this,
      request,
      options,
    ));
  }

  async updateTemplate(
    request: operations.UpdateGuildTemplateRequest,
    options?: RequestOptions,
  ): Promise<components.GuildTemplateResponse> {
    return unwrapAsync(guildsUpdateTemplate(
      this,
      request,
      options,
    ));
  }

  async listTemplates(
    request: operations.ListGuildTemplatesRequest,
    options?: RequestOptions,
  ): Promise<Array<components.GuildTemplateResponse>> {
    return unwrapAsync(guildsListTemplates(
      this,
      request,
      options,
    ));
  }

  async getSticker(
    request: operations.GetGuildStickerRequest,
    options?: RequestOptions,
  ): Promise<components.GuildStickerResponse> {
    return unwrapAsync(guildsGetSticker(
      this,
      request,
      options,
    ));
  }

  async deleteSticker(
    request: operations.DeleteGuildStickerRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(guildsDeleteSticker(
      this,
      request,
      options,
    ));
  }

  async createSticker(
    request: operations.CreateGuildStickerRequest,
    options?: RequestOptions,
  ): Promise<components.GuildStickerResponse> {
    return unwrapAsync(guildsCreateSticker(
      this,
      request,
      options,
    ));
  }

  async listWebhooks(
    request: operations.GetGuildWebhooksRequest,
    options?: RequestOptions,
  ): Promise<Array<operations.GetGuildWebhooksResponseBody>> {
    return unwrapAsync(guildsListWebhooks(
      this,
      request,
      options,
    ));
  }

  async listChannels(
    security: operations.ListGuildChannelsSecurity,
    request: operations.ListGuildChannelsRequest,
    options?: RequestOptions,
  ): Promise<Array<operations.ListGuildChannelsResponseBody>> {
    return unwrapAsync(guildsListChannels(
      this,
      security,
      request,
      options,
    ));
  }

  async deleteMember(
    request: operations.DeleteGuildMemberRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(guildsDeleteMember(
      this,
      request,
      options,
    ));
  }

  async listMembers(
    request: operations.ListGuildMembersRequest,
    options?: RequestOptions,
  ): Promise<Array<components.GuildMemberResponse>> {
    return unwrapAsync(guildsListMembers(
      this,
      request,
      options,
    ));
  }

  async getPreview(
    request: operations.GetGuildPreviewRequest,
    options?: RequestOptions,
  ): Promise<components.GuildPreviewResponse> {
    return unwrapAsync(guildsGetPreview(
      this,
      request,
      options,
    ));
  }

  async listInvites(
    request: operations.ListGuildInvitesRequest,
    options?: RequestOptions,
  ): Promise<Array<operations.ListGuildInvitesResponseBody>> {
    return unwrapAsync(guildsListInvites(
      this,
      request,
      options,
    ));
  }

  async deleteEmoji(
    request: operations.DeleteGuildEmojiRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(guildsDeleteEmoji(
      this,
      request,
      options,
    ));
  }

  async updateEmoji(
    request: operations.UpdateGuildEmojiRequest,
    options?: RequestOptions,
  ): Promise<components.EmojiResponse> {
    return unwrapAsync(guildsUpdateEmoji(
      this,
      request,
      options,
    ));
  }

  async listEmojis(
    request: operations.ListGuildEmojisRequest,
    options?: RequestOptions,
  ): Promise<Array<components.EmojiResponse>> {
    return unwrapAsync(guildsListEmojis(
      this,
      request,
      options,
    ));
  }

  async createEmoji(
    request: operations.CreateGuildEmojiRequest,
    options?: RequestOptions,
  ): Promise<components.EmojiResponse> {
    return unwrapAsync(guildsCreateEmoji(
      this,
      request,
      options,
    ));
  }

  async getWidgetSettings(
    request: operations.GetGuildWidgetSettingsRequest,
    options?: RequestOptions,
  ): Promise<components.WidgetSettingsResponse> {
    return unwrapAsync(guildsGetWidgetSettings(
      this,
      request,
      options,
    ));
  }

  async getRole(
    request: operations.GetGuildRoleRequest,
    options?: RequestOptions,
  ): Promise<components.GuildRoleResponse> {
    return unwrapAsync(guildsGetRole(
      this,
      request,
      options,
    ));
  }

  async deleteRole(
    request: operations.DeleteGuildRoleRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(guildsDeleteRole(
      this,
      request,
      options,
    ));
  }

  async updateRole(
    request: operations.UpdateGuildRoleRequest,
    options?: RequestOptions,
  ): Promise<components.GuildRoleResponse> {
    return unwrapAsync(guildsUpdateRole(
      this,
      request,
      options,
    ));
  }

  async listRoles(
    request: operations.ListGuildRolesRequest,
    options?: RequestOptions,
  ): Promise<Array<components.GuildRoleResponse>> {
    return unwrapAsync(guildsListRoles(
      this,
      request,
      options,
    ));
  }

  async createRole(
    request: operations.CreateGuildRoleRequest,
    options?: RequestOptions,
  ): Promise<components.GuildRoleResponse> {
    return unwrapAsync(guildsCreateRole(
      this,
      request,
      options,
    ));
  }

  async previewPrune(
    request: operations.PreviewPruneGuildRequest,
    options?: RequestOptions,
  ): Promise<components.GuildPruneResponse> {
    return unwrapAsync(guildsPreviewPrune(
      this,
      request,
      options,
    ));
  }

  async prune(
    request: operations.PruneGuildRequest,
    options?: RequestOptions,
  ): Promise<components.GuildPruneResponse> {
    return unwrapAsync(guildsPrune(
      this,
      request,
      options,
    ));
  }

  async banUser(
    request: operations.BanUserFromGuildRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(guildsBanUser(
      this,
      request,
      options,
    ));
  }

  async unbanUser(
    request: operations.UnbanUserFromGuildRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(guildsUnbanUser(
      this,
      request,
      options,
    ));
  }

  async get(
    request: operations.GetGuildRequest,
    options?: RequestOptions,
  ): Promise<components.GuildWithCountsResponse> {
    return unwrapAsync(guildsGet(
      this,
      request,
      options,
    ));
  }

  async delete(
    request: operations.DeleteGuildRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(guildsDelete(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.UpdateGuildRequest,
    options?: RequestOptions,
  ): Promise<components.GuildResponse> {
    return unwrapAsync(guildsUpdate(
      this,
      request,
      options,
    ));
  }
}
